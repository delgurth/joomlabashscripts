#!/bin/sh
# This script is written by DirectAdmin and Martynas Bendorius (smtalk)

BUILDSCRIPT_VER=2.0.0-RC7
NAME=custombuild

OS=`uname`
WORKDIR=/usr/local/directadmin/${NAME}

cd ${WORKDIR};

#Added for security
chmod 700 ${WORKDIR}/build >/dev/null 2>&1
chmod 700 ${WORKDIR} >/dev/null 2>&1

if [ "$(id -u)" != "0" ]; then
   echo "You must be root to execute the script. Exiting."
   exit 1
fi

OPTIONS_CONF=${WORKDIR}/options.conf
OPTIONS_CONF_EXISTS=1;
if [ ! -e ${OPTIONS_CONF} ]; then
	OPTIONS_CONF_EXISTS=0;
fi
VERSIONS_FILE=${WORKDIR}/versions.txt
PATCHES_VERSIONS_FILE=${WORKDIR}/patches_versions.txt
VERSIONS_FILE_CUSTOM=${WORKDIR}/custom_versions.txt
VERSIONS_FILE_CL=${WORKDIR}/versions_cl.txt
VERSIONS_FILE_LITESPEED=${WORKDIR}/versions_litespeed.txt
LOCKFILE=${WORKDIR}/.custombuild
LOGFILE=${WORKDIR}/custombuild.log
PROFTPD_PREFIX=/usr
B64=0
CPU_CORES=1
DA_BIN=/usr/local/directadmin/directadmin

LANG=C

LSWS_HOME=/usr/local/lsws

# Emulate ${!variable}
eval_var() {
   var=${1}
   if [ -z ${var} ]; then
	echo ""
   else
	eval newval="\$${var}"
	echo $newval
   fi
}

removeLockfile()
{
	rm -f ${LOCKFILE}
	trap - INT TERM EXIT
}

kill_childs()
{
	if [ -s ${LOCKFILE} ]; then
		CB_PID=`cat ${LOCKFILE}`;
		for process in `ps -ef | awk -v cb_pid=${CB_PID} '{ if ( $3 == cb_pid ) { print $2 }}'`
		do
			kill ${process}
		done
	fi
}

doKill() {
	if [ -s ${LOCKFILE} ]; then
		kill_childs;
		removeLockfile;
		kill -9 ${CB_PID};
		exit 0;
	else
		echo "There is no CustomBuild process running."
	fi
	exit 0;
}

getTimezone(){
	if [ "${OS}" = "FreeBSD" ]; then
		if [ -d /usr/share/zoneinfo ] && [ -e /etc/localtime ]; then
			MD5_LOCALTIME=`md5 /etc/localtime | awk '{print $4}'`
			# we don't use 'grep -m1' here to fix: "xargs: md5: terminated with signal 13; aborting"
			DATETIMEZONE="`find /usr/share/zoneinfo -type f -print0 | xargs -0 md5 | grep "${MD5_LOCALTIME}" | awk '{print $2}' | cut -d\( -f2 | cut -d\) -f1 | perl -p0 -e 's#/usr/share/zoneinfo/##'`"
		fi
	elif [ -e ${DEBIAN_VERSION} ]; then
		if [ -e /etc/timezone ]; then
			DATETIMEZONE="`cat /etc/timezone`"
		fi
	else
		if [ -e /etc/sysconfig/clock ]; then
			DATETIMEZONE="`grep -m1 '^ZONE=' /etc/sysconfig/clock | cut -d'"' -f2 | cut -d= -f2`"
		elif [ -e /usr/bin/timedatectl ]; then
			DATETIMEZONE="`timedatectl | grep Timezone | awk '{print $2}'`"
		fi
	fi
	if [ "${DATETIMEZONE}" = "" ]; then
		DATETIMEZONE="Europe/London"
	fi
	echo ${DATETIMEZONE};
}

# Systemd
SYSTEMD=no
SYSTEMDDIR=/etc/systemd/system
CB_SYSTEMD=${WORKDIR}/configure/systemd
CB_CUST_SYSTEMD=${WORKDIR}/custom/systemd
if [ -d ${SYSTEMDDIR} ] && [ -e /usr/bin/systemctl ]; then
	SYSTEMD=yes
	SYSTEMD_SCRIPTS=/usr/libexec
fi

#There are used in other sections, so must be executed everytime
PHP1_RELEASE_SET="5.3 5.4 5.5 5.6"
if [ "${SYSTEMD}" = "yes" ]; then
	PHP1_RELEASE_SET="5.4 5.5 5.6"
fi
PHP1_SHORTRELEASE_SET="`echo ${PHP1_RELEASE_SET} | tr -d '.'`"
DEBIAN_VERSION=/etc/debian_version

USE_ALL_SETTINGS=1;
use_all_settings_toggle(){
	USE_ALL_SETTINGS=0;
}
GETOPT_CASE=1;
getopt_case_toggle(){
	GETOPT_CASE=0;
}
case "$1" in
	version) use_all_settings_toggle ;;
	kill) use_all_settings_toggle ;;
	update_da) getopt_case_toggle ;;
	get_timezone) getopt_case_toggle ;;
	set_versions_txt) getopt_case_toggle ;;
	show_file) getopt_case_toggle ;;
esac

if [ ! -e ${OPTIONS_CONF} ]; then
	USE_ALL_SETTINGS=1;
fi

if [ "${USE_ALL_SETTINGS}" = "1" ]; then
	#################################################
	#ALL SETTINGS
	#SECTIONS OF OPTIONS
	ALL_SECTIONS="PHP_SETTINGS MYSQL_SETTINGS WEBSERVER_SETTINGS WEBAPPS_SETTINGS CLAMAV_SETTINGS MAIL_SETTINGS FTP_SETTINGS STATS_SETTINGS CUSTOMBUILD_SETTINGS CRON_SETTINGS CLOUDLINUX_SETTINGS ADVANCED_SETTINGS"

	PHP_SETTINGS="PHP1_RELEASE PHP1_MODE PHP2_RELEASE PHP2_MODE OPCACHE HTSCANNER PHP_INI PHP_TIMEZONE PHP_INI_TYPE IONCUBE ZEND SUHOSIN X_MAIL_HEADER"
	MYSQL_SETTINGS="MYSQL MYSQL_INST MYSQL_BACKUP MYSQL_BACKUP_DIR MYSQL_FORCE_COMPILE"
	WEBSERVER_SETTINGS="WEBSERVER APACHE_VER APACHE_MPM MOD_RUID2 HARDEN_SYMLINKS_PATCH USE_HOSTNAME_FOR_ALIAS REDIRECT_HOST REDIRECT_HOST_HTTPS"
	WEBAPPS_SETTINGS="PHPMYADMIN PHPMYADMIN_VER SQUIRRELMAIL ROUNDCUBE WEBAPPS_INBOX_PREFIX"
	MAIL_SETTINGS="EXIM EXIMCONF SPAMASSASSIN DOVECOT PIGEONHOLE"
	CLAMAV_SETTINGS="CLAMAV CLAMAV_EXIM PROFTPD_UPLOADSCAN PUREFTPD_UPLOADSCAN SUHOSIN_PHP_UPLOADSCAN"
	FTP_SETTINGS="FTPD"
	STATS_SETTINGS="AWSTATS WEBALIZER"
	CUSTOMBUILD_SETTINGS="CUSTOMBUILD AUTOVER BOLD CLEAN CLEANAPACHE CLEAN_OLD_TARBALLS CLEAN_OLD_WEBAPPS DOWNLOADSERVER"
	CRON_SETTINGS="CRON CRON_FREQUENCY EMAIL NOTIFICATIONS DA_AUTOUPDATE UPDATES WEBAPPS_UPDATES"
	CLOUDLINUX_SETTINGS="CLOUDLINUX CAGEFS"
	ADVANCED_SETTINGS="AUTOCONF AUTOMAKE LIBTOOL CURL NEW_PCRE"

	PHP_SETTINGS_DESC="PHP Settings"
	MYSQL_SETTINGS_DESC="MySQL Settings"
	WEBSERVER_SETTINGS_DESC="WEB Server Settings"
	WEBAPPS_SETTINGS_DESC="WEB Applications Settings"
	CLAMAV_SETTINGS_DESC="ClamAV-related Settings"
	MAIL_SETTINGS_DESC="Mail Settings"
	FTP_SETTINGS_DESC="FTP Settings"
	STATS_SETTINGS_DESC="Statistics Settings"
	CUSTOMBUILD_SETTINGS_DESC="CustomBuild Settings"
	CRON_SETTINGS_DESC="Cronjob Settings"
	CLOUDLINUX_SETTINGS_DESC="CloudLinux Settings"
	ADVANCED_SETTINGS_DESC="Advanced Settings"

	YESNO_SET="yes no"

	#OPTIONS.CONF
	PHP1_RELEASE_DEF="5.5"
	PHP1_MODE_SET="php-fpm fastcgi suphp lsphp mod_php"
	if [ ${OS} = "FreeBSD" ]; then
		PHP1_MODE_DEF="php-fpm"
	else
		PHP1_MODE_DEF="mod_php"
	fi
	PHP1_RELEASE_DESC="Default version of PHP."
	PHP1_MODE_DESC="Mode of the default PHP version. lsphp is only compatible with LiteSpeed WWW server or CloudLinux+Apache. For nginx (not as a reverse proxy for apache) php-fpm must be chosen."

	PHP2_RELEASE_SET="${PHP1_RELEASE_SET} no"
	PHP2_RELEASE_DEF="no"
	PHP2_MODE_SET="${PHP1_MODE_SET}"
	PHP2_MODE_DEF="php-fpm"
	PHP2_RELEASE_DESC="Additional version of PHP."
	PHP2_MODE_DESC="Mode of the additional PHP version."

	HTSCANNER_SET="${YESNO_SET}"
	HTSCANNER_DEF="no"
	HTSCANNER_DESC="htscanner for Apache (allows to confige php in .htaccess files using PHP)."

	OPCACHE_SET="${YESNO_SET}"
	OPCACHE_DEF="no"
	OPCACHE_DESC="opCache opcode cacher for PHP."

	PHP_INI_SET="${YESNO_SET}"
	PHP_INI_DEF="no"
	PHP_INI_DESC="Enables ability to update php.ini file of PHP (rewrites any customizations!)."

	PHP_TIMEZONE_SET="userinput"
	PHP_TIMEZONE_DEF="$(getTimezone)"
	PHP_TIMEZONE_DESC="date.timezone setting in php.ini file of PHP. http://www.php.net/manual/en/datetime.configuration.php#ini.date.timezone."

	PHP_INI_TYPE_SET="production development"
	PHP_INI_TYPE_DEF="production"
	PHP_INI_TYPE_DESC="Type of php.ini file. php.ini-development contains settings recommended for use in development environments. php.ini-production contains settings recommended for use in production environments."

	IONCUBE_SET="${YESNO_SET}"
	IONCUBE_DEF="no"
	IONCUBE_DESC="PHP loader for ionCube Secured Files."

	SUHOSIN_SET="${YESNO_SET}"
	SUHOSIN_DEF="no"
	SUHOSIN_DESC="Suhosin advanced protection system for PHP."

	SUHOSIN_PHP_UPLOADSCAN_SET="${YESNO_SET}"
	SUHOSIN_PHP_UPLOADSCAN_DEF="no"
	SUHOSIN_PHP_UPLOADSCAN_DESC="Scan PHP uploaded scripts using suhosin upload verification script and ClamAV antivirus (clamdscan). ClamAV must be installed and suhosin option should be enabled for the setting to work."

	#OUTPUT AS x-mail-header
	X_MAIL_HEADER_SET="${YESNO_SET}"
	X_MAIL_HEADER_DEF="yes"
	X_MAIL_HEADER_DESC="mail.add_x_header setting in php.ini file of PHP. http://www.php.net/manual/en/mail.configuration.php#ini.mail.add-x-header"

	ZEND_SET="${YESNO_SET}"
	ZEND_DEF="no"
	ZEND_DESC="Zend Guard Loader is a free runtime application that enables PHP to run the scripts encoded by Zend Guard."

	WEBSERVER_SET="apache nginx nginx_apache litespeed"
	WEBSERVER_DEF="apache"
	WEBSERVER_DESC="WWW Server."

	APACHE_VER_SET="2.4"
	APACHE_VER_DEF="2.4"
	APACHE_VER_DESC="Apache version."

	APACHE_MPM_SET="prefork event worker auto"
	APACHE_MPM_DEF="auto"
	APACHE_MPM_DESC="Apache Multi-Processing Module. 'auto' mode sets MPM to be Prefork if PHP as mod_php is chosen, because this way PHP is not thread-safe. Otherwise Event MPM is set."

	MOD_RUID2_SET="${YESNO_SET}"
	if [ "${OS}" = "FreeBSD" ]; then
		MOD_RUID2_DEF="no"
	else
		MOD_RUID2_DEF="yes"
	fi
	MOD_RUID2_DESC="mod_ruid2 is an Apache extension that allows requests to a domain to run as the owner of that domain, instead of the Apache user. Not supported on FreeBSD systems."

	#OUTPUT as harden-symlinks-patch
	HARDEN_SYMLINKS_PATCH_SET="${YESNO_SET}"
	HARDEN_SYMLINKS_PATCH_DEF="yes"
	HARDEN_SYMLINKS_PATCH_DESC="Patches apache to include hardened symlinks patch. http://files.directadmin.com/services/custombuild/harden-symlinks-2.4.patch."

	USE_HOSTNAME_FOR_ALIAS_SET="${YESNO_SET} auto"
	USE_HOSTNAME_FOR_ALIAS_DEF="no"
	USE_HOSTNAME_FOR_ALIAS_DESC="Redirects WEB appplications addresses to server hostname. Useful with FastCGI mode of PHP ('auto' option enables it for FastCGI mode of PHP only)."

	REDIRECT_HOST_SET="userinput"
	REDIRECT_HOST_DEF="`hostname`"
	REDIRECT_HOST_DESC="Hostname used for use_hostname_for_alias setting."

	REDIRECT_HOST_HTTPS_SET="${YESNO_SET}"
	REDIRECT_HOST_HTTPS_DEF="no"
	REDIRECT_HOST_HTTPS_DESC="Enables SSL redirection for use_hostname_for_alias setting."

	MYSQL_INST_SET="yes no mysql mariadb"
	MYSQL_INST_DEF="no"
	MYSQL_INST_DESC="Enables management of ${MYSQLNAME} using CustomBuild."
	
	MYSQL_DESC="${MYSQLNAME} version."

	MYSQL_BACKUP_SET="${YESNO_SET}"
	MYSQL_BACKUP_DEF="yes"
	MYSQL_BACKUP_DESC="Backups MySQL databases before the installation of ${MYSQLNAME} server."

	MYSQL_BACKUP_DIR_SET="userinput"
	MYSQL_BACKUP_DIR_DEF="/usr/local/directadmin/custombuild/mysql_backups"
	MYSQL_BACKUP_DIR_DESC="Sets full path for mysql_backup option were MySQL backups should be placed."

	MYSQL_FORCE_COMPILE_SET="${YESNO_SET}"
	MYSQL_FORCE_COMPILE_DEF="no"
	MYSQL_FORCE_COMPILE_DESC="Force compilation of ${MYSQLNAME} instead of using system packages (RPM, DEB)"

	PHPMYADMIN_SET="${YESNO_SET}"
	PHPMYADMIN_DEF="yes"
	PHPMYADMIN_DESC="Enables management of phpMyAdmin (Web application to manage MySQL databases) using CustomBuild."

	PHPMYADMIN_VER_SET="3 4"
	PHPMYADMIN_VER_DEF="4"
	PHPMYADMIN_VER_DESC="Selects the version of phpMyAdmin to install. Takes effect only when phpmyadmin option is enabled."

	SQUIRRELMAIL_SET="${YESNO_SET}"
	SQUIRRELMAIL_DEF="yes"
	SQUIRRELMAIL_DESC="Enables management of SquirrelMail webmail using CustomBuild."

	ROUNDCUBE_SET="${YESNO_SET}"
	ROUNDCUBE_DEF="yes"
	ROUNDCUBE_DESC="Enables management of RoundCube webmail using CustomBuild."
	
	WEBAPPS_INBOX_PREFIX_SET="${YESNO_SET}"
	WEBAPPS_INBOX_PREFIX_DEF="no"
	WEBAPPS_INBOX_PREFIX_DESC="Adds INBOX. prefix to all of the mailbox folders in SquirrelMail/RoundCube (like: INBOX.Sent instead of just Sent)"

	EXIM_SET="${YESNO_SET}"
	EXIM_DEF="no"
	EXIM_DESC="Enables management of Exim MTA (Mail Transfer Agent) using CustomBuild."

	EXIMCONF_SET="${YESNO_SET}"
	EXIMCONF_DEF="no"
	EXIMCONF_DESC="Enables ability to update exim.conf and exim.pl files of Exim MTA (rewrites any customizations!)."

	CLAMAV_SET="${YESNO_SET}"
	CLAMAV_DEF="no"
	CLAMAV_DESC="Enables management of ClamAV antivirus engine using CustomBuild. Enables ClamAV automatically in Exim configuration."

	CLAMAV_EXIM_SET="${YESNO_SET}"
	CLAMAV_EXIM_DEF="yes"
	CLAMAV_EXIM_DESC="Enables ClamAV automatically in Exim configuration together with the installation of ClamAV."

	SPAMASSASSIN_SET="${YESNO_SET}"
	SPAMASSASSIN_DEF="no"
	SPAMASSASSIN_DESC="Enables management of SpamAssassin Spam Filter using CustomBuild. Enables SpamAssassin automatically in Exim configuration."

	DOVECOT_SET="${YESNO_SET}"
	DOVECOT_DEF="yes"
	DOVECOT_DESC="Enables management of Dovecot IMAP and POP3 email server using CustomBuild."

	PIGEONHOLE_SET="${YESNO_SET}"
	PIGEONHOLE_DEF="no"
	PIGEONHOLE_DESC="Enables management of Pigeonhole (enables Sieve language and the ManageSieve protocol, allows users to configure email filtering in their email clients) for Dovecot IMAP and POP3 email server using CustomBuild. When this setting is enabled, Pigeonhole is enabled with update/installation of Dovecot. RoundCube plugin to manage email filtering is enabled with update/installation of RoundCube."

	AWSTATS_SET="${YESNO_SET}"
	AWSTATS_DEF="no"
	AWSTATS_DESC="Enables management of AWstats (generates advanced web server statistics graphically) using CustomBuild."

	WEBALIZER_SET="${YESNO_SET}"
	WEBALIZER_DEF="yes"
	WEBALIZER_DESC="Enables management of Webalizer (generates advanced web server statistics graphically) using CustomBuild."

	FTPD_SET="proftpd pureftpd"
	FTPD_DEF="pureftpd"
	FTPD_DESC="FTP Server."

	PUREFTPD_UPLOADSCAN_SET="${YESNO_SET}"
	PUREFTPD_UPLOADSCAN_DEF="no"
	PUREFTPD_UPLOADSCAN_DESC="Scan FTP uploaded files in Pure-FTPd using ClamAV. ClamAV needs to be installed for this setting to work."

	PROFTPD_UPLOADSCAN_SET="${YESNO_SET}"
	PROFTPD_UPLOADSCAN_DEF="no"
	PROFTPD_UPLOADSCAN_DESC="Scan FTP uploaded files in ProFTPd using ClamAV. ClamAV needs to be installed for this setting to work."

	AUTOCONF_SET="${YESNO_SET}"
	AUTOCONF_DEF="yes"
	AUTOCONF_DESC="Enables management of Autoconf (package for generating configure scripts) using CustomBuild."

	AUTOMAKE_SET="${YESNO_SET}"
	AUTOMAKE_DEF="yes"
	AUTOMAKE_DESC="Enables management of Automake (tool for automatically generating Makefile.in files) using CustomBuild."

	LIBTOOL_SET="${YESNO_SET}"
	LIBTOOL_DEF="yes"
	LIBTOOL_DESC="Enables management of Libtool (generic library support script) using CustomBuild."

	CURL_SET="${YESNO_SET}"
	CURL_DEF="yes"
	CURL_DESC="Enables management of cURL (library and command-line tool for transferring data using various protocols) using CustomBuild."

	NEW_PCRE_SET="${YESNO_SET}"
	NEW_PCRE_DEF="no"
	NEW_PCRE_DESC="Enables latest version of pcre to be compiled using CustomBuild."

	CUSTOMBUILD_SET="1.1 1.2 2.0"
	CUSTOMBUILD_DEF="2.0"
	CUSTOMBUILD_DESC="CustomBuild version to be used. WARNING: not recommended to change the setting without deep knowledge about upgrade/downgrade of the CustomBuild script."

	AUTOVER_SET="${YESNO_SET}"
	AUTOVER_DEF="no"
	AUTOVER_DESC="Updates versions.txt file (latest versions of the packages are listed there) with every execution of the CustomBuild script."

	BOLD_SET="${YESNO_SET}"
	BOLD_DEF="yes"
	BOLD_DESC="Enables bold effect for important output in terminal."

	CLEAN_SET="${YESNO_SET}"
	CLEAN_DEF="yes"
	CLEAN_DESC="Cleans not needed folders in the CustomBuild directory. Folders are often left from the previous packge installations."

	CLEANAPACHE_SET="${YESNO_SET}"
	CLEANAPACHE_DEF="yes"
	CLEANAPACHE_DESC="Removes Apache directory when the installation is finished. Takes effect only when 'clean' option is enabled."

	CLEAN_OLD_TARBALLS_SET="${YESNO_SET}"
	CLEAN_OLD_TARBALLS_DEF="yes"
	CLEAN_OLD_TARBALLS_DESC="Removes tarballs of old (unused) packages."

	CLEAN_OLD_WEBAPPS_SET="${YESNO_SET}"
	CLEAN_OLD_WEBAPPS_DEF="yes"
	CLEAN_OLD_WEBAPPS_DESC="Removes old WEB application folders from /var/www/html. Takes effect when any WEB application is installed/updated."

	DOWNLOADSERVER_SET="files.directadmin.com"
	if [ -s ${WORKDIR}/servers.txt ]; then
		DOWNLOADSERVER_SET="files.directadmin.com `awk '{ printf "%s ", $0 }' ${WORKDIR}/servers.txt`"
	fi
	DOWNLOADSERVER_DEF="files.directadmin.com"
	DOWNLOADSERVER_DESC="Sets which download server to use to download files needed by the CustomBuild script. Any other server than ${DOWNLOADSERVER_DEF} may take 24 hours for latest files to be synced, however they may have better speeds than ${DOWNLOADSERVER_DEF}."

	CRON_SET="${YESNO_SET}"
	CRON_DEF="no"
	CRON_DESC="Enables cronjob for CustomBuild scheduled jobs set."

	CRON_FREQUENCY_SET="daily weekly monthly"
	CRON_FREQUENCY_DEF="weekly"
	CRON_FREQUENCY_DESC="Sets the execution frequency of the Cronjob (scheduled jobs). Takes effect only when the 'cron' option is enabled."

	EMAIL_SET="userinput"
	EMAIL_DEF="email@domain.com"
	EMAIL_DESC="Sets the email for notifications about the updates available. Takes effect only when 'cron' and 'notifications' options are enabled."

	NOTIFICATIONS_SET="${YESNO_SET}"
	NOTIFICATIONS_DEF="yes"
	NOTIFICATIONS_DESC="Sets the email for notifications about the updates available. Takes effect only when 'cron' option is enabled."

	DA_AUTOUPDATE_SET="${YESNO_SET}"
	DA_AUTOUPDATE_DEF="no"
	DA_AUTOUPDATE_DESC="Sets DirectAdmin to be updated automatically when the Cronjob is executed. Takes effect only when 'cron' option is enabled."

	UPDATES_SET="${YESNO_SET}"
	UPDATES_DEF="no"
	UPDATES_DESC="Enables automatic updates of all available to update packaged managed by the CustomBuild script. Takes effect only when 'cron' option is enabled. WARNING: not recommended in production!"

	WEBAPPS_UPDATES_SET="${YESNO_SET}"
	WEBAPPS_UPDATES_DEF="yes"
	WEBAPPS_UPDATES_DESC="Enables automatic updates of all WEB applications enabled. Takes effect only when 'cron' option is enabled."

	CLOUDLINUX_SET="${YESNO_SET}"
	CLOUDLINUX_DEF="no"
	CLOUDLINUX_DESC="Enables CloudLinux support in the CustomBuild script (automatic patching using CloudLinux patches for specific components). NOTE: CloudLinux needs to be installed on the system. http://www.cloudlinux.com."

	CAGEFS_SET="${YESNO_SET}"
	CAGEFS_DEF="no"
	CAGEFS_DESC="Enables support of CageFS component by CloudLinux in the CustomBuild script (automatic updating of files in CageFS using 'cagefsctl --force-update'). NOTE: CloudLinux needs to be installed on the system. http://www.cloudlinux.com."
fi
#################################################
	
showVersion(){
	echo "${BUILDSCRIPT_VER} (rev: 1065)";
}

#Check is not needed anymore, because most of users already use 1.43, that is stated in FAQ etc.
#if [ -s /usr/local/directadmin/directadmin ] && [ -s /usr/local/directadmin/conf/directadmin.conf ]; then
#	DIRECTADMIN_CHECK="`/usr/local/directadmin/directadmin v | awk '{ print $3 }' | cut -d. -f3`"
#	if [ "${DIRECTADMIN_CHECK}" -lt 43 ]; then
#		echo "CustomBuild 2.0 needs DirectAdmin 1.43 or higher to be installed on the system. Please update it."
#		exit 0;
#	fi
#fi
if [ ! -d ${WORKDIR}/patches ]; then
	mkdir -p ${WORKDIR}/patches
	chmod 700 ${WORKDIR}/patches
fi

initLogfile(){
	LOG_IP=localhost
	if [ `who | wc -l` -gt 0 ]; then
		if [ ${OS} = "FreeBSD" ]; then
			LOG_IP=`env | grep -m1 "REMOTEHOST" | cut -d= -f2`
		else
			LOG_IP=`echo $SSH_CLIENT | cut -d' ' -f1`
		fi
	fi

	if [ ! -e ${LOGFILE} ]; then
		touch ${LOGFILE}
		chmod 600 ${LOGFILE}
	else
		if [ ${OS} = "FreeBSD" ]; then
			LOGSIZE=`stat -f %z ${LOGFILE}`
		else
			LOGSIZE=`stat -c %s ${LOGFILE}`
		fi
		
		#Rotate the logfile if the filesize is >10MB
		if [ ${LOGSIZE} -gt 10485760 ]; then
			rm -f ${LOGFILE}.1
			mv ${LOGFILE} ${LOGFILE}.1
			touch ${LOGFILE}
			chmod 600 ${LOGFILE}
		fi
	fi
}

B64COUNT=`uname -m | grep -m1 -c 64`
if [ "$B64COUNT" -eq 1 ]; then
	B64=1
	LD_LIBRARY_PATH=/usr/local/lib64:/usr/local/lib:/usr/lib64:/usr/lib:/lib64:/lib
	export LD_LIBRARY_PATH
fi

if [ ${OS} = "FreeBSD" ]; then
	#if [ "`sysctl -a | grep kern.threads.virtual_cpu | cut -d' ' -f2`" -gt 1 ]; then
	#	CPU_CORES="`sysctl -a | grep kern.threads.virtual_cpu | cut -d' ' -f2`"
	#fi
	CPU_CORES=`/sbin/sysctl hw.ncpu | cut -d\  -f2`
	PROFTPD_PREFIX=/usr/local
else
	if [ "`cat /proc/cpuinfo | grep -F 'model name' | wc -l`" -gt 0 ]; then
		CPU_CORES="`cat /proc/cpuinfo | grep -F 'model name' | wc -l`"
	fi
fi

#check path for /usr/local/bin
COUNT=`echo "${PATH}" | grep -m1 -c /usr/local/bin:`
if [ "${COUNT}" -eq 0 ]; then
	export PATH=/usr/local/bin:$PATH
fi

# Main variables
HTTPDDIR=/etc/httpd
HTTPDCONF=/etc/httpd/conf
HTTPD_CONF=${HTTPDCONF}/httpd.conf

NGINXCONF=/etc/nginx

WWWDIR=/var/www/html

DACONF_FILE=/usr/local/directadmin/conf/directadmin.conf
DACONF_TEMPLATE_FILE=/usr/local/directadmin/data/templates/directadmin.conf
SERVICES=/usr/local/directadmin/data/admin/services.status
TASK_QUEUE=/usr/local/directadmin/data/task.queue.cb

IPV6=0
if [ -e ${DA_BIN} ]; then
	IPV6=`${DA_BIN} c | grep -m1 '^ipv6=' | cut -d= -f2`
fi

#CWD=`pwd`
CWD=${WORKDIR}
FORCE=0
HIDE_CHANGES=0

# Applications variables
APPUSER=webapps
ECHO=echo
STRINGS=/usr/bin/strings
STAT=/usr/bin/stat
TR=/usr/bin/tr
READLINK=/usr/bin/readlink

if [ "${OS}" = "FreeBSD" ]; then
        WGET=/usr/local/bin/wget
        TAR=/usr/bin/tar
        CHOWN=/usr/sbin/chown
	MYSQL_DATA=/home/mysql
	MYSQL_BIN=/usr/local/mysql/bin/mysql
else
        WGET=/usr/bin/wget
        TAR=/bin/tar
        CHOWN=/bin/chown
	if [ -e /etc/debian_version ]; then
		MYSQL_DATA=/home/mysql
		MYSQL_BIN=/usr/local/mysql/bin/mysql
		ECHO=/bin/echo
	else
		MYSQL_DATA=/var/lib/mysql
		MYSQL_BIN=/usr/bin/mysql
	fi
fi
WGET_CONNECT_TIMEOUT="`${WGET} --help | grep -c '\-\-read\-timeout'`"
if [ "${WGET_CONNECT_TIMEOUT}" -gt 0 ]; then
	WGET_CONNECT_OPTIONS="--connect-timeout=5 --read-timeout=10 --tries=3"
else
	WGET_CONNECT_OPTIONS="--timeout=10"
fi

OS_MARIADB="0"
if [ -e ${MYSQL_BIN} ]; then
	OS_MARIADB="`${MYSQL_BIN} -V | grep -c 'MariaDB'`"
fi
MYSQLNAME="MySQL"
if [ "${OS_MARIADB}" != "0" ]; then
	MYSQLNAME="MariaDB"				
fi

MYSQL_SET="5.1 5.5 5.6"
MYSQL_DEF="5.6"

if [ "${OS_MARIADB}" != "0" ]; then
	MYSQL_SET="5.5"
	MYSQL_DEF="5.5"
fi

# Check if workdir exists
if [ ! -d ${WORKDIR} ]; then
	echo "Directory ${WORKDIR} does not exist."
	exit 1
fi

initMySQL(){
	#MySQL settings
	DA_MYSQL=/usr/local/directadmin/conf/mysql.conf
	if [ -s ${DA_MYSQL} ]; then
		MYSQLUSER=`grep -m1 "^user=" ${DA_MYSQL} | cut -d= -f2`
		MYSQLPASSWORD=`grep -m1 "^passwd=" ${DA_MYSQL} | cut -d= -f2`
	else
		MYSQLUSER='da_admin'
		MYSQLPASSWORD='nothing'
	fi

	if [ -s $DA_MYSQL ] && [ `grep -m1 -c -e "^host=" ${DA_MYSQL}` -gt "0" ]; then
		MYSQLHOST=`grep -m1 "^host=" ${DA_MYSQL} | cut -d= -f2`
	else
		MYSQLHOST=localhost
	fi

	#Where connections to mysql are from. Usualy the server IP, unless on a LAN.
	MYSQL_ACCESS_HOST=localhost
	if [ "$MYSQLHOST" != "localhost" ]; then
		#its a remote databsae, so connections would come from the server IP.
		if [ -s ${WORKDIR}/scripts/setup.txt ]; then
			MYSQL_ACCESS_HOST=`cat ${WORKDIR}/scripts/setup.txt | grep -m1 -e '^ip=' | cut -d= -f2`
		fi
		
		#if we're on a LAN, then things change.
		if [ -s ${DA_MYSQL} ]; then
			if [ `grep -m1 -c -e "^access_host=" ${DA_MYSQL}` = "0" ]; then
				MYSQL_ACCESS_HOST=`grep -m1 "^access_host=" ${DA_MYSQL} | cut -d= -f2`
			fi
		fi
	fi
}

allSettings_options(){
	for section in $ALL_SECTIONS; do {
		DESC=${section}_DESC;
		echo "#$(eval_var ${DESC})";
		COUNT="0";
			
		for setting in $(eval_var ${section}); do {
			SETTING_NAME=`echo $setting | tr "[A-Z]" "[a-z]"`;
			POSSIBLE_VALUES_VAR=${setting}_SET
			POSSIBLE_VALUES="`echo $(eval_var ${POSSIBLE_VALUES_VAR}) | awk -v OFS=", " '$1=$1'`"
			DEFAULT_VALUE=${setting}_DEF
			CURRENT_VALUE=${setting}_OPT
			echo "${SETTING_NAME}=$(eval_var ${DEFAULT_VALUE})";
			COUNT="1";
		};
		done;
		if [ "${COUNT}" = "1" ]; then
			echo ""
		fi
	};
	done;
}
	
# Write options.conf
if [ "${OPTIONS_CONF_EXISTS}" = "0" ]; then
	echo "Cannot find ${OPTIONS_CONF}, writing defaults."
	allSettings_options > ${OPTIONS_CONF}
fi

# Check if options.conf exists
if [ ! -e ${OPTIONS_CONF} ]; then
	echo "Options file options.conf does not exist."
	exit 1
fi

# init.d scripts
if [ "${OS}" = "FreeBSD" ]; then
	INITDDIR=/usr/local/etc/rc.d
else
	INITDDIR=/etc/init.d
fi

####################################################

run_dataskq()
{
	DATASKQ_OPT=$1
	if [ -s ${DACONF_FILE} ]; then
		/usr/local/directadmin/dataskq ${DATASKQ_OPT} --custombuild
	fi
}

cagefsctl_update()
{
	if [ "${CAGEFS_OPT}" = "yes" ] && [ -e /usr/sbin/cagefsctl ]; then
		echo "CageFS: Executing 'cagefsctl --force-update'..."
		if [ -e /usr/bin/ionice ]; then
			/usr/bin/ionice -c3 /usr/sbin/cagefsctl --force-update
		else
			/usr/sbin/cagefsctl --force-update
		fi
	fi
}

writeLog()
{
	initLogfile;
	echo "`date +'%Y-%m-%d %H:%m:%S'` ${LOG_IP}: $@" >> ${LOGFILE}
}

EXISTS_VERSIONS_FILE_CUSTOM=0
if [ -s ${VERSIONS_FILE_CUSTOM} ]; then
	EXISTS_VERSIONS_FILE_CUSTOM=1
fi
getVer()
{
        RESULT=`grep -m1 $1: ${VERSIONS_FILE} | cut -d ':' -f 2`
        if [ "${RESULT}" = "" ]; then
		RESULT=`grep -m1 $1: ${PATCHES_VERSIONS_FILE} | cut -d ':' -f 2`
        fi
        if [ ${EXISTS_VERSIONS_FILE_CUSTOM} -eq 1 ]; then
		COUNT=`grep -m1 -c $1: ${VERSIONS_FILE_CUSTOM}`
		if [ ${COUNT} -gt 0 ]; then
			RESULT=`grep -m1 $1: ${VERSIONS_FILE_CUSTOM} | cut -d ':' -f 2`
		fi
        fi

        echo "${RESULT}"
}

getMD5()
{
	RESULT=`grep -m1 $1: ${VERSIONS_FILE} | cut -d ':' -f 3`
	if [ "${RESULT}" = "" ]; then
		RESULT=`grep -m1 $1: ${PATCHES_VERSIONS_FILE} | cut -d ':' -f 3`
        fi
        if [ ${EXISTS_VERSIONS_FILE_CUSTOM} -eq 1 ]; then
		COUNT=`grep -m1 -c $1: ${VERSIONS_FILE_CUSTOM}`
		if [ ${COUNT} -gt 0 ]; then
			RESULT=`grep -m1 $1: ${VERSIONS_FILE_CUSTOM} | cut -d ':' -f 3`
		fi
        fi
    
        echo "${RESULT}"
}

do_exit()
{
	if [ "$2" != "" ]; then
		echo "$2";
	fi
	removeLockfile
	exit $1
}

getDA_Opt()
{
	#$1 is option name
	#$2 is default value

	if [ ! -s ${DACONF_FILE} ]; then
		echo $2
		return;
	fi

	COUNT_OPT=`${DA_BIN} c | grep -m1 -c -e "^$1="`
	if [ "${COUNT_OPT}" -eq 0 ]; then
		echo $2
		return;
	fi


	${DA_BIN} c | grep -m1 "^$1=" | cut -d= -f2
}

getOpt()
{
	#$1 is option name
	#$2 is default value

	# Added "grep -v" to workaround many lines with empty options
	GET_OPTION="`grep -v "^$1=$" ${OPTIONS_CONF} | grep -m1 "^$1=" | cut -d= -f2`"
	if [ "${GET_OPTION}" = "" ]; then
		echo "$1=$2" >> ${OPTIONS_CONF}
	fi
	
	#Here we may just have a check in doChecks() to unique and check if we have 2 same options
	#if [ "$1" != "update" ] && [ "$1" != "update_data" ] && [ "$1" != "" ] && [ "$1" != "gen_help_json" ] && [ "$1" != "opt_help" ] && [ "$1" != "set" ] && [ "$1" != "get_versions_txt" ] && [ "$1" != "update_script" ] && [ "$1" != "versions_json" ] && [ "$1" != "gen_help" ] && [ "$1" != "version" ] && [ "$1" != "set_fastest" ] && [ "$1" != "set_fastest_quiet" ] && [ "$1" != "kill" ] && [ "$1" != "update_da" ] && [ "$1" != "versions" ] && [ "$1" != "versions_nobold" ] && [ "$1" != "list_configs_json" ] && [ "$1" != "settings_json" ] && [ "$1" != "get_timezone" ] && [ "$1" != "custom_config" ] && [ "$1" != "set_versions_txt" ] && [ "$1" != "show_component_config" ]  && [ "$1" != "remove_customized_config" ]  && [ "$1" != "show_file" ]; then
	#	COUNT="`grep -c "^$1=" ${OPTIONS_CONF}`"
	#	if [ ${COUNT} -ne 1 ]; then
	#		do_exit 1 "${OPTIONS_CONF} value $1 is damaged. Please check or delete it."
	#	fi
	#fi
	
	echo ${GET_OPTION};
}

have_php_system()
{
	#Checks to see if we can use system() based on the disable_functions
	if [ ! -s "${PHP_INI}" ]; then
		echo 1;
		return;
	fi
	
	C=`grep -m1 -c ^disable_functions ${PHP_INI}`
	if [ "${C}" -eq 0 ]; then
		echo 1;
		return;
	fi

	C=`grep -m1 ^disable_functions ${PHP_INI} | grep -m1 -c system`
	if [ "${C}" -eq 1 ]; then
		echo 0;
		return;
	fi

	echo 1;
	return;
}

secure_phpini(){
	if [ -e $1 ]; then
		COUNT_DISABLE_FUNCT="`grep -m1 -c -e disable_functions $1`"
		if [ "${COUNT_DISABLE_FUNCT}" -gt 0 ]; then
			CURRENT_DISABLE_FUNCT="`grep -m1 'disable_functions' $1`"
			NEW_DISABLE_FUNCT="exec,system,passthru,shell_exec,escapeshellarg,escapeshellcmd,proc_close,proc_open,dl,popen,show_source,posix_kill,posix_mkfifo,posix_getpwuid,posix_setpgid,posix_setsid,posix_setuid,posix_setgid,posix_seteuid,posix_setegid,posix_uname"
			perl -pi -e "s#${CURRENT_DISABLE_FUNCT}#disable_functions \= ${NEW_DISABLE_FUNCT}#" $1
		else
			echo "Unable to find disable_functions in $1"
		fi

		perl -pi -e 's/^register_globals = On/register_globals = Off/' $1
	fi
}

#Used to set values ON/OFF in the services.status.
#set_service name ON|OFF|delete
set_service()
{
	if [ ! -e ${SERVICES} ]; then
		#echo "Cannot find ${SERVICES}. $1 has not been set to $2";
		return
	fi
	
	SERVICE_COUNT=`grep -m1 -c "^$1=" ${SERVICES}`
	
	if [ "$2" = "delete" ]; then
		if [ "${SERVICE_COUNT}" -eq 0 ]; then
			return;
		else
			perl -pi -e "s/^${1}=.*\n//" ${SERVICES}
		fi				
		return;
	fi

	if [ "$2" = "ON" ] || [ "$2" = "OFF" ]; then
		if [ "${SERVICE_COUNT}" -eq 0 ]; then
			echo "$1=$2" >> ${SERVICES}
		else
			perl -pi -e "s/^$1=.*/$1=$2/" ${SERVICES}
		fi

		return;
	fi

	echo "setService $1: unknown option: $2";
}

control_service()
{
	SERVICE_NAME=$1;
	SERVICE_ACTION=$2;
	
	if [ "${SYSTEMD}" = "yes" ] && [ -e ${SYSTEMDDIR}/${SERVICE_NAME}.service ]; then
		systemctl ${SERVICE_ACTION} ${SERVICE_NAME}.service
	elif [ "${SYSTEMD}" = "yes" ] && [ -e /lib/systemd/system/${SERVICE_NAME}.service ]; then
		systemctl ${SERVICE_ACTION} ${SERVICE_NAME}.service
	else
		if [ -e ${INITDDIR}/${SERVICE_NAME} ]; then
			${INITDDIR}/${SERVICE_NAME} ${SERVICE_ACTION}
		fi
	fi
}


#sets the value of $1 to $2 in the file $3
setVal()
{
        if [ ! -e $3 ]; then
                return;
        fi

        COUNT=`grep -m1 -c ${1}= ${3}`
        if [ "$COUNT" -eq 0 ]; then
                #ok, it's not there, add it.
                echo "$1=$2" >> $3
                return;
        else
                #ok, the value is already in the file $3, so use perl to regex it.
                perl -pi -e "s/`grep ${1}= ${3}`/${1}=${2}/" ${3}
        fi
}

#A > B: 1
#A = B: 0
#A < B: -1
#3rd option is descriptor
version_cmp()
{
	A=`echo $1 | cut -d- -f1`
	B=`echo $2 | cut -d- -f1`
	
	if [ "$A" = "" ] || [ "$B" = "" ]; then
		echo "version_cmp has a blank value when checking $3";
		return;
	fi

	A1=`echo $A | cut -d. -f1`
	B1=`echo $B | cut -d. -f1`

	if [ "$A1" -gt "$B1" ]; then
		echo  1;
		return;
	fi

	if [ "$A1" -lt "$B1" ]; then
		echo  -1;
		return;
	fi

	A2=`echo $A | cut -d. -f2`
	B2=`echo $B | cut -d. -f2`

	if [ "$A2" -gt "$B2" ]; then
		echo  1;
		return;
	fi

	if [ "$A2" -lt "$B2" ]; then
		echo  -1;
		return;
	fi

	A3=`echo $A | cut -d. -f3`
	B3=`echo $B | cut -d. -f3`

	if [ "$A3" = "" ] && [ "$B3" = "" ]; then
		echo 0;
		return;
	fi
	
	if [ "$A3" = "" ]; then
		echo 1;
		return;
	fi
	
	if [ "$B3" = "" ]; then
		echo -1;
		return;
	fi

	if [ "$A3" -gt "$B3" ]; then
		echo  1;
		return;
	fi

	if [ "$A3" -lt "$B3" ]; then
		echo  -1;
		return;
	fi

	echo 0;
}

####################################################

#These are needed for some functions outside
BOLD_OPT=`getOpt bold ${BOLD_DEF}`
# Variables for bolded text
boldon=""
boldoff=""
if [ "${BOLD_OPT}" = "yes" ]; then
	boldon="`tput -Txterm bold`"
	boldoff="`tput -Txterm sgr0`"
fi
CLEAN_OPT=`getOpt clean ${CLEAN_DEF}`
if [ -s ${DEBIAN_VERSION} ]; then
	MYSQL_FORCE_COMPILE_OPT=`getOpt mysql_force_compile ${MYSQL_FORCE_COMPILE_DEF}`
else
	MYSQL_FORCE_COMPILE_OPT=`getOpt mysql_force_compile ${MYSQL_FORCE_COMPILE_DEF}`
fi
DOWNLOADSERVER_OPT=`getOpt downloadserver ${DOWNLOADSERVER_DEF}`
WEBPATH=http://${DOWNLOADSERVER_OPT}/services/custombuild
WEBPATH_SERVICES=http://${DOWNLOADSERVER_OPT}/services
WEBPATH_BACKUP_IP=69.162.69.58
WEBPATH_BACKUP=http://${WEBPATH_BACKUP_IP}/services/custombuild
WEBPATH_SERVICES_BACKUP=http://${WEBPATH_BACKUP_IP}/services
WEBPATH_CL=http://repo.cloudlinux.com/cloudlinux/sources/da
WEBPATH_LITESPEED=http://www.litespeedtech.com/packages

case "$1" in
	"") getopt_case_toggle ;;
	version) getopt_case_toggle ;;
	kill) getopt_case_toggle ;;
	update_da) getopt_case_toggle ;;
	get_timezone) getopt_case_toggle ;;
	set_versions_txt) getopt_case_toggle ;;
	show_file) getopt_case_toggle ;;
esac
if [ "${GETOPT_CASE}" = "1" ]; then
	#CloudLinux
	CLOUDLINUX_OPT=`getOpt cloudlinux ${CLOUDLINUX_DEF}`
	CAGEFS_OPT=`getOpt cagefs ${CAGEFS_DEF}`

	# Read options.conf
	FTPD_OPT=`getOpt ftpd ${FTPD_DEF}`
	PUREFTPD_UPLOADSCAN_OPT=`getOpt pureftpd_uploadscan ${PUREFTPD_UPLOADSCAN_DEF}`
	PROFTPD_UPLOADSCAN_OPT=`getOpt proftpd_uploadscan ${PROFTPD_UPLOADSCAN_DEF}`
	SPAMASSASSIN_OPT=`getOpt spamassassin ${SPAMASSASSIN_DEF}`
	CLAMAV_OPT=`getOpt clamav ${CLAMAV_DEF}`
	CLAMAV_EXIM_OPT=`getOpt clamav_exim ${CLAMAV_EXIM_DEF}`
	# Mailman is not yet supported
	#MAILMAN_OPT=`getOpt mailman no`

	WEBSERVER_OPT=`getOpt webserver ${WEBSERVER_DEF}`
		
	HN_T=`hostname`
	REDIRECT_HOST_OPT=`getOpt redirect_host ${HN_T}`
	REDIRECT_HOST_HTTPS_OPT=`getOpt redirect_host_https ${REDIRECT_HOST_HTTPS_DEF}`
	USE_HOSTNAME_FOR_ALIAS_OPT=`getOpt use_hostname_for_alias ${USE_HOSTNAME_FOR_ALIAS_DEF}`

	TZ_T=$(getTimezone)
	PHP_TIMEZONE_OPT=`getOpt php_timezone ${TZ_T}`

	#Apache
	APACHE_VER_OPT=`getOpt apache_ver ${APACHE_VER_DEF}`
	APACHE_MPM_OPT=`getOpt apache_mpm ${APACHE_MPM_DEF}`
	MOD_RUID2_OPT=`getOpt mod_ruid2 ${MOD_RUID2_DEF}`

	HARDEN_SYMLINKS_PATCH_OPT=`getOpt harden_symlinks_patch ${HARDEN_SYMLINKS_PATCH_DEF}`

	# 443 and 80 ports
	PORT_80=`getDA_Opt port_80 80`
	PORT_443=`getDA_Opt port_443 443`

	# Reverse proxy ports
	PORT_8080=`getDA_Opt port_8080 8080`
	PORT_8081=`getDA_Opt port_8081 8081`

	#PHP
	PHP1_RELEASE_OPT=`getOpt php1_release ${PHP1_RELEASE_DEF}`
	PHP2_RELEASE_OPT=`getOpt php2_release ${PHP2_RELEASE_DEF}`

	PHP1_SHORTRELEASE=`echo ${PHP1_RELEASE_OPT} | tr -d '.'`
	PHP2_SHORTRELEASE=`echo ${PHP2_RELEASE_OPT} | tr -d '.'`

	PHP1_MODE_OPT=`getOpt php1_mode ${PHP1_MODE_DEF}`
	PHP2_MODE_OPT=`getOpt php2_mode ${PHP2_MODE_DEF}`
	OPCACHE_OPT=`getOpt opcache ${OPCACHE_DEF}`
	HTSCANNER_OPT=`getOpt htscanner ${HTSCANNER_DEF}`
	PHP_INI_TYPE_OPT=`getOpt php_ini_type ${PHP_INI_TYPE_DEF}`
	ZEND_OPT=`getOpt zend ${ZEND_DEF}`
	IONCUBE_OPT=`getOpt ioncube ${IONCUBE_DEF}`
	SUHOSIN_OPT=`getOpt suhosin ${SUHOSIN_DEF}`
	SUHOSIN_PHP_UPLOADSCAN_OPT=`getOpt suhosin_php_uploadscan ${SUHOSIN_PHP_UPLOADSCAN_DEF}`
	X_MAIL_HEADER_OPT=`getOpt x_mail_header ${X_MAIL_HEADER_DEF}`

	APCONF=ap2

	HAVE_FPM_CGI=no
	HAVE_FCGID=no
	HAVE_SUPHP_CGI=no
	HAVE_CLI=no
	HAVE_LSPHP=no
	for php_shortrelease in `echo ${PHP1_SHORTRELEASE_SET}`; do {
		eval `echo "HAVE_FPM${php_shortrelease}_CGI=no"`;
		eval `echo "HAVE_FCGID${php_shortrelease}=no"`;
		eval `echo "HAVE_SUPHP${php_shortrelease}_CGI=no"`;
		eval `echo "HAVE_CLI${php_shortrelease}=no"`;
		eval `echo "HAVE_LSPHP${php_shortrelease}=no"`;
		eval `echo "PHP${php_shortrelease}_CONFIGURE=configure/${APCONF}/configure.php${php_shortrelease}"`;
		if [ -e custom/${APCONF}/configure.php${php_shortrelease} ]; then
			eval `echo "PHP${php_shortrelease}_CONFIGURE=custom/${APCONF}/configure.php${php_shortrelease}"`;
		fi
	};
	done;

	if [ "${PHP1_RELEASE_OPT}" != "no" ] && [ "${PHP1_MODE_OPT}" = "php-fpm" ]; then
		HAVE_FPM_CGI=yes
		eval `echo "HAVE_FPM${PHP1_SHORTRELEASE}_CGI=yes"`;
	fi
	if [ "${PHP2_RELEASE_OPT}" != "no" ] && [ "${PHP2_MODE_OPT}" = "php-fpm" ]; then
		HAVE_FPM_CGI=yes
		eval `echo "HAVE_FPM${PHP2_SHORTRELEASE}_CGI=yes"`;
	fi

	if [ "${PHP1_RELEASE_OPT}" != "no" ] && [ "${PHP1_MODE_OPT}" = "fastcgi" ]; then
		HAVE_FCGID=yes
		eval `echo "HAVE_FCGID${PHP1_SHORTRELEASE}=yes"`;
	fi
	if [ "${PHP2_RELEASE_OPT}" != "no" ] && [ "${PHP2_MODE_OPT}" = "fastcgi" ]; then
		HAVE_FCGID=yes
		eval `echo "HAVE_FCGID${PHP2_SHORTRELEASE}=yes"`;
	fi

	if [ "${PHP1_RELEASE_OPT}" != "no" ] && [ "${PHP1_MODE_OPT}" = "suphp" ]; then
		HAVE_SUPHP_CGI=yes
		eval `echo "HAVE_SUPHP${PHP1_SHORTRELEASE}_CGI=yes"`;
	fi
	if [ "${PHP2_RELEASE_OPT}" != "no" ] && [ "${PHP2_MODE_OPT}" = "suphp" ]; then
		HAVE_SUPHP_CGI=yes
		eval `echo "HAVE_SUPHP${PHP2_SHORTRELEASE}_CGI=yes"`;
	fi

	if [ "${PHP1_RELEASE_OPT}" != "no" ] && [ "${PHP1_MODE_OPT}" = "mod_php" ]; then
		HAVE_CLI=yes
		eval `echo "HAVE_CLI${PHP1_SHORTRELEASE}=yes"`;
	fi
	if [ "${PHP2_RELEASE_OPT}" != "no" ] && [ "${PHP2_MODE_OPT}" = "mod_php" ]; then
		HAVE_CLI=yes
		eval `echo "HAVE_CLI${PHP2_SHORTRELEASE}=yes"`;
	fi

	if [ "${PHP1_RELEASE_OPT}" != "no" ] && [ "${PHP1_MODE_OPT}" = "lsphp" ]; then
		HAVE_LSPHP=yes
		eval `echo "HAVE_LSPHP${PHP1_SHORTRELEASE}=yes"`;
	fi
	if [ "${PHP2_RELEASE_OPT}" != "no" ] && [ "${PHP2_MODE_OPT}" = "lsphp" ]; then
		HAVE_LSPHP=yes
		eval `echo "HAVE_LSPHP${PHP2_SHORTRELEASE}=yes"`;
	fi

	#MySQL
	MYSQL_BACKUP_OPT=`getOpt mysql_backup ${MYSQL_BACKUP_DEF}`
	MYSQL_OPT=`getOpt mysql ${MYSQL_DEF}`
	MYSQL_INST_OPT=`getOpt mysql_inst ${MYSQL_INST_DEF}`
	MYSQL_BACKUP_DIR_OPT=`getOpt mysql_backup_dir ${MYSQL_BACKUP_DIR_DEF}`

	#Email
	DOVECOT_OPT=`getOpt dovecot ${DOVECOT_DEF}`
	PIGEONHOLE_OPT=`getOpt pigeonhole ${PIGEONHOLE_DEF}`
	EXIM_OPT=`getOpt exim ${EXIM_DEF}`
	EXIMCONF_OPT=`getOpt eximconf ${EXIMCONF_DEF}`

	#Applications
	PHPMYADMIN_OPT=`getOpt phpmyadmin ${PHPMYADMIN_DEF}`
	PHPMYADMIN_VER_OPT=`getOpt phpmyadmin_ver ${PHPMYADMIN_VER_DEF}`
	SQUIRRELMAIL_OPT=`getOpt squirrelmail ${SQUIRRELMAIL_DEF}`
	ROUNDCUBE_OPT=`getOpt roundcube ${ROUNDCUBE_DEF}`
	WEBAPPS_INBOX_PREFIX_NEWDEF="no"
	if [ "${OPTIONS_CONF_EXISTS}" = "1" ]; then
		WEBAPPS_INBOX_PREFIX_NEWDEF="yes"
	fi
	WEBAPPS_INBOX_PREFIX_OPT=`getOpt webapps_inbox_prefix ${WEBAPPS_INBOX_PREFIX_NEWDEF}`

	#Statistics software
	AWSTATS_OPT=`getOpt awstats ${AWSTATS_DEF}`
	WEBALIZER_OPT=`getOpt webalizer ${WEBALIZER_DEF}`

	#Autoconf/automake/libtool
	AUTOCONF_OPT=`getOpt autoconf ${AUTOCONF_DEF}`
	AUTOMAKE_OPT=`getOpt automake ${AUTOMAKE_DEF}`
	LIBTOOL_OPT=`getOpt libtool ${LIBTOOL_DEF}`
	CURL_OPT=`getOpt curl ${CURL_DEF}`

	#this must be off by default.. since exim is linked against libpcre.so.0
	NEW_PCRE_OPT=`getOpt new_pcre ${NEW_PCRE_DEF}`

	#CustomBuild
	AUTOVER_OPT=`getOpt autover ${AUTOVER_DEF}`
	
	CLEAN_OLD_TARBALLS_OPT=`getOpt clean_old_tarballs ${CLEAN_OLD_TARBALLS_DEF}`
	CLEAN_OLD_WEBAPPS_OPT=`getOpt clean_old_webapps ${CLEAN_OLD_WEBAPPS_DEF}`
	CLEANAPACHE_OPT=`getOpt cleanapache ${CLEANAPACHE_DEF}`
	CUSTOMBUILD_OPT=`getOpt custombuild ${CUSTOMBUILD_DEF}`

	#Cron
	CRON_OPT=`getOpt cron ${CRON_DEF}`
	CRON_FREQUENCY_OPT=`getOpt cron_frequency ${CRON_FREQUENCY_DEF}`
	EMAIL_OPT=`getOpt email ${EMAIL_DEF}`
	NOTIFICATIONS_OPT=`getOpt notifications ${NOTIFICATIONS_DEF}`
	DA_AUTOUPDATE_OPT=`getOpt da_autoupdate ${DA_AUTOUPDATE_DEF}`
	UPDATES_OPT=`getOpt updates ${UPDATES_DEF}`
	WEBAPPS_UPDATES_OPT=`getOpt webapps_updates ${WEBAPPS_UPDATES_DEF}`
	
	if [ "${WEBSERVER_OPT}" = "litespeed" ]; then
		if [ ! -s ${VERSIONS_FILE_LITESPEED} ]; then
			${WGET} ${WGET_CONNECT_OPTIONS} ${WEBPATH_LITESPEED}/versions.txt -O ${VERSIONS_FILE_LITESPEED} 2> /dev/null
		fi
	fi
	if [ "${CLOUDLINUX_OPT}" = "yes" ]; then
		if [ ! -s ${VERSIONS_FILE_CL} ]; then
			${WGET} ${WGET_CONNECT_OPTIONS} ${WEBPATH_CL}/versions.txt -O ${VERSIONS_FILE_CL} 2> /dev/null
		fi
	fi
fi

setOpt()
{
	#$1 is option name
	#$2 is value
	if [ "$1" = "email" ]; then
		OPT_VALUE1="`grep -m1 "^$1=" ${OPTIONS_CONF} | cut -d= -f2 | cut -d\@ -f 1`"
		OPT_VALUE2="`grep -m1 "^$1=" ${OPTIONS_CONF} | cut -d= -f2 | cut -d\@ -f 2`"
		OPT_NEW_VALUE1="`echo "$2" | cut -d\@ -f 1`"
		OPT_NEW_VALUE2="`echo "$2" | cut -d\@ -f 2`"
		perl -pi -e "s#$1=${OPT_VALUE1}\@${OPT_VALUE2}#$1=${OPT_NEW_VALUE1}\@${OPT_NEW_VALUE2}#" ${WORKDIR}/options.conf
		if [ "${HIDE_CHANGES}" = "0" ]; then
			echo "Changed ${boldon}$1${boldoff} option from ${boldon}${OPT_VALUE1}@${OPT_VALUE2}${boldoff} to ${boldon}$2${boldoff}"
		fi			
	else
		VAR=`echo $1 | tr "[a-z]" "[A-Z]"`
		if [ -z "$(eval_var ${VAR}_DEF)" ]; then
			echo "${1} is not a valid option."
			return;
		fi
		VALID="no"
		for i in $(eval_var ${VAR}_SET); do {
			if [ "${i}" = "${2}" ] || [ "${i}" = "userinput" ]; then
				VALID="yes";
				break;
			fi
		};
		done;
		if [ "${VALID}" = "no" ]; then
			echo "${2} is not a valid setting for ${1} option."
			return;
		fi
		OPT_VALUE="`grep -m1 "^$1=" ${OPTIONS_CONF} | cut -d= -f2`"
		perl -pi -e "s#$1=${OPT_VALUE}#$1=$2#" ${WORKDIR}/options.conf
		if [ "${HIDE_CHANGES}" = "0" ]; then
			echo "Changed ${boldon}$1${boldoff} option from ${boldon}${OPT_VALUE}${boldoff} to ${boldon}$2${boldoff}"
		fi
	fi
}

allSettings(){
	for section in $ALL_SECTIONS; do {
		DESC=${section}_DESC;
		echo "------------------------------------------"
		echo "$(eval_var ${DESC})";
		echo "------------------------------------------"
		for setting in $(eval_var ${section}); do {
			SETTING_NAME=`echo $setting | tr "[A-Z]" "[a-z]"`;
			POSSIBLE_VALUES_VAR=${setting}_SET
			POSSIBLE_VALUES="`echo $(eval_var ${POSSIBLE_VALUES_VAR}) | awk -v OFS=", " '$1=$1'`"
			DEFAULT_VALUE=${setting}_DEF
			CURRENT_VALUE=${setting}_OPT
			echo -n "${SETTING_NAME}: ${POSSIBLE_VALUES}. Current value: $(eval_var ${CURRENT_VALUE}). Default value: $(eval_var ${DEFAULT_VALUE}).";
			if [ "$1" = "full" ]; then
				DESCRIPTION="${setting}_DESC"
				echo " Description: $(eval_var ${DESCRIPTION})"
			else
				echo ""
			fi
		};
		done;
		echo ""
	};
	done;
}

allSettingsJSON(){
	echo "{";
	NUM_OF_SECTIONS=`echo $ALL_SECTIONS | wc -w`;
	CUR_SECTION=0;
	for section in $ALL_SECTIONS; do {
		CUR_SECTION=`expr ${CUR_SECTION} + 1`;
		NUM_OF_SETTINGS=`echo "$(eval_var ${section})" | wc -w`;
		CUR_SETTING=0;
		LOWERCASE_SECTION=`echo $section | tr "[A-Z]" "[a-z]"`
		SECTION_DESC=${section}_DESC;
		printf "\t\"${LOWERCASE_SECTION}\": {\n"
		printf "\t\t\"description\": \"$(eval_var ${SECTION_DESC})\",\n"
		for setting in $(eval_var ${section}); do {
			CUR_SETTING=`expr ${CUR_SETTING} + 1`;
			SETTING_NAME=`echo $setting | tr "[A-Z]" "[a-z]"`;
			
			POSSIBLE_VALUES_VAR=${setting}_SET
			POSSIBLE_VALUES=""
			NUM_OF_VALUES=`echo $(eval_var ${POSSIBLE_VALUES_VAR}) | wc -w`
			CUR_VALUE=0;
			for value in $(eval_var ${POSSIBLE_VALUES_VAR}); do {
				CUR_VALUE=`expr ${CUR_VALUE} + 1`;
				if [ ${CUR_VALUE} -ne ${NUM_OF_VALUES} ]; then
					POSSIBLE_VALUES="${POSSIBLE_VALUES}\"$value\",";
				else
					POSSIBLE_VALUES="${POSSIBLE_VALUES}\"${value}\"";
				fi
			};
			done;
			DEFAULT_VALUE=${setting}_DEF
			CURRENT_VALUE=${setting}_OPT
			DESCRIPTION="${setting}_DESC"
			
			printf "\t\t\"${SETTING_NAME}\": {\n"
				printf "\t\t\t\"values\": [${POSSIBLE_VALUES}],\n"
				printf "\t\t\t\"default\": \"$(eval_var ${DEFAULT_VALUE})\",\n"
				printf "\t\t\t\"current\": \"$(eval_var ${CURRENT_VALUE})\",\n"
				printf "\t\t\t\"description\": \"$(eval_var ${DESCRIPTION})\"\n"
			if [ ${CUR_SETTING} -ne ${NUM_OF_SETTINGS} ]; then
				printf "\t\t},\n"
			else
				printf "\t\t}\n"
			fi
		};
		done;
		if [ ${CUR_SECTION} -ne ${NUM_OF_SECTIONS} ]; then
			printf "\t},\n"
		else
			printf "\t}\n"
		fi
	};
	done;
	echo "}";
}

doChecks()
{
		if [ "${APACHE_VER_OPT}" != "2.4" ]; then
			echo "CustomBuild 2.0 does support Apache 2.4 only. Please check your apache_ver value in the options.conf file: ${APACHE_VER_OPT}."
			exit 1;
		fi
		
		if [ "${MYSQL_INST_OPT}" = "mariadb" ] && [ -e ${MYSQL_BIN} ]; then
			if [ "${OS_MARIADB}" = "0" ]; then
				echo "MariaDB server is currently supported on CentOS7/RHEL7 OS only, but it's set in the options.conf file.";
				exit 1;
			fi
		fi
		
		if [ "${MYSQL_INST_OPT}" = "mysql" ] && [ -e ${MYSQL_BIN} ]; then
			if [ "${OS_MARIADB}" != "0" ]; then
				#echo "MySQL server is currently not supported on CentOS7/RHEL7 OS, but it's set in the options.conf file.";
				echo "mysql_inst=mysql is set in the options.conf, but MariaDB is currently installed";
				echo "If you wish to use MySQL, please remove MariaDB and install MySQL before setting CustomBuild to manage it.";
				exit 1;
			fi
		fi
		
		if [ "${MYSQL_INST_OPT}" != "no" ]; then
			CORRECT_MYSQL_VER="`echo ${MYSQL_SET} | grep -c ${MYSQL_OPT}`"
			if [ "${CORRECT_MYSQL_VER}" = "0" ]; then
				echo "Incorrect mysql value (used to specify ${MYSQLNAME} release) set in the options.conf file. Set: ${MYSQL_OPT}. Available values: ${MYSQL_SET}."
				exit 1;
			fi
		fi
		
		if [ "${PHP_INI_TYPE_OPT}" != "development" ] && [ "${PHP_INI_TYPE_OPT}" != "production" ]; then
			echo "Wrong php_ini_type set in options.conf."
			exit 1
		fi
		
		if [ "${OPCACHE_OPT}" = "yes" ] && [ "${ZEND_OPT}" = "yes" ]; then
			echo "Zend Guard Loader is not compatible with opCache. Please disable one of them."
			exit 1
		fi

		if [ "${WEBSERVER_OPT}" = "nginx" ]; then
			if [ "${HAVE_CLI}" = "yes" ] || [ "${HAVE_SUPHP_CGI}" = "yes" ] || [ "${HAVE_FCGID}" = "yes" ] || [ "${HAVE_LSPHP}" = "yes" ]; then
				echo "nginx webserver is only compatible with php-fpm PHP mode."
				exit 1;
			fi
		fi
		
		if [ "${MOD_RUID2_OPT}" = "yes" ]; then
			if [ "${WEBSERVER_OPT}" = "apache" ] || [ "${WEBSERVER_OPT}" = "litespeed" ] || [ "${WEBSERVER_OPT}" = "nginx_apache" ]; then
				if [ "${HAVE_FPM_CGI}" = "yes" ] || [ "${HAVE_FCGID}" = "yes" ] || [ "${PHP1_MODE_OPT}" = "lsphp" ] ; then
					echo "${WEBSERVER_OPT} webserver configuration option is not compatible with php-fpm, lsphp or php-fastcgi PHP mode with mod_ruid2 enabled."
					exit 1;
				fi
			fi
		fi
		
		if [ "${MOD_RUID2_OPT}" = "yes" ] && [ "${HAVE_SUPHP_CGI}" = "yes" ]; then
			echo "WARNING: It's not recommended to use ${WEBSERVER_OPT} with mod_ruid2 & suPHP enabled. It's a redundant and slow combination."
			sleep 1;
		fi
		
		if [ "${WEBSERVER_OPT}" = "litespeed" ]; then
			if [ "${PHP1_MODE_OPT}" != "lsphp" ]; then
				echo "php1_mode must be set to lsphp when using ${WEBSERVER_OPT} WEB server."
				exit 1;
			fi
			if [ "${PHP2_MODE_OPT}" != "lsphp" ] && [ "${PHP2_RELEASE_OPT}" != "no" ]; then
				echo "php2_mode must be set to lsphp when using ${WEBSERVER_OPT} WEB server."
				exit 1;
			fi
		elif [ "${CLOUDLINUX_OPT}" != "yes" ]; then
			if [ "${WEBSERVER_OPT}" = "apache" ] || [ "${WEBSERVER_OPT}" = "nginx_apache" ]; then
				if [ "${PHP1_MODE_OPT}" = "lsphp" ]; then
					echo "php1_mode cannot be set to lsphp when using ${WEBSERVER_OPT} WEB server and CloudLinux disabled."
					exit 1;
				fi
				if [ "${PHP2_MODE_OPT}" = "lsphp" ] && [ "${PHP2_RELEASE_OPT}" != "no" ]; then
					echo "php2_mode cannot be set to lsphp when using ${WEBSERVER_OPT} WEB server and CloudLinux disabled."
					exit 1;
				fi
			fi
		fi
		
		if [ "${WEBSERVER_OPT}" = "apache" ] && [ "${CLOUDLINUX_OPT}" = "yes" ]; then
			if [ "${PHP2_MODE_OPT}" = "lsphp" ] && [ "${PHP2_RELEASE_OPT}" != "no" ]; then
				echo "You cannot have a 2nd version of PHP set to lsphp if Apache WEB server is used with CloudLinux enabled."
				exit 1;
			fi
		fi
		
		if [ "${PHP1_MODE_OPT}" != "php-fpm" ] && [ "${PHP1_MODE_OPT}" != "fastcgi" ] && [ "${PHP1_MODE_OPT}" != "mod_php" ] && [ "${PHP1_MODE_OPT}" != "suphp" ] && [ "${PHP1_MODE_OPT}" != "lsphp" ]; then
			echo "Please set a correct PHP mode (mode set for php1_release should be php-fpm, fastcgi, mod_php, suphp or lsphp)."
			exit 1
		fi
		if [ "${PHP2_MODE_OPT}" != "php-fpm" ] && [ "${PHP2_MODE_OPT}" != "fastcgi" ] && [ "${PHP2_MODE_OPT}" != "mod_php" ] && [ "${PHP2_MODE_OPT}" != "suphp" ] && [ "${PHP2_MODE_OPT}" != "lsphp" ]; then
			echo "Please set a correct PHP mode (mode set for php2_release should be php-fpm, fastcgi, mod_php, suphp or lsphp)."
			exit 1
		fi
		
		PHP1_RELEASE_CHECK=0
		for i in `echo "${PHP1_RELEASE_SET}"`; do {
			if [ "${PHP1_RELEASE_OPT}" = "$i" ]; then
				PHP1_RELEASE_CHECK=1;
			fi
		}; 
		done
		
		PHP2_RELEASE_CHECK=0
		for i in `echo "${PHP2_RELEASE_SET} no"`; do {
			if [ "${PHP2_RELEASE_OPT}" = "$i" ]; then
				PHP2_RELEASE_CHECK=1;
			fi
		}; 
		done
		
		if [ "${PHP1_MODE_OPT}" = "mod_php" ] && [ "${PHP2_MODE_OPT}" = "mod_php" ]; then
			echo "Cannot install both versions of PHP in mod_php mode."
			exit 1
		elif [ "${PHP1_RELEASE_OPT}" = "${PHP2_RELEASE_OPT}" ]; then
			echo "Cannot install the same version of PHP for both releases."
			exit 1
		elif [ "${PHP1_RELEASE_CHECK}" = "0" ]; then
			echo "Wrong php1_release set in the options.conf: ${PHP1_RELEASE_OPT}."
			exit 1
		elif [ "${PHP2_RELEASE_CHECK}" = "0" ]; then
			echo "Wrong php2_release set in the options.conf: ${PHP2_RELEASE_OPT}."
			exit 1
		fi
		
		if [ "${APACHE_VER_OPT}" != "2.4" ]; then
			echo "Wrong apache_ver value set in ${OPTIONS_CONF}."
			exit 1
		fi
		
		if [ "${MOD_RUID2_OPT}" = "yes" ]; then
			if [ "${OS}" = "FreeBSD" ]; then
				echo "mod_ruid2 does not support FreeBSD."
				exit 1
			fi
		fi

		if [ "${MYSQL_OPT}" != "5.1" ] && [ "${MYSQL_OPT}" != "5.5" ] && [ "${MYSQL_OPT}" != "5.6" ]; then
			echo "Wrong mysql_ver value set in ${OPTIONS_CONF}."
			exit 1
		fi
		
		if [ "${FTPD_OPT}" = "pureftpd" ]; then
			if [ -s "$DACONF_FILE" ]; then
				UNIFIED_FTP=`/usr/local/directadmin/directadmin c | grep -m1 unified_ftp_password_file | cut -d= -f2`
				if [ "$UNIFIED_FTP" != "1" ]; then
					echo "unified_ftp_password_file is not set to 1.  You must convert before you can use pureftpd";
					echo "Please read this guide: http://www.directadmin.com/features.php?id=1134";
					echo "";
					echo "Simulation:";
					echo "     cd /usr/local/directadmin";
					echo "     echo 'action=convert&value=unifiedftp&simulate=yes' >> data/task.queue";
					echo "     ./dataskq d1";
					echo "";
					echo "Conversion:";
					echo "     cd /usr/local/directadmin";
					echo "     echo 'unified_ftp_password_file=1' >> conf/directadmin.conf";
					echo "     echo 'action=convert&value=unifiedftp' >> data/task.queue";
					echo "     ./dataskq d1";
					echo "";

					exit 1;
				fi
			fi
		fi
		
		if [ "${CRON_FREQUENCY_OPT}" != "daily" ] && [ "${CRON_FREQUENCY_OPT}" != "weekly" ] && [ "${CRON_FREQUENCY_OPT}" != "monthly" ]; then
			echo "Wrong cron_frequency value set in ${OPTIONS_CONF}";
			echo "Current value: ${CRON_FREQUENCY_OPT}";
			echo "Valid values: daily, weekly, or monthly";

			exit 1;
		fi
}

checkMD5()
{
	#$1 is the local file
	#$2 is the versions.txt variable
	#return values:
	#1 for error, try agian
	#0 for nothing to report.

	if [ ${OS} = "FreeBSD" ]; then
		MD5SUM=/sbin/md5
	else	
		MD5SUM=/usr/bin/md5sum
	fi
	
	if [ ! -e $MD5SUM ]; then
		echo 0;
		return;
	fi

	if [ ! -e "$1" ]; then
		echo 1;
	fi

	VMD5=`getMD5 $2`
	if [ "$VMD5" = "" ]; then
		echo 0;
		return;
	fi

	if [ ${OS} = "FreeBSD" ]; then
		FMD5=`$MD5SUM -q $1`
	else	
		FMD5=`$MD5SUM $1 | cut -d\  -f1`
	fi
	

	if [ "$FMD5" = "$VMD5" ]; then
		echo 0;
	else
		echo 1;
	fi
}

GET_FILE_FAILED_COUNT=0
getFile() {
	cd ${CWD};

	TRY_DIFFERENT_THRESH=2
	GIVE_UP_THRESH=5

        if [ ! -s ${1} ]
        then
                printf "Downloading\t\t$1...\n";
                if [ ${OS} = "FreeBSD" ]; then
                        fetch -o ${CWD}/${1} ${WEBPATH}/${1};
                else
                        ${WGET} ${WGET_CONNECT_OPTIONS} -O ${CWD}/${1} ${WEBPATH}/${1}
                fi

                if [ ! -s $1 ]
                then              
			echo "Downloaded file ${CWD}/${1} does not exist or is empty after download";
			echo "cwd is: `pwd`";
	 		echo "${boldon}Fileserver might be down, using the backup file server..${boldoff}";
                        if [ ${OS} = "FreeBSD" ]; then
                                fetch -o ${CWD}/${1} ${WEBPATH_BACKUP}/${1};
                        else
                                ${WGET} ${WGET_CONNECT_OPTIONS} -O ${CWD}/${1} ${WEBPATH_BACKUP}/${1};
                        fi
                        
			if [ "${GET_FILE_FAILED_COUNT}" -eq ${GIVE_UP_THRESH} ]; then
				echo "";
				echo "";
				echo "${boldon}There seem to be many connection issues.  Check your network and /etc/resolv.conf file${boldoff}";
				echo "Also try finding a faster server: http://help.directadmin.com/item.php?id=305";
				echo "";
				echo "";
				sleep 5;

				#messages/changes will now stop because it's above.
				GET_FILE_FAILED_COUNT=$((GET_FILE_FAILED_COUNT+1))

			elif [ "${GET_FILE_FAILED_COUNT}" -lt ${GIVE_UP_THRESH} ]; then
				GET_FILE_FAILED_COUNT=$((GET_FILE_FAILED_COUNT+1))

				if [ "${GET_FILE_FAILED_COUNT}" -gt ${TRY_DIFFERENT_THRESH} ]; then

					echo "";
					echo "${boldon}Too many failed attempts with ${DOWNLOADSERVER_OPT}. Will try a different server.${boldoff}";
					SET_DL=files.directadmin.com
					case "${DOWNLOADSERVER_OPT}" in
						files.directadmin.com)	SET_DL=${WEBPATH_BACKUP_IP};
									;;
						files1.directadmin.com)	SET_DL=${WEBPATH_BACKUP_IP};
									;;
						files2.directadmin.com)	SET_DL=files1.directadmin.com;
									;;
						files8.directadmin.com) SET_DL=files6.directadmin.com;
									;;
						files11.directadmin.com) SET_DL=files6.directadmin.com;
									;;
						files15.directadmin.com) SET_DL=files6.directadmin.com;
									;;
						files16.directadmin.com) SET_DL=files6.directadmin.com;
									;;
					esac

					echo "${boldon}We'll temporarily try using $SET_DL instead${boldoff}";
					echo "";

					DOWNLOADSERVER_OPT=${SET_DL}
					WEBPATH=http://${DOWNLOADSERVER_OPT}/services/custombuild
					WEBPATH_SERVICES=http://${DOWNLOADSERVER_OPT}/services
					
					sleep 2;
				fi
			fi
		fi
        elif [ "$#" -eq 1 ]; then
		printf "Downloading\t\t$1...\n";
                if [ ${OS} = "FreeBSD" ]; then
                        fetch -o ${CWD}/${1} ${WEBPATH}/${1};
                else
                        ${WGET} ${WGET_CONNECT_OPTIONS} -O ${CWD}/${1} ${WEBPATH}/${1}
                fi
        elif [ "$1" != "patches_versions.txt" ]; then
		echo "File already exists";
        fi

	if [ "$#" -eq 2 ]; then

		M=`checkMD5 ${1} ${2}`

		if [ "$M" != "0" ]; then
			echo "";
			echo "${boldon}*** MD5 Checksum for $1 Failed.  Redownloading...***${boldoff}";
			echo "";
			#we will call it recursively but will *not* pass $2 for the md5 cus it would get stuck in a loop.

			rm -f $1
			getFile $1

			M=`checkMD5 ${1} ${2}`			

			if [ "$M" != "0" ]; then
				echo "";
				echo "";
				echo "${boldon}*** MD5 Checksum for $1 failed *again*.***${boldoff}";
				echo "The md5 checksum value may be incorrect, or a wrong file is being downloaded.";
				echo "Install continuing with this possibly corrupted file. (it may also be fine)";
				echo "";
				echo "";
			elif [ "$1" != "patches_versions.txt" ]; then
				echo "MD5 Checksum on $1 passed."
			fi

		elif [ "$1" != "patches_versions.txt" ]; then
			echo "MD5 Checksum on $1 passed."
		fi
	fi
}

downloadVersionsTxt(){
	if [ ${OS} = "FreeBSD" ]; then
		fetch -o ./versions.txt ${WEBPATH}/versions.txt
	else
		${WGET} ${WGET_CONNECT_OPTIONS} -O ./versions.txt ${WEBPATH}/versions.txt
	fi
	
	#because the versions.txt has the md5 for is, saves us re-downloading it if we already have the latest.
	getFile patches_versions.txt patches_versions

	if [ "${CLOUDLINUX_OPT}" = "yes" ]; then
		${WGET} ${WGET_CONNECT_OPTIONS} ${WEBPATH_CL}/versions.txt -O ${VERSIONS_FILE_CL} 2> /dev/null
	fi
	if [ "${WEBSERVER_OPT}" = "litespeed" ]; then
		${WGET} ${WGET_CONNECT_OPTIONS} ${WEBPATH_LITESPEED}/versions.txt -O ${VERSIONS_FILE_LITESPEED} 2> /dev/null
	fi
}

SKIP_LDCONFIG_SECTION=0;
skip_ldconfig_toggle(){
	SKIP_LDCONFIG_SECTION=1;
}
case "$1" in
	"") skip_ldconfig_toggle ;;
	opt_help) skip_ldconfig_toggle ;;
	set) skip_ldconfig_toggle ;;
	get_versions_txt) skip_ldconfig_toggle ;;
	update_script) skip_ldconfig_toggle ;;
	version) skip_ldconfig_toggle ;;
	set_fastest) skip_ldconfig_toggle ;;
	set_fastest_quiet) skip_ldconfig_toggle ;;
	kill) skip_ldconfig_toggle ;;
	update_da) skip_ldconfig_toggle ;;
	list_configs_json) skip_ldconfig_toggle ;;
	settings_json) skip_ldconfig_toggle ;;
	get_timezone) skip_ldconfig_toggle ;;
	custom_config) skip_ldconfig_toggle ;;
	set_versions_txt) skip_ldconfig_toggle ;;
	show_component_config) skip_ldconfig_toggle ;;
	remove_customized_config) skip_ldconfig_toggle ;;
	show_file) skip_ldconfig_toggle ;;
	check_options) skip_ldconfig_toggle ;;
esac

if [ "${SKIP_LDCONFIG_SECTION}" = "0" ]; then
	#Is the default PHP running as CGI? This variable is not used anymore, but left for the future
	GREP_PHP_MODE="`grep -m1 '^php1_mode=' ${WORKDIR}/options.conf | cut -d= -f2`"

	# Get apache version from directadmin.conf
	DACONF_APACHE_VER=1.3
	if [ -e ${DACONF_FILE} ]; then
		DACONF_APACHE_VER=`grep -m1 "^apache_ver=" ${DACONF_FILE} | cut -d= -f2`
	fi

	# Download versions.txt if AUTOVER_OPT is set to "yes"
	if [ "${AUTOVER_OPT}" = "yes" ]; then
		downloadVersionsTxt;
	fi

	# Check if ld.so.conf has /usr/local/lib
	if [ ! -e /etc/ld.so.conf ] || [ "`grep -m1 -c -E '/usr/local/lib$' /etc/ld.so.conf`" = "0" ]; then
		echo "/usr/local/lib" >> /etc/ld.so.conf
		/sbin/ldconfig
	fi
fi

getMD5CL()
{
        grep -m1 $1: ${VERSIONS_FILE_CL} | cut -d ':' -f 3
}

getMD5LSWS()
{
        grep -m1 $1: ${VERSIONS_FILE_LITESPEED} | cut -d ':' -f 3
}

checkMD5CL()
{
	#$1 is the local file
	#$2 is the versions_cl.txt or versions_litespeed.txt variable
	#return values:
	#1 for error, try agian
	#0 for nothing to report.

	MD5SUM=/usr/bin/md5sum
	
	if [ ! -e $MD5SUM ]; then
		echo 0;
		return;
	fi

	if [ ! -e "$1" ]; then
		echo 1;
	fi

	VMD5=`getMD5CL $2`
	if [ "$VMD5" = "" ]; then
		echo 0;
		return;
	fi

	FMD5=`$MD5SUM $1 | cut -d\  -f1`
	
	if [ "$FMD5" = "$VMD5" ]; then
		echo 0;
	else
		echo 1;
	fi
}

checkMD5LSWS()
{
	#$1 is the local file
	#$2 is the versions_cl.txt or versions_litespeed.txt variable
	#return values:
	#1 for error, try agian
	#0 for nothing to report.

	MD5SUM=/usr/bin/md5sum
	
	if [ ! -e $MD5SUM ]; then
		echo 0;
		return;
	fi

	if [ ! -e "$1" ]; then
		echo 1;
	fi

	VMD5=`getMD5LSWS $2`
	if [ "$VMD5" = "" ]; then
		echo 0;
		return;
	fi

	FMD5=`$MD5SUM $1 | cut -d\  -f1`
	
	if [ "$FMD5" = "$VMD5" ]; then
		echo 0;
	else
		echo 1;
	fi
}

getFileCL() {
	cd ${CWD};

        if [ ! -s ${1} ]
        then
			printf "Downloading\t\t$1...\n";
			${WGET} ${WGET_CONNECT_OPTIONS} -O ${CWD}/${1} ${WEBPATH_CL}/${1}
			tar xzf ${1} --no-same-owner
        fi

	if [ "$#" -eq 2 ]; then

		M=`checkMD5CL ${1} ${2}`

		if [ "$M" != "0" ]; then
			echo "";
			echo "${boldon}*** MD5 Checksum for $1 Failed.  Redownloading...***${boldoff}";
			echo "";
			#we will call it recursively but will *not* pass $2 for the md5 cus it would get stuck in a loop.

			rm -f $1
			getFileCL $1
            		tar xzf ${1} --no-same-owner
			M=`checkMD5CL ${1} ${2}`			

			if [ "$M" != "0" ]; then
				echo "";
				echo "";
				echo "${boldon}*** MD5 Checksum for $1 failed *again*.***${boldoff}";
				echo "The md5 checksum value may be incorrect, or a wrong file is being downloaded.";
				echo "Install continuing with this possibly corrupted file. (it may also be fine)";
				echo "";
				echo "";
			fi
		fi
	fi
}

getFileLSWS() {
	cd ${CWD};

        if [ ! -s ${1} ]
        then
			printf "Downloading\t\t$1...\n";
			${WGET} ${WGET_CONNECT_OPTIONS} -O ${CWD}/${1} ${WEBPATH_LITESPEED}/${LITESPEED_REPO}/${1}
        fi

	if [ "$#" -eq 2 ]; then
		M=`checkMD5LSWS ${1} ${2}`

		if [ "$M" != "0" ]; then
			echo "";
			echo "${boldon}*** MD5 Checksum for $1 Failed.  Redownloading...***${boldoff}";
			echo "";
			#we will call it recursively but will *not* pass $2 for the md5 cus it would get stuck in a loop.

			rm -f $1
			getFileLSWS $1
            		tar xzf ${1} --no-same-owner
			M=`checkMD5LSWS ${1} ${2}`			

			if [ "$M" != "0" ]; then
				echo "";
				echo "";
				echo "${boldon}*** MD5 Checksum for $1 failed *again*.***${boldoff}";
				echo "The md5 checksum value may be incorrect, or a wrong file is being downloaded.";
				echo "Install continuing with this possibly corrupted file. (it may also be fine)";
				echo "";
				echo "";
			fi
		fi
	fi
}
####################################################

# Rewrite directadmin-vhosts.conf
doVhosts(){
	PATHNAME=${HTTPDCONF}/extra

	if [ "${WEBSERVER_OPT}" = "nginx" ]; then
		PATHNAME=${NGINXCONF}
	fi
	
	if [ ! -d ${PATHNAME} ]; then
		mkdir -p ${PATHNAME}
	fi
	echo -n '' > ${PATHNAME}/directadmin-vhosts.conf
	#for i in `ls /usr/local/directadmin/data/users`; do { echo "Include /usr/local/directadmin/data/users/$i/httpd.conf" >> ${HTTPDCONF}/extra/directadmin-vhosts.conf; }; done;
	if [ "${WEBSERVER_OPT}" = "nginx" ]; then
		for i in `ls /usr/local/directadmin/data/users/*/nginx.conf`; do { echo "include $i;" >> ${PATHNAME}/directadmin-vhosts.conf; }; done;
	elif [ "${WEBSERVER_OPT}" = "apache" ] || [ "${WEBSERVER_OPT}" = "litespeed" ]; then
		for i in `ls /usr/local/directadmin/data/users/*/httpd.conf`; do { echo "Include $i" >> ${PATHNAME}/directadmin-vhosts.conf; }; done;
	elif [ "${WEBSERVER_OPT}" = "nginx_apache" ]; then
		echo -n '' > ${NGINXCONF}/directadmin-vhosts.conf
		for i in `ls /usr/local/directadmin/data/users/*/nginx.conf`; do { echo "include $i;" >> ${NGINXCONF}/directadmin-vhosts.conf; }; done;
		for i in `ls /usr/local/directadmin/data/users/*/httpd.conf`; do { echo "Include $i" >> ${PATHNAME}/directadmin-vhosts.conf; }; done;
	fi
}

####################################################

# We need this up for compatibility purposes
PHP_INI_OPT=`getOpt php_ini no`

roundcube_version()
{
	RCVERFILE=/var/www/html/roundcube/program/include/iniset.php
	if [ ! -e $RCVERFILE ]; then
		echo 0;
		return;
	fi
	grep -m1 "RCMAIL_VERSION" $RCVERFILE | cut -d\' -f4
}

getVerLSWS()
{
	grep -m1 $1: ${VERSIONS_FILE_LITESPEED} | cut -d ':' -f 2
}

getVerCL()
{
	grep -m1 $1: ${VERSIONS_FILE_CL} | cut -d ':' -f 2
}

DONT_SKIP_VER=1
dont_skip_toggle(){
	DONT_SKIP_VER=0;
}
case "$1" in
	"") dont_skip_toggle ;;
	version) dont_skip_toggle ;;
	kill) dont_skip_toggle ;;
	update_da) dont_skip_toggle ;;
	get_timezone) dont_skip_toggle ;;
	set_versions_txt) dont_skip_toggle ;;
	show_file) dont_skip_toggle ;;
	settings_json) dont_skip_toggle ;;
	check_options) dont_skip_toggle ;;
	opt_help) dont_skip_toggle ;;
	get_versions_txt) dont_skip_toggle ;;
	update_script) dont_skip_toggle ;;
	set_fastest) dont_skip_toggle ;;
	set_fastest_quiet) dont_skip_toggle ;;
esac

if [ "$1" = "gen_help_json" ] && [ "$2" != "" ]; then
	DONT_SKIP_VER=0;
fi

# check if we have versions.txt
if [ ! -s ${VERSIONS_FILE} ]; then
	cd ${WORKDIR}
	getFile versions.txt
fi
		
if [ ! -s ${VERSIONS_FILE} ]; then
	echo "There is no versions.txt file. Unable to download."
	exit 0;
fi

# check if we have patches_versions.txt
if [ ! -s ${PATCHES_VERSIONS_FILE} ]; then
	cd ${WORKDIR}
	getFile patches_versions.txt patches_versions
fi

if [ ! -s ${PATCHES_VERSIONS_FILE} ]; then
	echo "There is no versions.txt file. Unable to download."
	exit 0;
fi

#The following one needs an exception:
ROUNDCUBE_VER=`getVer roundcubemail`
ROUNDCUBE_MAJOR_VER=`echo ${ROUNDCUBE_VER} | cut -d. -f1`
if [ "${PHP1_RELEASE_OPT}" = "5.3" ]; then
	SQUIRRELMAIL_VER=`getVer squirrelmail`
	SQUIRRELMAIL_VER_NAME=squirrelmail
else
	SQUIRRELMAIL_VER=`getVer squirrelmail_svn`
	SQUIRRELMAIL_VER_NAME=squirrelmail_svn
fi
	
if [ "${DONT_SKIP_VER}" = "1" ]; then
	if [ "$1" != "list_configs_json" ] && [ "$1" != "custom_config" ] && [ "$1" != "show_component_config" ] && [ "$1" != "remove_customized_config" ]; then
		#####################################################
		# User Variables
		MOD_LSAPI_VER=no
		MOD_HOSTINGLIMITS_VER=no
		if [ "${CLOUDLINUX_OPT}" = "yes" ]; then
			MOD_LSAPI_VER=`getVerCL mod_lsapi`
			MOD_HOSTINGLIMITS_VER=`getVerCL mod_hostinglimits`
			PHP_LITESPEED_VER=`getVerCL php-litespeed`
		fi
		NGINX_VER=`getVer nginx`
		DIRECTADMIN_VER=`getVer directadmin`
		MODSSL_VER=`getVer mod_ssl`
		if [ "${APACHE_VER_OPT}" = "2.4" ]; then
			APACHE2_VER=`getVer apache2.4`
		fi
		AP2_MINOR_VER=`echo ${APACHE2_VER} | cut -d. -f3`

		# Minimal required version of Apache 2.4
		if [ "${AP2_MINOR_VER}" -lt 9 ]; then
			do_exit 1 "Minimal required version of Apache is 2.4.9. Please uncustomize your versions.txt file."
		fi
		
		APR_VER=`getVer apr`
		APR_UTIL_VER=`getVer apr-util`

		for php_shortrelease in `echo ${PHP1_SHORTRELEASE_SET}`; do {
			PHP_VERSION_NUMBER=`getVer php${php_shortrelease}`
			eval `echo "PHP${php_shortrelease}_VER=${PHP_VERSION_NUMBER}"`;
		};
		done;

		PHP1_VERSION_EVAL_VAR=PHP${PHP1_SHORTRELEASE}_VER
		PHP1_RELEASE_VER=$(eval_var ${PHP1_VERSION_EVAL_VAR})

		PHP2_RELEASE_VER=no
		if [ "${PHP2_RELEASE_OPT}" != "no" ]; then
			PHP2_VERSION_EVAL_VAR=PHP${PHP2_SHORTRELEASE}_VER
			PHP2_RELEASE_VER=$(eval_var ${PHP2_VERSION_EVAL_VAR})
		fi

		HTSCANNER_VER=`getVer htscanner`
		MOD_RUID2_VER=`getVer mod_ruid2`
		MOD_ACLR2_VER=`getVer mod_aclr2`
		MOD_FCGID_VER=`getVer mod_fcgid`
		FCGID_SH_VER=`getVer fcgid_sh`
		
		PIGZ_VER=`getVer pigz`

		if [ "${OS_MARIADB}" = "0" ]; then
			if [ "${MYSQL_OPT}" = "5.0" ]; then
				MYSQL_VER=`getVer mysql5.0`
				MYSQL_REL=`getVer mysql5.0_release`
			elif [ "${MYSQL_OPT}" = "5.1" ]; then
				MYSQL_VER=`getVer mysql5.1`
				MYSQL_REL=`getVer mysql5.1_release`
			elif [ "${MYSQL_OPT}" = "5.5" ]; then
				MYSQL_VER=`getVer mysql5.5`
				MYSQL_REL=`getVer mysql5.5_release`
			elif [ "${MYSQL_OPT}" = "5.6" ]; then
				MYSQL_VER=`getVer mysql5.6`
				MYSQL_REL=`getVer mysql5.6_release`
			else
				MYSQL_VER=0
				MYSQL_REL=0
			fi
			if [ "$MYSQL_REL" = "" ]; then
				MYSQL_REL=0;
			fi
		else
			if [ "${MYSQL_OPT}" = "5.5" ]; then
				MARIADB_VER=`getVer mariadb5.5`
			else
				MARIADB_VER=0
			fi
		fi
		
		PCRE_VER=`getVer pcre`
		if [ "$NEW_PCRE_OPT" = "yes" ]; then
			PCRE_VER=`getVer pcre_current`
		fi

		CURL_VER=`getVer curl`
		ZLIB_VER=`getVer zlib-current`
		MCRYPT_VER=`getVer mcrypt`

		MHASH_VER=`getVer mhash`

		SUPHP_VER=`getVer suphp_current`

		DOVECOT_VER=`getVer dovecot`
		DOVECOT_REL=`echo ${DOVECOT_VER} | cut -d. -f1,2`
		PIGEONHOLE_VER=no
		if [ "${DOVECOT_REL}" = "2.1" ]; then
			DOVECOT_SHORTREL=21
			PIGEONHOLE_VER=`getVer pigeonhole21`
		elif [ "${DOVECOT_REL}" = "2.2" ]; then
			DOVECOT_SHORTREL=22
			PIGEONHOLE_VER=`getVer pigeonhole22`
		fi
		EXIM_VER=`getVer exim`
		PROFTPD_VER=`getVer proftpd`
		PUREFTPD_VER=`getVer pureftpd`
		AUTOCONF_VER=`getVer autoconf`
		AUTOMAKE_VER=`getVer automake`
		M4_VER=`getVer m4`
		LIBTOOL_VER=`getVer libtool`
		LIBXML2_VER=`getVer libxml2-current`
		LIBXSLT_VER=`getVer libxslt`
		FREETYPE_VER=`getVer freetype`
		ICONV_VER=`getVer iconv`
		ICU_VER=`getVer icu4c`
		CLAMAV_VER=`getVer clamav`
		# Mailman is not yet supported
		#MAILMAN_VER=`getVer mailman`
		AWSTATS_VER=`getVer awstats`
		#LIBEVENT_VER=`getVer libevent`

		SUHOSIN_VER=`getVer suhosin`
		OPCACHE_VER=`getVer zendopcache`

		IONCUBE_VER=`getVer ioncube_loaders_lin_x86`
		FBSD4_IONCUBE_VER=`getVer ioncube_loaders_fre_4_x86`

		PNG_VER=`getVer libpng_current`

		# Applications versions
		if [ "${PHPMYADMIN_VER_OPT}" = "4" ]; then
			PHPMYADMIN_VER=`getVer phpmyadmin4`
		else
			PHPMYADMIN_VER=`getVer phpmyadmin3`
		fi
		
		SQUIRRELMAIL_LOCALE_VER=`getVer squirrelmail_locale`
		SQUIRRELMAIL_LOGGER_VER=`getVer squirrel_logger`

		LITESPEED_MAIN_VER="4.2"

		LITESPEED_REPO_START=`echo ${LITESPEED_MAIN_VER} | cut -d. -f1`
		LITESPEED_REPO="${LITESPEED_REPO_START}.0"

		if [ "${B64}" = "1" ]; then
			LITESPEED_VER_NAME="lsws-${LITESPEED_MAIN_VER}-ent-x86_64-linux"
		else
			LITESPEED_VER_NAME="lsws-${LITESPEED_MAIN_VER}-ent-i386-linux"
		fi

		LITESPEED_VER=no;
		if [ "${WEBSERVER_OPT}" = "litespeed" ]; then
			LITESPEED_VER=`getVerLSWS ${LITESPEED_VER_NAME}`
		fi

		if [ "${B64}" = "1" ]; then
			LITESPEED_NAME="lsws-${LITESPEED_VER}-ent-x86_64-linux"
		else
			LITESPEED_NAME="lsws-${LITESPEED_VER}-ent-i386-linux"
		fi

		# SpamAssassin versions
		SPAMASSASSIN_VER=`getVer spamassassin`

		# Variables for LiteSpeed
		LITESPEED_SERIAL_NO=${WORKDIR}/configure/litespeed/serial.no
		if [ -e ${WORKDIR}/custom/litespeed/serial.no ]; then
			LITESPEED_SERIAL_NO=${WORKDIR}/custom/litespeed/serial.no
		fi
		if [ -e ${LSWS_HOME}/conf/serial.no ]; then
			LITESPEED_SERIAL_NO=${LSWS_HOME}/conf/serial.no
		fi

		LITESPEED_TRIAL_KEY=${WORKDIR}/configure/litespeed/trial.key
		if [ -e ${WORKDIR}/custom/litespeed/trial.key ]; then
			LITESPEED_TRIAL_KEY=${WORKDIR}/custom/litespeed/trial.key
		fi
		if [ -e ${LSWS_HOME}/conf/trail.key ]; then
			LITESPEED_TRIAL_KEY=${LSWS_HOME}/conf/trial.key
		fi
	fi

	# Variable for proftpd
	PROFTPD_CONFIGURE=configure/proftpd/configure.proftpd
	if [ -e custom/proftpd/configure.proftpd ]; then
		PROFTPD_CONFIGURE=custom/proftpd/configure.proftpd
	fi

	# Variable for pureftpd
	PUREFTPD_CONFIGURE=configure/pureftpd/configure.pureftpd
	if [ -e custom/pureftpd/configure.pureftpd ]; then
		PUREFTPD_CONFIGURE=custom/pureftpd/configure.pureftpd
	fi

	# Variable for ClamAV
	CLAMAV_CONFIGURE=configure/clamav/configure.clamav
	if [ -e custom/clamav/configure.clamav ]; then
		CLAMAV_CONFIGURE=custom/clamav/configure.clamav
	fi

	# Variable for LibXML2
	LIBXML2_CONFIGURE=configure/libxml2/configure.libxml2
	if [ -e custom/libxml2/configure.libxml2 ]; then
		LIBXML2_CONFIGURE=custom/libxml2/configure.libxml2
	fi

	# Variable for LibXSLT
	LIBXSLT_CONFIGURE=configure/libxslt/configure.libxslt
	if [ -e custom/libxslt/configure.libxslt ]; then
		LIBXSLT_CONFIGURE=custom/libxslt/configure.libxslt
	fi

	# Variable for OPCACHE
	OPCACHE_INI=configure/opcache/opcache.ini
	if [ -e custom/opcache/opcache.ini ]; then
		OPCACHE_INI=custom/opcache/opcache.ini
	fi

	# Variable for SUHOSIN
	SUHOSIN_INI=configure/suhosin/suhosin.ini
	if [ -e custom/suhosin/suhosin.ini ]; then
		SUHOSIN_INI=custom/suhosin/suhosin.ini
	fi

	EXIM_MAKEFILE=""
	if [ -e custom/exim/Makefile ]; then
		EXIM_MAKEFILE=${CWD}/custom/exim/Makefile
	fi

	# Dovecot variables
	DOVECOT_CONFIGURE=configure/dovecot/configure.dovecot
	if [ -e custom/dovecot/configure.dovecot ]; then
		DOVECOT_CONFIGURE=custom/dovecot/configure.dovecot
	fi

	# Variables for apache
	APACHE2_CONFIGURE=configure/ap2/configure.apache
	if [ -e custom/ap2/configure.apache ]; then
		APACHE2_CONFIGURE=custom/ap2/configure.apache
	fi
	PHP_HANDLERS_HTTPD=/etc/httpd/conf/extra/httpd-php-handlers.conf
	SUPHP_HTTPD=/etc/httpd/conf/extra/httpd-suphp.conf

	APCONFDIR=${WORKDIR}/configure/${APCONF}/conf
	APCUSTOMCONFDIR=0
	#custom/configure isn't supposed to be there
	if [ -d ${WORKDIR}/custom/configure/${APCONF}/conf ]; then
		APCUSTOMCONFDIR=${WORKDIR}/custom/configure/${APCONF}/conf
	fi
	if [ -d ${WORKDIR}/custom/${APCONF}/conf ]; then
		APCUSTOMCONFDIR=${WORKDIR}/custom/${APCONF}/conf
	fi

	APCERTCONF=configure/${APCONF}/cert_config.txt
	if [ -e custom/configure/${APCONF}/cert_config.txt ]; then
	APCERTCONF=custom/configure/${APCONF}/cert_config.txt
	fi
	if [ -e custom/${APCONF}/cert_config.txt ]; then
	APCERTCONF=custom/${APCONF}/cert_config.txt
	fi

	# Variables for nginx
	if [ "${WEBSERVER_OPT}" = "nginx_apache" ]; then
		NGINX_CONFIGURE=configure/nginx_reverse/configure.nginx
		if [ -e custom/nginx_reverse/configure.nginx ]; then
			NGINX_CONFIGURE=custom/nginx_reverse/configure.nginx
		fi
		NGINXCONFDIR=${WORKDIR}/configure/nginx_reverse/conf
		NGINXCUSTOMCONFDIR=0
		if [ -d ${WORKDIR}/custom/nginx_reverse/conf ]; then
			NGINXCUSTOMCONFDIR=${WORKDIR}/custom/nginx_reverse/conf
		fi
	else
		NGINX_CONFIGURE=configure/nginx/configure.nginx
		if [ -e custom/nginx/configure.nginx ]; then
			NGINX_CONFIGURE=custom/nginx/configure.nginx
		fi
		NGINXCONFDIR=${WORKDIR}/configure/nginx/conf
		NGINXCUSTOMCONFDIR=0
		if [ -d ${WORKDIR}/custom/nginx/conf ]; then
			NGINXCUSTOMCONFDIR=${WORKDIR}/custom/nginx/conf
		fi
	fi

	for php_shortrelease in `echo ${PHP1_SHORTRELEASE_SET}`; do {
		# Variables for php-fpm
		eval `echo "PHP${php_shortrelease}_CONFIGURE_FPM=configure/fpm/configure.php${php_shortrelease}"`;
		if [ -e custom/fpm/configure.php${php_shortrelease} ]; then
			eval `echo "PHP${php_shortrelease}_CONFIGURE_FPM=custom/fpm/configure.php${php_shortrelease}"`;
		fi
		eval `echo "PHP${php_shortrelease}_FPM_CONF=${WORKDIR}/configure/fpm/conf/php-fpm.conf.${php_shortrelease}"`;
		if [ -e ${WORKDIR}/custom/fpm/conf/php-fpm.conf.${php_shortrelease} ]; then
			eval `echo "PHP${php_shortrelease}_FPM_CONF=${WORKDIR}/custom/fpm/conf/php-fpm.conf.${php_shortrelease}"`;
		fi
		eval `echo "PHP_INI_FPM${php_shortrelease}=/usr/local/php${php_shortrelease}/lib/php.ini"`;
		eval `echo "PHP_SBIN_FPM${php_shortrelease}=/usr/local/php${php_shortrelease}/sbin/php-fpm${php_shortrelease}"`;
		
		# Variables for PHP as suPHP
		EVAL_PHP_INI_SUPHP_VAR=PHP_SBIN_FPM${php_shortrelease}
		eval `echo "PHP_INI_SUPHP${php_shortrelease}=$(eval_var ${EVAL_PHP_INI_SUPHP_VAR})"`;
		eval `echo "PHP_BIN_SUPHP${php_shortrelease}=/usr/local/php${php_shortrelease}/bin/php-cgi${php_shortrelease}"`;
		eval `echo "PHP${php_shortrelease}_CONFIGURE_SUPHP=configure/suphp/configure.php${php_shortrelease}"`;
		if [ -e custom/suphp/configure.php${php_shortrelease} ]; then
			eval `echo "PHP${php_shortrelease}_CONFIGURE_SUPHP=custom/suphp/configure.php${php_shortrelease}"`;
		fi
		
		# Variables for php-fastcgi
		eval `echo "PHP${php_shortrelease}_CONFIGURE_FCGI=configure/fastcgi/configure.php${php_shortrelease}"`;
		if [ -e custom/fastcgi/configure.php${php_shortrelease} ]; then
			eval `echo "PHP${php_shortrelease}_CONFIGURE_FCGI=custom/fastcgi/configure.php${php_shortrelease}"`;
		fi
		
		# Variables for lsphp
		eval `echo "PHP${php_shortrelease}_CONFIGURE_LSPHP=configure/litespeed/configure.php${php_shortrelease}"`;
		if [ -e custom/litespeed/configure.php${php_shortrelease} ]; then
			eval `echo "PHP${php_shortrelease}_CONFIGURE_LSPHP=custom/litespeed/configure.php${php_shortrelease}"`;
		fi
		
		eval `echo "PHP_EXT_FPM${php_shortrelease}=/usr/local/php${php_shortrelease}/lib/php.conf.d/10-directadmin.ini"`;
		EVAL_PHP_EXT_SUPHP_VAR=PHP_EXT_FPM${php_shortrelease}
		eval `echo "PHP_EXT_SUPHP${php_shortrelease}=$(eval_var ${EVAL_PHP_EXT_SUPHP_VAR})"`;
	};
	done;

	#php extensions file rewritten by DirectAdmin
	PHP_EXT=/usr/local/lib/php.conf.d/10-directadmin.ini
	PHP_INI=/usr/local/lib/php.ini
	PHP_BIN=/usr/local/bin/php

	PHP1_INI_FILE=${PHP_INI}
	PHP1_INI_EXT_FILE=${PHP_EXT}
	if [ "${PHP1_MODE_OPT}" != "mod_php" ]; then
		PHP1_RELEASE_INI_EVAL="PHP_INI_FPM${PHP1_SHORTRELEASE}"
		PHP1_INI_FILE="$(eval_var ${PHP1_RELEASE_INI_EVAL})"
		PHP1_RELEASE_INI_EXT_EVAL="PHP_EXT_FPM${PHP1_SHORTRELEASE}"
		PHP1_INI_EXT_FILE="$(eval_var ${PHP1_RELEASE_INI_EXT_EVAL})"
	fi
	PHP1_INI_EXT_FILE_OLD="`echo ${PHP1_INI_EXT_FILE} | perl -p0 -e 's|10-directadmin.ini|directadmin.ini|'`"
	if [ -e ${PHP1_INI_EXT_FILE_OLD} ] && [ ! -e ${PHP1_INI_EXT_FILE} ]; then
		mv -f ${PHP1_INI_EXT_FILE_OLD} ${PHP1_INI_EXT_FILE}
	fi

	PHP2_INI_FILE="no"
	PHP2_INI_EXT_FILE="no"
	if [ "${PHP2_RELEASE_OPT}" != "no" ]; then
		PHP2_INI_FILE=${PHP_INI}
		PHP2_INI_EXT_FILE=${PHP_EXT}
		if [ "${PHP2_MODE_OPT}" != "mod_php" ]; then
			PHP2_RELEASE_INI_EVAL="PHP_INI_FPM${PHP2_SHORTRELEASE}"
			PHP2_INI_FILE="$(eval_var ${PHP2_RELEASE_INI_EVAL})"
			PHP2_RELEASE_INI_EXT_EVAL="PHP_EXT_FPM${PHP2_SHORTRELEASE}"
			PHP2_INI_EXT_FILE="$(eval_var ${PHP2_RELEASE_INI_EXT_EVAL})"
		fi
		PHP2_INI_EXT_FILE_OLD="`echo ${PHP2_INI_EXT_FILE} | perl -p0 -e 's|10-directadmin.ini|directadmin.ini|'`"
		if [ -e ${PHP2_INI_EXT_FILE_OLD} ] && [ ! -e ${PHP2_INI_EXT_FILE} ]; then
			mv -f ${PHP2_INI_EXT_FILE_OLD} ${PHP2_INI_EXT_FILE}
		fi
	fi
	
	#suhosin uploadscan script
	SUHOSIN_PHP_UPLOADSCAN_SCRIPT=${WORKDIR}/configure/suhosin/php_uploadscan.sh
	if [ -e ${WORKDIR}/custom/suhosin/php_uploadscan.sh ]; then
		SUHOSIN_PHP_UPLOADSCAN_SCRIPT=${WORKDIR}/custom/suhosin/php_uploadscan.sh
	fi

	#pureftpd uploadscan script
	PUREFTPD_UPLOADSCAN_SCRIPT=${WORKDIR}/configure/pureftpd/pureftpd_uploadscan.sh
	if [ -e ${WORKDIR}/custom/pureftpd/pureftpd_uploadscan.sh ]; then
		PUREFTPD_UPLOADSCAN_SCRIPT=${WORKDIR}/custom/pureftpd/pureftpd_uploadscan.sh
	fi

	SUPHP_CONFIGURE=configure/suphp/configure.suphp
	if [ -e custom/suphp/configure.suphp ]; then
		SUPHP_CONFIGURE=custom/suphp/configure.suphp
	fi
	SUPHP_PATH=/usr/local/suphp
	SUPHP_CONF_FILE=${SUPHP_PATH}/etc/suphp.conf
	SUPHP_SO=/usr/lib/apache/mod_suphp.so

	#custom script configs
	WEBAPPS_LIST=${CWD}/custom/webapps.list
	PMA_CONFIG=${CWD}/custom/phpmyadmin/config.inc.php
	PMA_THEMES=${CWD}/custom/phpmyadmin/themes
	SQUIRREL_CONFIG=${CWD}/custom/squirrelmail/config.php
	ROUNDCUBE_CONFIG=${CWD}/custom/roundcube/config.inc.php
	ROUNDCUBE_CONFIG_DB=${ROUNDCUBE_CONFIG}
	ROUNDCUBE_CONFIG_OLD=${CWD}/custom/roundcube/main.inc.php
	ROUNDCUBE_CONFIG_DB_OLD=${CWD}/custom/roundcube/db.inc.php
	if [ "${ROUNDCUBE_MAJOR_VER}" -eq 0 ]; then
		ROUNDCUBE_CONFIG=${ROUNDCUBE_CONFIG_OLD}
		ROUNDCUBE_CONFIG_DB=${ROUNDCUBE_CONFIG_DB_OLD}
	fi
	ROUNDCUBE_PLUGINS=${CWD}/custom/roundcube/plugins
	ROUNDCUBE_SKINS=${CWD}/custom/roundcube/skins
	ROUNDCUBE_PROGRAM=${CWD}/custom/roundcube/program
	ROUNDCUBE_HTACCESS=${CWD}/custom/roundcube/.htaccess

	# Variables for frontpage
	ROOT_GRP=root
	if [ ${OS} = "FreeBSD" ]; then
		ROOT_GRP=wheel
	fi

	USER_INPUT=1
	INPUT_VALUE=d

	if [ ${OS} = "FreeBSD" ]; then
		OS_VER=`uname -r | cut -d- -f1`
	elif [ -e /etc/fedora-release ]; then
		OS=fedora
		if [ "`cat /etc/fedora-release | awk '{ print $1, $2 }'`" = "Fedora Core" ]; then
			OS_VER=`cat /etc/fedora-release | awk '{ print $4 }'`
		elif [ "`cat /etc/fedora-release | awk '{ print $1, $2 }'`" = "Fedora release" ]; then
			OS_VER=`cat /etc/fedora-release | awk '{ print $3 }'`
		fi
	elif [ -e ${DEBIAN_VERSION} ]; then
		OS_VER=3.1
	else
		OS_VER=`cat /etc/redhat-release | cut -d\  -f5`
		if [ "${OS_VER}" = "" ]; then
			OS_VER=`cat /etc/redhat-release | cut -d\  -f1`
		fi
	fi

	MAINVER=""
	if [ "${OS}" = "FreeBSD" ]; then
		MAINVER=`echo ${OS_VER} | cut -d. -f1`
		if [ -e /usr/sbin/pkg ]; then
			PKG_INSTALL="pkg install -y"
		else
			PKG_INSTALL="pkg_add -r"
		fi
		if [ ${MAINVER} -ge 10 ]; then
			export CC=gcc47;
			export CXX=g++47;
			export CPP=cpp47;
			if [ ! -e /usr/local/bin/gcc47 ]; then
				${PKG_INSTALL} gcc		
			fi
			if [ ! -e /usr/local/bin/gcc47 ]; then
				do_exit 1 "Unable to find GCC on the system: /usr/local/bin/gcc47"
			fi
			if [ -e /etc/libmap.conf ]; then
				perl -pi -e 's|gcc44|gcc47|' /etc/libmap.conf
			fi
			# Fixes: /usr/lib/libstdc++.so.6: version GLIBCXX_3.4.15 required by /usr/local/mysql/bin/mysqld not found
			if [ ! -h /usr/lib/libstdc++.so.6 ]; then
				if [ -e /usr/lib/libstdc++.so.6 ]; then
					mv -f /usr/lib/libstdc++.so.6 /usr/lib/libstdc++.so.6.backup
				fi
				ln -sf /usr/local/lib/gcc47/libstdc++.so.6 /usr/lib/libstdc++.so.6
			fi
			# Fixes apache OpenSSL problem: /usr/include/openssl/bn.h:603:1: error: unknown type name 'CRYPTO_THREADID'
			if [ ! -d /usr/local/openssl ]; then
				${PKG_INSTALL} openssl
			fi
		fi
		case "${MAINVER}" in
			4)      IONCUBE_VER=$FBSD4_IONCUBE_VER
				IONCUBENAME=ioncube_loaders_fre_4_x86
				;;
			5)      IONCUBENAME=ioncube_loaders_fre_4_x86
				;;
			6)      IONCUBENAME=ioncube_loaders_fre_6_x86
				;;
			7)      IONCUBENAME=ioncube_loaders_fre_7_x86
				if [ ${B64} -eq 1 ]; then
					IONCUBENAME=ioncube_loaders_fre_7_x86-64
				fi
				;;
			8)      IONCUBENAME=ioncube_loaders_fre_8_x86-64
				;;
			9)	if [ ${B64} -eq 1 ]; then
					IONCUBENAME=ioncube_loaders_fre_9_x86-64
				else
					IONCUBENAME=ioncube_loaders_fre_9_x86
				fi
				;;
			10)	if [ ${B64} -eq 1 ]; then
					IONCUBENAME=ioncube_loaders_fre_9_x86-64
				else
					IONCUBENAME=ioncube_loaders_fre_9_x86
				fi
				;;
		esac
	else
		if [ ${B64} -eq 1 ]; then
			IONCUBENAME=ioncube_loaders_lin_x86-64
			ZENDNAME_PHP53=ZendGuardLoader-php-5.3-linux-glibc23-x86_64
			ZENDNAME_PHP53_MD5=ZendGuard64
			ZENDNAME_PHP54=ZendGuardLoader-70429-PHP-5.4-linux-glibc23-x86_64
			ZENDNAME_PHP54_MD5=ZendGuard54_64
		else
			IONCUBENAME=ioncube_loaders_lin_x86
			ZENDNAME_PHP53=ZendGuardLoader-php-5.3-linux-glibc23-i386
			ZENDNAME_PHP53_MD5=ZendGuard32
			ZENDNAME_PHP54=ZendGuardLoader-70429-PHP-5.4-linux-glibc23-i386
			ZENDNAME_PHP54_MD5=ZendGuard54_32
		fi
	fi

	ZENDFILE_GUARD53=${ZENDNAME_PHP53}.tar.gz
	ZENDFILE_GUARD54=${ZENDNAME_PHP54}.tar.gz
	IONCUBEFILE=${IONCUBENAME}.tar.gz

	JPEGFILE=jpegsrc.v6b.tar.gz
	JPEGDIR=jpeg-6b

	WEBALIZER_VER=`getVer webalizer`
	WEBALIZER=webalizer-${WEBALIZER_VER}
	WEBALIZER_FILE=webalizer-${WEBALIZER_VER}-src.tgz
fi

####################################################

ensureVersion() {

	PERL_VER=`perl -v | head -n2 | tail -n1 | cut -d\  -f4 | cut -dv -f2`
	NUM1=`echo $PERL_VER | cut -d. -f1`
	NUM2=`echo $PERL_VER | cut -d. -f2`
	NUM3=`echo $PERL_VER | cut -d. -f3`
	
	if [ $NUM1 -gt 5 ]; then
		return 1;
	fi
	if [ $NUM2 -gt 6 ]; then
		return 1;
	fi
	if [ $NUM3 -gt 0 ]; then
		return 1;
	fi

	echo "Your perl version is $PERL_VER. You require at least perl 5.6.1 for Mail-SpamAssassin-${SPAMASSASSIN_VER}.";
	exit 1;
}

####################################################

downloadMake() {
	cd $CWD

	VER=`getVer ${1}`
	NAME=${1}-${VER}
		
	getFile ${NAME}.tar.gz ${1}
	tar xzf ${NAME}.tar.gz --no-same-owner
	cd ${NAME}
	perl Makefile.PL
	make
	make install

	cd $CWD
}

####################################################

clean_tarball(){
	#clean_tarball name current_version extension
	if [ "$1" = "" ] || [ "$2" = "" ] || [ "$3" = "" ]; then
		echo "Skipping $1 tarball, needs more arguments in doclean_old_tarballs()."
		return;
	fi
	for i in `ls ${WORKDIR} | grep "${1}-[0-9]" | grep -v "$2" | grep "$3"`; do { 
		rm -f ${WORKDIR}/$i; 
		if [ "${CLEAN_OPT}" = "no" ]; then
			echo "Removing ${WORKDIR}/$i..."; 
		fi
	};
	done;
}

doclean_old_tarballs() {
	clean_tarball httpd ${APACHE2_VER} tar.gz;
	if [ "${WEBSERVER_OPT}" = "litespeed" ]; then
		clean_tarball lsws ${LITESPEED_VER} tar.gz;
	fi
	clean_tarball apr ${APR_VER} tar.gz;
	clean_tarball apr-util ${APR_UTIL_VER} tar.gz;
	clean_tarball clamav ${CLAMAV_VER} tar.gz;
	clean_tarball Mail-SpamAssassin ${SPAMASSASSIN_VER} tar.gz;
	clean_tarball curl ${CURL_VER} tar.gz;
	clean_tarball pcre ${PCRE_VER} tar.gz;
	clean_tarball zlib ${ZLIB_VER} tar.gz;
	clean_tarball libpng ${PNG_VER} tar.gz;
	clean_tarball libmcrypt ${MCRYPT_VER} tar.gz;
	clean_tarball mhash ${MHASH_VER} tar.gz;
	clean_tarball freetype ${FREETYPE_VER} tar.gz;
	clean_tarball libiconv ${ICONV_VER} tar.gz;
	clean_tarball libxslt ${LIBXSLT_VER} tar.gz;
	clean_tarball libxml2 ${LIBXML2_VER} tar.gz;
	clean_tarball pigeohole${DOVECOT_SHORTREL} ${PIGEONHOLE_VER} tar.gz;
	clean_tarball icu4c ${ICU_VER}-src tgz;
	clean_tarball webalizer ${WEBALIZER_VER}-src tgz;
	clean_tarball proftpd ${PROFTPD_VER} tar.gz;
	clean_tarball pure-ftpd ${PUREFTPD_VER} tar.gz;
	clean_tarball exim ${EXIM_VER} tar.gz;
	clean_tarball dovecot ${DOVECOT_VER} tar.gz;
	clean_tarball suphp ${SUPHP_VER} tar.gz;
	clean_tarball nginx ${NGINX_VER} tar.gz;
	clean_tarball autoconf ${AUTOCONF_VER} tar.gz;
	clean_tarball automake ${AUTOMAKE_VER} tar.gz;
	clean_tarball m4 ${M4_VER} tar.gz;
	clean_tarball libtool ${LIBTOOL_VER} tar.gz;
	clean_tarball roundcubemail ${ROUNDCUBE_VER} tar.gz;
	clean_tarball squirrelmail ${SQUIRRELMAIL_VER} tar.gz;
	clean_tarball awstats ${AWSTATS_VER} tar.gz;
	clean_tarball phpMyAdmin ${PHPMYADMIN_VER} tar.gz;
	clean_tarball mod_ruid2 ${MOD_RUID2_VER} tar.bz2;
	clean_tarball mod_aclr2 ${MOD_ACLR2_VER} tar.gz;
	clean_tarball mod_htscanner2 ${HTSCANNER_VER} tgz;
	clean_tarball mod_fcgid ${MOD_FCGID_VER} tar.gz;
	clean_tarball pigz ${PIGZ_VER} tar.gz;
	clean_tarball suhosin ${SUHOSIN_VER} tgz;
	clean_tarball zendopcache ${OPCACHE_VER} tgz;
	
	if [ "${CLOUDLINUX_OPT}" = "yes" ]; then
		clean_tarball mod_lsapi ${MOD_LSAPI_VER} tar.gz;
		clean_tarball mod_hostinglimits ${MOD_HOSTINGLIMITS_VER} tar.gz;
		clean_tarball php-litespeed ${PHP_LITESPEED_VER} tgz;
	fi
	
	#PHP bit needs to be different
	for i in `ls ${WORKDIR} | grep '^php-' | grep -v "${PHP53_VER}" | grep -v "${PHP54_VER}" | grep -v "${PHP55_VER}" | grep -v "${PHP56_VER}" | grep tar.gz`; do {
		rm -f ${WORKDIR}/$i; 
		if [ "${CLEAN_OPT}" = "no" ]; then
			echo "Removing ${WORKDIR}/$i..."; 
		fi
	};
	done;
	
	#Clean MySQL/MariaDB tarballs
	if [ "${OS_MARIADB}" = "0" ]; then
		if [ "${MYSQL_INST_OPT}" = "yes" ] || [ "${MYSQL_INST_OPT}" = "mysql" ]; then
			for i in `ls /usr/local/ | grep ^mysql- | grep 'tar.gz$' | grep -v "^mysql-${MYSQL_VER}"`; do { 
				rm -f /usr/local/$i
				if [ "${CLEAN_OPT}" = "no" ]; then
					echo "Removing /usr/local/$i..."; 
				fi
			};
			done;
		fi
	else
		if [ "${MYSQL_INST_OPT}" = "yes" ] || [ "${MYSQL_INST_OPT}" = "mariadb" ]; then
			for i in `ls /usr/local/ | grep ^mariadb- | grep 'tar.gz$' | grep -v "^mariadb-${MARIADB_VER}"`; do { 
				rm -f /usr/local/$i
				if [ "${CLEAN_OPT}" = "no" ]; then
					echo "Removing /usr/local/$i..."; 
				fi
			};
			done;
		fi
	fi
}

####################################################

doclean_old_webapps() {
	if [ "${CLEAN_OLD_WEBAPPS_OPT}" != "yes" ]; then
		echo "You cannot clean webapps, because you do not have it set in options.conf file.";
		exit 1;
	fi
	
	#Clean phpMyAdmin
	if [ "${PHPMYADMIN_OPT}" = "yes" ] && [ -e /var/www/html/phpMyAdmin ]; then
		PHPMYADMIN_CUR=`ls -ld /var/www/html/phpMyAdmin | cut -d\> -f2 | cut -d- -f2,3,4`
		for i in `ls /var/www/html/ | grep phpMyAdmin- | grep -v "${PHPMYADMIN_CUR}"`; do { 
			rm -rf /var/www/html/$i; 
			if [ "${CLEAN_OPT}" = "no" ]; then
				echo "Removing /var/www/html/$i..."; 
			fi
		};
		done;
	fi

	#Clean SquirrelMail
	if [ "${SQUIRRELMAIL_OPT}" = "yes" ] && [ -e /var/www/html/squirrelmail ]; then
		SQUIRRELMAIL_CUR=`ls -ld /var/www/html/squirrelmail | cut -d\> -f2 | cut -d- -f2,3`
		for i in `ls /var/www/html/ | grep squirrelmail- | grep -v -e "${SQUIRRELMAIL_CUR}\$"`; do { 
			rm -rf /var/www/html/$i; 
			if [ "${CLEAN_OPT}" = "no" ]; then
				echo "Removing /var/www/html/$i..."; 
			fi
		};
		done;
	fi

	#Clean RoundCube
	if [ "${ROUNDCUBE_OPT}" = "yes" ] && [ -e /var/www/html/roundcube ]; then
		#ROUNDCUBE_CUR=`ls -ld /var/www/html/roundcube | cut -d\> -f2 | cut -d- -f2`
		ROUNDCUBE_CUR=`roundcube_version`
		for i in `ls /var/www/html/ | grep roundcubemail- | grep -v "${ROUNDCUBE_CUR}"`; do { 
			rm -rf /var/www/html/$i; 
			if [ "${CLEAN_OPT}" = "no" ]; then
				echo "Removing /var/www/html/$i..."; 
			fi
		};
		done;
	fi

	#Clean AWstats
	if [ "${AWSTATS_OPT}" = "yes" ] && [ -e /usr/local/awstats ]; then
		AWSTATS_CUR=`ls -ld /usr/local/awstats | cut -d\> -f2 | cut -d- -f2`
		for i in `ls /usr/local/ | grep awstats- | grep -v "${AWSTATS_CUR}"`; do { 
			rm -rf /usr/local/$i; 
			if [ "${CLEAN_OPT}" = "no" ]; then
				echo "Removing /usr/local/$i..."; 
			fi
		};
		done;
	fi
}

####################################################

doClean() {
	cd ${CWD}
	if [ -e ${LOCKFILE} ]; then
	    return;
	fi
	rm -rf mod_ruid2-${MOD_RUID2_VER};
	rm -rf mod_aclr2-${MOD_ACLR2_VER};
	rm -rf htscanner-${HTSCANNER_VER};
	rm -rf mod_fcgid-${MOD_FCGID_VER};
	rm -rf pigz-${PIGZ_VER};
	rm -rf php-${PHP53_VER};
	rm -rf php-${PHP54_VER};
	rm -rf php-${PHP55_VER};
	rm -rf php-${PHP56_VER};
	if [ "${WEBSERVER_OPT}" = "litespeed" ]; then
		rm -rf lsws-${LITESPEED_VER};
	fi
	if [ "${CLOUDLINUX_OPT}" = "yes" ]; then
		rm -rf mod_lsapi-${MOD_LSAPI_VER};
	fi
	rm -rf curl-${CURL_VER};
	rm -rf nginx-${NGINX_VER};
	rm -rf pcre-${PCRE_VER};
	rm -rf zlib-${ZLIB_VER};
	rm -rf ${JPEGDIR}
	rm -rf libpng-${PNG_VER};
	rm -rf libmcrypt-${MCRYPT_VER};
	rm -rf mhash-${MHASH_VER};
	rm -rf freetype-${FREETYPE_VER};
	rm -rf libiconv-${ICONV_VER};
	rm -rf libxslt-${LIBXSLT_VER};
	rm -rf libxml2-${LIBXML2_VER};
	rm -rf icu4c-${ICU_VER}-src;
	rm -rf icu;
	rm -rf ${ZENDNAME};
	rm -rf ${WEBALIZER};
	rm -rf proftpd-${PROFTPD_VER};
	rm -rf pure-ftpd-${PUREFTPD_VER};
	rm -rf httpd-${APACHE2_VER}
	rm -rf exim-${EXIM_VER};
	rm -rf dovecot-${DOVECOT_VER};
	rm -rf suphp-${SUPHP_VER};
	rm -rf suhosin-${SUHOSIN_VER};
	rm -rf zendopcache-${OPCACHE_VER};
	rm -rf autoconf-${AUTOCONF_VER};
	rm -rf m4-${M4_VER};
	rm -rf dovecot-${DOVECOT_REL}-pigeonhole-${PIGEONHOLE_VER};
	rm -rf automake-${AUTOMAKE_VER};
	rm -rf libtool-${LIBTOOL_VER};
	rm -rf Mail-SpamAssassin-${SPAMASSASSIN_VER};
	rm -rf clamav-${CLAMAV_VER};
# Mailman is not yet supported
#	rm -rf mailman-${MAILMAN_VER};
	
	rm -rf ${ZENDNAME_PHP53};
	rm -rf ${ZENDNAME_PHP54};

	#Clean MySQL/MariaDB
	if [ -h /usr/local/mysql ] && [ "${MYSQL_INST_OPT}" = "yes" ]; then
		MYSQL_CUR=`ls -ld /usr/local/mysql | cut -d\> -f2 | cut -d' ' -f2`
		for i in `ls /usr/local/ | grep ^mysql- | grep -v "${MYSQL_CUR}"`; do { 
			if [ -h /usr/local/${i}/data ]; then
				rm -rf /usr/local/$i
				if [ "${CLEAN_OPT}" = "no" ]; then
					echo "Removing /usr/local/$i..."; 
				fi
			fi
		};
		done;
	fi
	
	if [ "${CLEAN_OLD_TARBALLS_OPT}" = "yes" ]; then
		doclean_old_tarballs;
	fi
	
	if [ "${CLEAN_OLD_WEBAPPS_OPT}" = "yes" ]; then
		doclean_old_webapps;
	fi
	
	if [ "${CLEAN_OPT}" = "no" ]; then
		echo "All clean!";
	fi
}

DOCLEAN_CASE=1;
doclean_toggle(){
	DOCLEAN_CASE=0;
}

####################################################
if [ ! -e ${LOCKFILE} ]; then
	case "$1" in
		update) doclean_toggle ;;
		update_data) doclean_toggle ;;
		"") doclean_toggle ;;
		gen_help_json) doclean_toggle ;;
		opt_help) doclean_toggle ;;
		set) doclean_toggle ;;
		get_versions_txt) doclean_toggle ;;
		update_script) doclean_toggle ;;
		versions_json) doclean_toggle ;;
		versions_ajax) doclean_toggle ;;
		gen_help) doclean_toggle ;;
		gen_help_json) doclean_toggle ;;
		version) doclean_toggle ;;
		versions) doclean_toggle ;;
		set_fastest) doclean_toggle ;;
		set_fastest_quiet) doclean_toggle ;;
		kill) doclean_toggle ;;
		update_da) doclean_toggle ;;
		versions_nobold) doclean_toggle ;;
		list_configs_json) doclean_toggle ;;
		settings_json) doclean_toggle ;;
		get_timezone) doclean_toggle ;;
		custom_config) doclean_toggle ;;
		set_versions_txt) doclean_toggle ;;
		show_component_config) doclean_toggle ;;
		remove_customized_config) doclean_toggle ;;
		show_file) doclean_toggle ;;
		check_options) doclean_toggle ;;
	esac
	if [ "${CLEAN_OPT}" = "yes" ] && [ "${DOCLEAN_CASE}" = "1" ]; then
		doClean;
	fi
fi

####################################################
BUILD_SECTIONS_CASE=1;
build_section_toggle(){
	BUILD_SECTIONS_CASE=0;
}
case "$1" in
	opt_help) build_section_toggle ;;
	set) build_section_toggle ;;
	get_versions_txt) build_section_toggle ;;
	update_script) build_section_toggle ;;
	version) build_section_toggle ;;
	set_fastest) build_section_toggle ;;
	set_fastest_quiet) build_section_toggle ;;
	kill) build_section_toggle ;;
	update_da) build_section_toggle ;;
	list_configs_json) build_section_toggle ;;
	settings_json) build_section_toggle ;;
	get_timezone) build_section_toggle ;;
	custom_config) build_section_toggle ;;
	set_versions_txt) build_section_toggle ;;
	show_component_config) build_section_toggle ;;
	remove_customized_config) build_section_toggle ;;
	show_file) build_section_toggle ;;
	check_options) build_section_toggle ;;
esac

if [ "${BUILD_SECTIONS_CASE}" = "1" ]; then
	HELP_SECTIONS="BUILD_COMP BUILD_COMP_CONF BUILD_COMP_WEBAPPS BUILD_CB BUILD_OLD BUILD_UPDATE BUILD_UPDATE_PCG BUILD_ALL BUILD_EXPERIENCED"

	BUILD_COMP_SET="apache autoconf automake awstats clamav curl dovecot exim freetype iconv icu ioncube suhosin libjpeg libpng libtool libxml2 libxslt litespeed m4 mcrypt mhash mod_lsapi mod_aclr2 mod_ruid2 mod_htscanner2 mod_fcgid mysql nginx nginx_apache pigeonhole pigz pcre php proftpd pureftpd spamassassin suphp webalizer zend zlib"
	BUILD_COMP_DESC="Install/update server components"
	BUILD_COMP_REQADD=""

	BUILD_COMP_CONF_SET="exim_conf php_ini rewrite_confs secure_php"
	BUILD_COMP_CONF_DESC="Components configuration options"
	BUILD_COMP_CONF_REQADD=""

	BUILD_COMP_WEBAPPS_SET="phpmyadmin roundcube squirrelmail"
	BUILD_COMP_WEBAPPS_DESC="Install/update web applications"
	BUILD_COMP_WEBAPPS_REQADD=""

	BUILD_CB_SET="create_options cron opt_help options set set_fastest set_fastest_quiet update_da update_versions update_webapps used_configs versions version"
	BUILD_CB_DESC="CustomBuild related options/functions"
	BUILD_CB_SET_REQADD="opt_help set"
	SET_ADDIT="option_name value"
	OPT_HELP_ADDIT="(full)"

	BUILD_OLD_SET="clean clean_old_webapps"
	BUILD_OLD_DESC="Remove old build data"
	BUILD_OLD_REQUADD=""

	BUILD_UPDATE_SET="update update_script"
	BUILD_UPDATE_DESC="Get latest build script with or without new packages"
	BUILD_UPDATE_REQADD=""

	BUILD_UPDATE_PCG_SET="update_data"
	BUILD_UPDATE_PCG_DESC="Get packages for current build script"
	BUILD_UPDATE_PCG_REQADD=""

	BUILD_ALL_SET="all"
	BUILD_ALL_DESC="Build everything what is set in the options.conf file"
	BUILD_ALL_REQADD=""

	BUILD_EXPERIENCED_SET="php_expert php_htscanner2 todovecot set_service"
	BUILD_EXPERIENCED_DESC="Recommended for experienced users only (!)"
	BUILD_EXPERIENCED_REQADD="php_expert php_htscanner2 set_service"
	PHP_EXPERT_ADDIT="php_release php_mode"
	PHP_HTSCANNER2_ADDIT="php_release"
	SET_SERVICE_ADDIT="service ON|OFF|delete"
fi

###################################################

generateHelp(){
	for section in ${HELP_SECTIONS}; do {
		DESC=${section}_DESC;
		echo " +-----------------------------------------------------------+";
		printf " | %-55s %-2s|\n" "$(eval_var ${DESC}):"
		
		BUILDSET="${section}_SET"
		BUILD_ADD_TO_OUT="${section}_REQADD"
		for setting in $(eval_var ${BUILDSET}); do {
			ADDIT="";
			for i in $(eval_var ${BUILD_ADD_TO_OUT}); do {
				ADDIT_VAR=`echo "${i}_ADDIT" | tr "[a-z]" "[A-Z]"`
				if [ "$i" = "${setting}" ]; then
					ADDIT="$(eval_var ${ADDIT_VAR})"
				fi
			};
			done
			printf " | %-55s %-2s|\n" "   $0 ${setting} ${ADDIT}"
		};
		done;
	};
	done;
}

initJSONVars(){
	####################################################
	#SKIP LISTS for CustomBuild plugin to generate in JSON format accoring to the options set
	HELP_SECTIONS_JSON_SKIP="BUILD_EXPERIENCED"
	
	BUILD_COMP_SKIP=""
	if [ "${WEBSERVER_OPT}" = "apache" ]; then
		BUILD_COMP_SKIP="${BUILD_COMP_SKIP}nginx litespeed nginx_apache mod_aclr2 "
	elif [ "${WEBSERVER_OPT}" = "nginx" ]; then
		BUILD_COMP_SKIP="${BUILD_COMP_SKIP}apache litespeed nginx_apache mod_aclr2 "
	elif [ "${WEBSERVER_OPT}" = "litespeed" ]; then
		BUILD_COMP_SKIP="${BUILD_COMP_SKIP}apache nginx nginx_apache mod_aclr2 "
	fi
	if [ "${AUTOCONF_OPT}" = "no" ]; then
		BUILD_COMP_SKIP="${BUILD_COMP_SKIP}autoconf "
	fi
	if [ "${AUTOMAKE_OPT}" = "no" ]; then
		BUILD_COMP_SKIP="${BUILD_COMP_SKIP}automake "
	fi
	if [ "${LIBTOOL_OPT}" = "no" ]; then
		BUILD_COMP_SKIP="${BUILD_COMP_SKIP}libtool "
	fi
	if [ "${CURL_OPT}" = "no" ]; then
		BUILD_COMP_SKIP="${BUILD_COMP_SKIP}curl "
	fi
	if [ "${CLAMAV_OPT}" = "no" ]; then
		BUILD_COMP_SKIP="${BUILD_COMP_SKIP}clamav "
	fi
	if [ "${AWSTATS_OPT}" = "no" ]; then
		BUILD_COMP_SKIP="${BUILD_COMP_SKIP}awstats "
	fi
	if [ "${WEBALIZER_OPT}" = "no" ]; then
		BUILD_COMP_SKIP="${BUILD_COMP_SKIP}webalizer "
	fi
	if [ "${FTPD_OPT}" = "pureftpd" ]; then
		BUILD_COMP_SKIP="${BUILD_COMP_SKIP}proftpd "
	else
		BUILD_COMP_SKIP="${BUILD_COMP_SKIP}pureftpd "
	fi
	if [ "${MOD_RUID2_OPT}" = "no" ]; then
		BUILD_COMP_SKIP="${BUILD_COMP_SKIP}mod_ruid2 "
	fi
	if [ "${CLOUDLINUX_OPT}" = "no" ] || [ "${WEBSERVER_OPT}" = "nginx" ] || [ "${WEBSERVER_OPT}" = "litespeed" ]; then
		BUILD_COMP_SKIP="${BUILD_COMP_SKIP}mod_lsapi "
	fi
	if [ "${CLOUDLINUX_OPT}" = "no" ] || [ "${WEBSERVER_OPT}" = "nginx" ] || [ "${WEBSERVER_OPT}" = "litespeed" ]; then
		BUILD_COMP_SKIP="${BUILD_COMP_SKIP}mod_hostinglimits "
	fi
	if [ "${HTSCANNER_OPT}" = "no" ]; then
		BUILD_COMP_SKIP="${BUILD_COMP_SKIP}mod_htscanner2 "
	fi
	if [ "${HAVE_FCGID}" = "no" ]; then
		BUILD_COMP_SKIP="${BUILD_COMP_SKIP}mod_fcgid "
	fi
	if [ "${HAVE_SUPHP_CGI}" = "no" ]; then
		BUILD_COMP_SKIP="${BUILD_COMP_SKIP}suphp "
	fi
	if [ "${PIGEONHOLE_OPT}" = "no" ]; then
		BUILD_COMP_SKIP="${BUILD_COMP_SKIP}pigeonhole "
	fi
	if [ "${DOVECOT_OPT}" = "no" ]; then
		BUILD_COMP_SKIP="${BUILD_COMP_SKIP}dovecot "
	fi
	if [ "${MYSQL_INST}" = "no" ]; then
		BUILD_COMP_SKIP="${BUILD_COMP_SKIP}mysql "
	fi
	if [ "${SPAMASSASSIN_OPT}" = "no" ]; then
		BUILD_COMP_SKIP="${BUILD_COMP_SKIP}spamassassin "
	fi
	if [ "${ZEND_OPT}" = "no" ]; then
		BUILD_COMP_SKIP="${BUILD_COMP_SKIP}zend "
	fi
	if [ "${IONCUBE_OPT}" = "no" ]; then
		BUILD_COMP_SKIP="${BUILD_COMP_SKIP}ioncube "
	fi
	if [ "${SUHOSIN_OPT}" = "no" ]; then
		BUILD_COMP_SKIP="${BUILD_COMP_SKIP}suhosin "
	fi
	if [ "${EXIM_OPT}" = "no" ]; then
		BUILD_COMP_SKIP="${BUILD_COMP_SKIP}exim "
	fi
	
	BUILD_COMP_CONF_SKIP=""
	if [ "${PHP_INI_OPT}" = "no" ]; then
		BUILD_COMP_CONF_SKIP="${BUILD_COMP_CONF_SKIP}php_ini "
	fi
	if [ "${EXIMCONF_OPT}" = "no" ]; then
		BUILD_COMP_CONF_SKIP="${BUILD_COMP_CONF_SKIP}eximconf "
	fi
	
	BUILD_CB_SKIP="create_options opt_help set set_fastest_quiet update_versions versions"
	
	BUILD_COMP_WEBAPPS_SKIP=""
	if [ "${PHPMYADMIN_OPT}" = "no" ]; then
		BUILD_COMP_WEBAPPS_SKIP="${BUILD_COMP_WEBAPPS_SKIP}phpmyadmin "
	fi
	if [ "${ROUNDCUBE_OPT}" = "no" ]; then
		BUILD_COMP_WEBAPPS_SKIP="${BUILD_COMP_WEBAPPS_SKIP}roundcube "
	fi
	if [ "${SQUIRRELMAIL_OPT}" = "no" ]; then
		BUILD_COMP_WEBAPPS_SKIP="${BUILD_COMP_WEBAPPS_SKIP}squirremail "
	fi
	
	BUILD_OLD_SKIP=""
	BUILD_UPDATE_SKIP=""
	BUILD_UPDATE_PCG_SKIP=""
	
	#DESCRIPTIONS
	COMP_APACHE_NAME="Build Apache"
	COMP_APACHE_DESC="Install/update Apache WEB server."
	COMP_APACHE_VER="Version ${APACHE2_VER}."

	COMP_AUTOCONF_NAME="Build autoconf"
	COMP_AUTOCONF_DESC="Install/update autoconf."
	COMP_AUTOCONF_VER="Version ${AUTOCONF_VER}."

	COMP_AUTOMAKE_NAME="Build automake"
	COMP_AUTOMAKE_DESC="Install/update automake."
	COMP_AUTOMAKE_VER="Version ${AUTOMAKE_VER}."

	COMP_AWSTATS_NAME="Build awstats"
	COMP_AWSTATS_DESC="Install/update AWstats."
	COMP_AWSTATS_VER="Version ${AWSTATS_VER}."

	COMP_CLAMAV_NAME="Build ClamAV"
	COMP_CLAMAV_DESC="Install/update ClamAV antivirus engine."
	COMP_CLAMAV_VER="Version ${CLAMAV_VER}."

	COMP_CURL_NAME="Build cURL"
	COMP_CURL_DESC="Install/update cURL."
	COMP_CURL_VER="Version ${CURL_VER}."

	COMP_DOVECOT_NAME="Build Dovecot"
	COMP_DOVECOT_DESC="Install/update Dovecot IMAP/POP3 server."
	COMP_DOVECOT_VER="Version ${DOVECOT_VER}."

	COMP_EXIM_NAME="Build Exim"
	COMP_EXIM_DESC="Install/update Exim Mail Transfer Agent."
	COMP_EXIM_VER="Version ${EXIM_VER}."

	COMP_FREETYPE_NAME="Build Freetype"
	COMP_FREETYPE_DESC="Install/update Freetype."
	COMP_FREETYPE_VER="Version ${FREETYPE_VER}."

	COMP_ICONV_NAME="Build iconv"
	COMP_ICONV_DESC="Install/update iconv."
	COMP_ICONV_VER="Version ${ICONV_VER}."

	COMP_ICU_NAME="Build ICU"
	COMP_ICU_DESC="Install/update ICU."
	COMP_ICU_VER="Version ${ICU_VER}."

	COMP_IONCUBE_NAME="Build ionCube"
	COMP_IONCUBE_DESC="Install/update ionCube."
	COMP_IONCUBE_VER="Version ${IONCUBE_VER}."
	
	COMP_SUHOSIN_NAME="Build suhosin"
	COMP_SUHOSIN_DESC="Install/update suhosin."
	COMP_SUHOSIN_VER="Version ${SUHOSIN_VER}."

	COMP_LIBJPEG_NAME="Build libjpeg"
	COMP_LIBJPEG_DESC="Install/update libjpeg."
	COMP_LIBJPEG_VER=""

	COMP_LIBPNG_NAME="Build libpng"
	COMP_LIBPNG_DESC="Install/update libpng."
	COMP_LIBPNG_VER="Version ${PNG_VER}."

	COMP_LIBTOOL_NAME="Build libtool"
	COMP_LIBTOOL_DESC="Install/update libtool."
	COMP_LIBTOOL_VER="Version ${LIBTOOL_VER}."

	COMP_LIBXML2_NAME="Build libxml2"
	COMP_LIBXML2_DESC="Install/update libxml2."
	COMP_LIBXML2_VER="Version ${LIBXML2_VER}."

	COMP_LIBXSLT_NAME="Build libxslt"
	COMP_LIBXSLT_DESC="Install/update libxslt."
	COMP_LIBXSLT_VER="Version ${LIBXSLT_VER}."

	COMP_M4_NAME="Build m4"
	COMP_M4_DESC="Install/update m4."
	COMP_M4_VER="Version ${M4_VER}."

	COMP_MCRYPT_NAME="Build mcrypt"
	COMP_MCRYPT_DESC="Install/update mcrypt."
	COMP_MCRYPT_VER="Version ${MCRYPT_VER}."

	COMP_MHASH_NAME="Build mhash"
	COMP_MHASH_DESC="Install/update mhash."
	COMP_MHASH_VER="Version ${MHASH_VER}."

	if [ "${CLOUDLINUX_OPT}" = "yes" ]; then
		COMP_MOD_LSAPI_NAME="Build mod_lsapi"
		COMP_MOD_LSAPI_DESC="Install/update mod_lsapi."
		COMP_MOD_LSAPI_VER="Version ${MOD_LSAPI_VER}."
		
		COMP_MOD_HOSTINGLIMITS_NAME="Build mod_hostinglimits"
		COMP_MOD_HOSTINGLIMITS_DESC="Install/update mod_hostinglimits."
		COMP_MOD_HOSTINGLIMITS_VER="Version ${MOD_HOSTINGLIMITS_VER}."
	fi
	
	COMP_MOD_ACLR2_NAME="Build mod_aclr2"
	COMP_MOD_ACLR2_DESC="Install/update mod_aclr2."
	COMP_MOD_ACLR2_VER="Version ${MOD_ACLR2_VER}."

	COMP_MOD_RUID2_NAME="Build mod_ruid2"
	COMP_MOD_RUID2_DESC="Install/update mod_ruid2."
	COMP_MOD_RUID2_VER="Version ${MOD_RUID2_VER}."
	
	COMP_PIGZ_NAME="Build pigz"
	COMP_PIGZ_DESC="Install/update pigz."
	COMP_PIGZ_VER="Version ${PIGZ_VER}."

	COMP_MOD_HTSCANNER2_NAME="Build mod_htscanner2"
	COMP_MOD_HTSCANNER2_DESC="Install/update mod_htscanner2."
	COMP_MOD_HTSCANNER2_VER="Version ${HTSCANNER_VER}."

	COMP_MOD_FCGID_NAME="Build mod_fcgid"
	COMP_MOD_FCGID_DESC="Install/update mod_fcgid."
	COMP_MOD_FCGID_VER="Version ${MOD_FCGID_VER}."

	COMP_MYSQL_NAME="Build ${MYSQLNAME}"
	COMP_MYSQL_DESC="Install/update ${MYSQLNAME}."
	if [ "${OS_MARIADB}" = "0" ]; then
		COMP_MYSQL_VER="Version ${MYSQL_VER}."
	else
		COMP_MYSQL_VER="Version ${MARIADB_VER}."
	fi

	COMP_NGINX_NAME="Build nginx"
	COMP_NGINX_DESC="Install/update nginx WEB server."
	COMP_NGINX_VER="Version ${NGINX_VER}."
	
	COMP_LITESPEED_NAME="Build litespeed"
	COMP_LITESPEED_DESC="Install/update LiteSpeed WEB server."
	COMP_LITESPEED_VER="Version ${LITESPEED_VER}."

	COMP_NGINX_APACHE_NAME="Build nginx+Apache"
	COMP_NGINX_APACHE_DESC="Install/update Apache and nginx (nginx as a reverse proxy for Apache)."
	COMP_NGINX_APACHE_VER="Apache ${APACHE2_VER} and nginx ${NGINX_VER}."

	COMP_PIGEONHOLE_NAME="Build Pigeonhole"
	COMP_PIGEONHOLE_DESC="Install/update Pigeonhole used in Dovecot to provide Sieve email filtering and ManageSieve protocol."
	COMP_PIGEONHOLE_VER="Version ${PIGEONHOLE_VER}."

	COMP_PCRE_NAME="Build PCRE"
	COMP_PCRE_DESC="Install/update PCRE."
	COMP_PCRE_VER="Version ${PCRE_VER}."

	COMP_PHP_NAME="Build PHP"
	COMP_PHP_DESC="Install/update PHP."
	if [ "${PHP2_RELEASE_OPT}" = "no" ]; then
		COMP_PHP_VER="Version ${PHP1_RELEASE_OPT} as ${PHP1_MODE_OPT}."
	else
		COMP_PHP_VER="Version ${PHP1_RELEASE_OPT} as ${PHP1_MODE_OPT} (default) and ${PHP2_RELEASE_OPT} as ${PHP2_MODE_OPT} (additional)."
	fi
	
	COMP_PROFTPD_NAME="Build ProFTPd"
	COMP_PROFTPD_DESC="Install/update ProFTPD FTP server."
	COMP_PROFTPD_VER="Version ${PROFTPD_VER}."

	COMP_PUREFTPD_NAME="Build Pure-FTPd"
	COMP_PUREFTPD_DESC="Install/update Pure-FTPd FTP server."
	COMP_PUREFTPD_VER="Version ${PUREFTPD_VER}."

	COMP_SPAMASSASSIN_NAME="Build SpamAssassin"
	COMP_SPAMASSASSIN_DESC="Install/update SpamAssassin."
	COMP_SPAMASSASSIN_VER="Version ${SPAMASSASSIN_VER}."

	COMP_SUPHP_NAME="Build suPHP"
	COMP_SUPHP_DESC="Install/update suPHP."
	COMP_SUPHP_VER="Version ${SUPHP_VER}."

	COMP_WEBALIZER_NAME="Build Webalizer"
	COMP_WEBALIZER_DESC="Install/update Webalizer."
	COMP_WEBALIZER_VER="Version ${WEBALIZER_VER}."

	COMP_ZEND_NAME="Build Zend Guard loader"
	COMP_ZEND_DESC="Install/update Zend Guard loader."
	COMP_ZEND_VER=""

	COMP_ZLIB_NAME="Build zlib"
	COMP_ZLIB_DESC="Install/update zlib."
	COMP_ZLIB_VER="Version ${ZLIB_VER}."

	COMP_EXIM_CONF_NAME="Update Exim configuration files"
	COMP_EXIM_CONF_DESC="Updates Exim configuration files (exim.conf and exim.pl). WARNING: Any customizations done will be lost."

	COMP_PHP_INI_NAME="Update PHP configuration files"
	COMP_PHP_INI_DESC="Updates php.ini configuration files used by PHP. WARNING: Any customizations done will be lost."

	COMP_REWRITE_CONFS_NAME="Rewrite WEB server configuration files"
	COMP_REWRITE_CONFS_DESC="Rewrites Apache/Nginx WEB server configuration files (useful when configuration got corrupted or needs to be updated). WARNING: customizations must be present in 'custom/' folder, otherwise they will be lost."

	COMP_SECURE_PHP_NAME="Secure PHP"
	COMP_SECURE_PHP_DESC="Disables dangerous PHP functions in php.ini file."

	COMP_PHPMYADMIN_NAME="Build phpMyAdmin"
	COMP_PHPMYADMIN_DESC="Install/update phpMyAdmin WEB MySQL administration tool."
	COMP_PHPMYADMIN_VER="Version ${PHPMYADMIN_VER}."

	COMP_ROUNDCUBE_NAME="Build RoundCube"
	COMP_ROUNDCUBE_DESC="Install/update RoundCube webmail."
	COMP_ROUNDCUBE_VER="Version ${ROUNDCUBE_VER}."

	COMP_SQUIRRELMAIL_NAME="Build SquirrelMail"
	COMP_SQUIRRELMAIL_DESC="Install/update SquirrelMail webmail."
	COMP_SQUIRRELMAIL_VER="Version ${SQUIRRELMAIL_VER}."

	COMP_CREATE_OPTIONS_NAME="Regenerate options.conf file"
	COMP_CREATE_OPTIONS_DESC="Re-create options.conf file by asking questions."

	COMP_CRON_NAME="Enable/update CustomBuild cronjob"
	COMP_CRON_DESC="Enables or updates cronjob used by CustomBuild to send notifications to specified email address about the updates, auto-update components."

	COMP_OPT_HELP_NAME="Options.conf help"
	COMP_OPT_HELP_DESC="Generates available options that could be used in the options.conf file."

	COMP_OPTIONS_NAME="Display options.conf settings"
	COMP_OPTIONS_DESC="Shows current options set in the options.conf file"

	COMP_SET_NAME="Change options.conf setting"
	COMP_SET_DESC="Changes value in the options.conf file"

	COMP_SET_FASTEST_NAME="Set fastest download server"
	COMP_SET_FASTEST_DESC="Selects the fastest download server to use and sets it in the options.conf file."

	COMP_SET_FASTEST_QUIET_NAME="Set fastest download server (no output)"
	COMP_SET_FASTEST_QUIET_DESC="Selects the fastest download server to use and sets it in the options.conf file. Command generates no output."

	COMP_UPDATE_DA_NAME="Update DirectAdmin"
	COMP_UPDATE_DA_DESC="Updates DirectAdmin to the latest version."

	COMP_UPDATE_VERSIONS_NAME="Update all components"
	COMP_UPDATE_VERSIONS_DESC="Checks what updates are available and applies them."

	COMP_UPDATE_WEBAPPS_NAME="Update WEB applications."
	COMP_UPDATE_WEBAPPS_DESC="Updates WEB applications if updates are available (only phpMyAdmin, RoundCube and SquirrelMail)."

	COMP_USED_CONFIGS_NAME="Used configuration files"
	COMP_USED_CONFIGS_DESC="Displays full paths to component configuration (./configure) files used by CustomBuild."

	COMP_VERSIONS_NAME="Updates availale"
	COMP_VERSIONS_DESC="Shows what updates are available to be applied on the system. Does not update them automatically."

	COMP_VERSION_NAME="CustomBuild version"
	COMP_VERSION_DESC="Shows CustomBuild version."

	COMP_ALL_NAME="Build everything"
	COMP_ALL_DESC="(Re)installs all components set in the options.conf file"

	COMP_CLEAN_NAME="Clean old directories"
	COMP_CLEAN_DESC="Removes not needed folders from CustomBuild directory."

	COMP_CLEAN_OLD_WEBAPPS_NAME="Clean old WEB applications"
	COMP_CLEAN_OLD_WEBAPPS_DESC="Removes old WEB applications that are not currently used from /var/www/html directory."

	COMP_UPDATE_NAME="Update CustomBuild script and packages"
	COMP_UPDATE_DESC="Updates CustomBuild script, grabs latest versions.txt file and packages."

	COMP_UPDATE_SCRIPT_NAME="Update CustomBuild script"
	COMP_UPDATE_SCRIPT_DESC="Updates CustomBuild script only (the 'build' file)."

	COMP_UPDATE_DATA_NAME="Download packages"
	COMP_UPDATE_DATA_DESC="Downloads packages needed for the CustomBuild script (does not include versions.txt file or the 'build' file)."

	COMP_PHP_EXPERT_NAME="Install specified PHP version"
	COMP_PHP_EXPERT_DESC="Installs specified PHP version, but does not apply any automatic configuration to it."

	COMP_PHP_HTSCANNER2_NAME="Build php_htscanner2"
	COMP_PHP_HTSCANNER2_DESC="Install/update php_htscanner2 component used by Apache and PHP."

	COMP_TODOVECOT_NAME="Convert mbox to Maildir"
	COMP_TODOVECOT_DESC="Converts all emails from mbox format to Maildir. todovecot() function is called."

	COMP_SET_SERVICE_NAME="Service autostart"
	COMP_SET_SERVICE_DESC="Calls set_setvice function with specified ON|OFF|delete values."
}

generateHelpJSON(){
	initJSONVars;
	echo "{";
	if [ "${1}" != "" ]; then
		NUM_OF_SECTIONS=1;
		HELP_SECTIONS=`echo ${1} | tr "[a-z]" "[A-Z]"`
	else
		NUM_OF_SECTIONS=`echo ${HELP_SECTIONS} | wc -w`;
	fi
	CUR_SECTION=0;
	for section in ${HELP_SECTIONS}; do {
		CUR_SECTION=`expr ${CUR_SECTION} + 1`;
		LOWERCASE_SECTION=`echo $section | tr "[A-Z]" "[a-z]"`
		SECTION_DESC=${section}_DESC;
		SECTION_SET=${section}_SET;
		NUM_OF_SETTINGS=`echo "$(eval_var ${SECTION_SET})" | wc -w`;
		CUR_SETTING=0;
		SKIP_CAT="no";
		for skip_cat_opt in ${HELP_SECTIONS_JSON_SKIP}; do {
			if [ "${section}" = "${skip_cat_opt}" ]; then
				SKIP_CAT="yes";
				break;
			fi
		};
		done;
		printf "\t\"${LOWERCASE_SECTION}\": {\n"
		printf "\t\t\"description\": \"$(eval_var ${SECTION_DESC})\",\n"
		printf "\t\t\"skip\": \"${SKIP_CAT}\",\n"
		for setting in $(eval_var ${SECTION_SET}); do {
			CUR_SETTING=`expr ${CUR_SETTING} + 1`;
			SETTING_UP=`echo $setting | tr "[a-z]" "[A-Z]"`;
			
			BUILD_NAME="COMP_${SETTING_UP}_NAME"
			DESCRIPTION="COMP_${SETTING_UP}_DESC"
			VER_VAR="COMP_${SETTING_UP}_VER"
			SKIP_VAR="${section}_SKIP"
			SKIP="no"
			
			for skip_opt in $(eval_var ${SKIP_VAR}); do {
				if [ "${setting}" = "${skip_opt}" ]; then
					SKIP="yes";
					break;
				fi
			};
			done;
			
			printf "\t\t\"${setting}\": {\n"
				printf "\t\t\t\"build\": \"${setting}\",\n"
				VERSION_STRING="$(eval_var ${VER_VAR})"
			if [ "${section}" = "BUILD_COMP" ] || [ "${section}" = "BUILD_COMP_WEBAPPS" ]; then
				if [ "${VERSION_STRING}" = "Version 0." ]; then
					SKIP="yes"
				fi
			fi
				printf "\t\t\t\"skip\": \"${SKIP}\",\n"
				printf "\t\t\t\"name\": \"$(eval_var ${BUILD_NAME})\",\n"
			if [ "${section}" = "BUILD_COMP" ] || [ "${section}" = "BUILD_COMP_WEBAPPS" ]; then
				if [ "${VERSION_STRING}" != "Version ." ]; then
					printf "\t\t\t\"version\": \"$(eval_var ${VER_VAR})\"\n",
				fi
			fi
				printf "\t\t\t\"description\": \"$(eval_var ${DESCRIPTION})\"\n"
			if [ ${CUR_SETTING} -ne ${NUM_OF_SETTINGS} ]; then
				printf "\t\t},\n"
			else
				printf "\t\t}\n"
			fi
		};
		done;
		if [ ${CUR_SECTION} -ne ${NUM_OF_SECTIONS} ]; then
			printf "\t},\n"
		else
			printf "\t}\n"
		fi
	};
	done;
	echo "}";
}

###################################################

showHelp() {
	echo " +-----------------------------------------------------------+";
	echo " |                                                           |";
	echo " |            DirectAdmin WebServices Installer              |";
	echo " |     Written by Martynas Bendorius and DirectAdmin         |";
	printf " | %-55s %-2s|\n" "              Version: $(showVersion)";
	echo " |                                                           |";
	echo " +-----------------------------------------------------------+";
	echo " |  To build everything run:                                 |";
	echo " |     $0 all                                           |";
	echo " |                                                           |";
	echo " | ${boldon}NOTE${boldoff}: Command all will compile everything as it is set    |";
	echo " |      in the options.conf file, please take a look at      |";
	echo " |      \"${boldon}$0 options${boldoff}\"!                                   |";
	generateHelp;
	echo " +-----------------------------------------------------------+"
	echo " |  You can pass a 2nd argument to automate the input:       |";
	echo " |     $0 <option> d : do the default action            |";
	echo " |     $0 <option> y : answer yes to all questions      |";
	echo " |     $0 <option> n : answer no to all questions       |";
	echo " +-----------------------------------------------------------+";
}

checkFile() {
	if [ ! -s $1 ]
	then
		echo "*** Cannot find $1. Aborting ***";
		do_exit 0;
	else
		echo "Found $1";
	fi
}

quitIfLocked(){
	if [ -e ${LOCKFILE} ]; then
		PID="`cat ${LOCKFILE}`"
		echo "Another instance of custombuild is running (lockfile: ${LOCKFILE}, PID ${PID})."
		if [ "$1" != "" ]; then
			echo "Executing: $1";
		fi
		exit 1
	else
		trap "rm -f ${LOCKFILE}; kill_childs; exit" INT TERM EXIT
		echo $$ > ${LOCKFILE}
	fi
}

####################################################

get_webmail_link()
{
	WL=roundcube
	if [ "$ROUNDCUBE_OPT" = "no" ]; then
		WL=squirrelmail
	fi
	if [ -s ${DACONF_FILE} ] && [ -s /usr/local/directadmin/directadmin ]; then
		WL=`/usr/local/directadmin/directadmin c | grep -m1 '^webmail_link' | cut -d= -f2`
	fi
	
	echo "${WL}"
}

####################################################

# Not needed anymore in apache >=2.4.9
# add_proxymatch_webapps_alias()
# {
#         MODE=$1
#         FILE=$2
#         ALIAS=$3
#         ALIAS_PATH=${ALIAS}
#         
#         if [ "$4" != "" ]; then
#                 ALIAS_PATH=$4
#         fi
#         
#         DOTPHP=
#         SHORT=${PHP1_SHORTRELEASE}
#         if [ "${MODE}" -eq 2 ]; then
#                 SHORT=${PHP2_SHORTRELEASE}
#                 DOTPHP=${SHORT}
#         fi
#        
# 	REALPATH="`echo ${ALIAS_PATH} | perl -p0 -e 's#/$##'`"
# 	if [ -e ${REALPATH} ]; then
# 		if [ "${ALIAS}" != "webmail" ] && [ ! -e /var/www/html/${ALIAS} ]; then
# 			ln -s ${REALPATH} /var/www/html/${ALIAS}
# 			${CHOWN} -h webapps:webapps /var/www/html/${ALIAS}
# 		fi
# 	fi
# 	if [ "${ALIAS}" = "webmail" ]; then
# 		WEBMAILLINK=`get_webmail_link`
# 		if [ -e /var/www/html/${WEBMAILLINK} ]; then
# 			if [ -h /var/www/html/webmail ] || [ ! -e /var/www/html/webmail ]; then
# 				rm -f /var/www/html/webmail >/dev/null 2>&1
# 				ln -s /var/www/html/${WEBMAILLINK} /var/www/html/webmail
# 				${CHOWN} -h webapps:webapps /var/www/html/webmail
# 			fi
# 		fi
# 	fi
# 	if [ `echo "${ALIAS_PATH}" | grep -c '/$'` -eq 1 ]; then
# 		ALIAS="${ALIAS}/(.*\.php${DOTPHP}(/.*)?)"
# #Might be needed in the future
# #	else
# #		ALIAS_PATH=`dirname ${ALIAS}`
# 	fi
# 	ALIAS_PATH=/var/www/html
# 	echo "ProxyPassMatch ^/${ALIAS}\$ unix:/usr/local/php${PHP1_SHORTRELEASE}/sockets/webapps.sock|fcgi://localhost${ALIAS_PATH}" >> ${FILE}
# }

doApacheHostConf(){
	HOSTCONF=${HTTPDCONF}/extra/httpd-hostname.conf
	if [ -e ${WORKDIR}/custom/ap2/conf/extra/httpd-hostname.conf ]; then
		cp -pf ${WORKDIR}/custom/ap2/conf/extra/httpd-hostname.conf ${HOSTCONF}
	else
		echo -n '' > ${HOSTCONF}
		
		# Not needed anymore in apache >=2.4.9
		#ALIASFILE=${WORKDIR}/configure/ap2/conf/extra/httpd-alias.conf
		#if [ -e ${WORKDIR}/custom/ap2/conf/extra/httpd-alias.conf ]; then
		#	ALIASFILE=${WORKDIR}/custom/ap2/conf/extra/httpd-alias.conf
		#fi
		
		
		if [ "${HAVE_FPM_CGI}" = "yes" ]; then
			echo 'SetEnvIfNoCase ^Authorization$ "(.+)" HTTP_AUTHORIZATION=$1' >> ${HOSTCONF}
		fi
		
		echo '<Directory /var/www/html>' >> ${HOSTCONF}
		
		if [ "${PHP1_MODE_OPT}" = "php-fpm" ]; then
			echo '<FilesMatch "\.(inc|php|php3|php4|php44|php5|php52|php53|php54|php55|php56|php6|phtml|phps)$">' >> ${HOSTCONF}
			echo "AddHandler \"proxy:unix:/usr/local/php${PHP1_SHORTRELEASE}/sockets/webapps.sock|fcgi://localhost\" .inc .php .php5 .php${PHP1_SHORTRELEASE} .phtml" >> ${HOSTCONF}
			echo '</FilesMatch>' >> ${HOSTCONF}
		fi
		if [ "${PHP2_MODE_OPT}" = "php-fpm" ] && [ "${PHP2_RELEASE_OPT}" != "no" ]; then
			echo "<FilesMatch \"\.php${PHP2_SHORTRELEASE}\$\">" >> ${HOSTCONF}
			echo "AddHandler \"proxy:unix:/usr/local/php${PHP2_SHORTRELEASE}/sockets/webapps.sock|fcgi://localhost\" .php${PHP2_SHORTRELEASE}" >> ${HOSTCONF} 
			echo '</FilesMatch>' >> ${HOSTCONF}
		fi
		
		echo '	Options +SymLinksIfOwnerMatch +IncludesNoExec' >> ${HOSTCONF}
		echo '	AllowOverride AuthConfig FileInfo Indexes Limit Options=Includes,IncludesNOEXEC,Indexes,ExecCGI,MultiViews,SymLinksIfOwnerMatch,None' >> ${HOSTCONF}
		echo '' >> ${HOSTCONF}
		echo '	Order allow,deny' >> ${HOSTCONF}
		echo '	Allow from all' >> ${HOSTCONF}
		echo '	<IfModule mod_suphp.c>' >> ${HOSTCONF}
		echo '		suPHP_Engine On' >> ${HOSTCONF}
		echo '		suPHP_UserGroup webapps webapps' >> ${HOSTCONF}
		echo '	</IfModule>' >> ${HOSTCONF}
		echo '	<IfModule mod_ruid2.c>' >> ${HOSTCONF}
		echo '		RUidGid webapps webapps' >> ${HOSTCONF}
		echo '	</IfModule>' >> ${HOSTCONF}
		echo '	<IfModule mod_lsapi.c>' >> ${HOSTCONF}
		echo '		lsapi_user_group webapps webapps' >> ${HOSTCONF}
		echo '	</IfModule>' >> ${HOSTCONF}
		
		WEBAPPS_FCGID_DIR=/var/www/fcgid
		SUEXEC_PER_DIR="0"
		if [ -s /usr/sbin/suexec ]; then
			SUEXEC_PER_DIR="`/usr/sbin/suexec -V 2>&1 | grep -c 'AP_PER_DIR'`"
		fi
		if [ "${PHP1_MODE_OPT}" = "fastcgi" ]; then
			echo '	<IfModule mod_fcgid.c>' >> ${HOSTCONF}
			echo "	        FcgidWrapper /usr/local/safe-bin/fcgid${PHP1_SHORTRELEASE}.sh .php" >> ${HOSTCONF}
			if [ "${SUEXEC_PER_DIR}" -gt 0 ]; then
				echo '          SuexecUserGroup webapps webapps' >> ${HOSTCONF}
			fi
			echo '	        <FilesMatch "\.(inc|php|php3|php4|php44|php5|php52|php53|php54|php55|php56|php6|phtml|phps)$">' >> ${HOSTCONF}
			echo '	                Options +ExecCGI' >> ${HOSTCONF}
			echo '	                AddHandler fcgid-script .php' >> ${HOSTCONF}
			echo '	        </FilesMatch>' >> ${HOSTCONF}
			echo '	</IfModule>' >> ${HOSTCONF}		
		fi
		if [ "${PHP2_MODE_OPT}" = "fastcgi" ] && [ "${PHP2_RELEASE_OPT}" != "no" ]; then	
			echo '	<IfModule mod_fcgid.c>' >> ${HOSTCONF}
			echo "	        FcgidWrapper /usr/local/safe-bin/fcgid${PHP2_SHORTRELEASE}.sh .php${PHP2_SHORTRELEASE}" >> ${HOSTCONF}
			if [ "${SUEXEC_PER_DIR}" -gt 0 ]; then
			echo '	        SuexecUserGroup webapps webapps' >> ${HOSTCONF}
			fi
			echo "         <FilesMatch \"\.php${PHP2_SHORTRELEASE}\$\">" >> ${HOSTCONF}
			echo '	                Options +ExecCGI' >> ${HOSTCONF}
			echo "	                AddHandler fcgid-script .php${PHP2_SHORTRELEASE}" >> ${HOSTCONF}
			echo '	        </FilesMatch>' >> ${HOSTCONF}
			echo '	</IfModule>' >> ${HOSTCONF}
		fi

		echo '</Directory>' >> ${HOSTCONF}
	fi
}

options(){
	if [ "${WEBSERVER_OPT}" = "apache" ] || [ "${WEBSERVER_OPT}" = "nginx_apache" ]; then
		echo "Apache: ${boldon}${APACHE2_VER}${boldoff}"
	elif [ "${WEBSERVER_OPT}" = "nginx" ]; then
		echo "Nginx: ${boldon}${NGINX_VER}${boldoff}"
	fi
	if [ "${WEBSERVER_OPT}" = "nginx_apache" ]; then
		echo "Nginx (reverse proxy): ${boldon}${NGINX_VER}${boldoff}"
	fi
	
	if [ "${WEBSERVER_OPT}" = "litespeed" ]; then
		echo "Litespeed: ${boldon}${LITESPEED_VER}${boldoff}"
	fi
	
	if [ "${CLOUDLINUX_OPT}" = "yes" ]; then
		if [ "${WEBSERVER_OPT}" = "apache" ] || [ "${WEBSERVER_OPT}" = "nginx_apache" ]; then
			echo "mod_lsapi: ${boldon}${MOD_LSAPI_VER}${boldoff}"
			echo "mod_hostinglimits: ${boldon}${MOD_HOSTINGLIMITS_VER}${boldoff}"
		fi
	fi
	
	if [ "${WEBSERVER_OPT}" = "apache" ] || [ "${WEBSERVER_OPT}" = "nginx_apache" ]; then
		if [ "${MOD_RUID2_OPT}" = "yes" ]; then
			echo "mod_ruid2: ${boldon}${MOD_RUID2_VER}${boldoff}"
		else
			echo "mod_ruid2: ${boldon}no${boldoff}"
		fi
	fi
	
	if [ "${HAVE_CLI}" = "no" ] && [ "${PHP1_MODE_OPT}" != "lsphp" ]; then
		if [ "${HTSCANNER_OPT}" = "yes" ]; then
			echo "htscanner: ${boldon}${HTSCANNER_VER}${boldoff}"
		else
			echo "htscanner: ${boldon}no${boldoff}"
		fi
	fi
	
	if [ "${DOVECOT_OPT}" = "yes" ]; then
		echo "Dovecot: ${boldon}${DOVECOT_VER}${boldoff}"
	else
		echo "Dovecot: ${boldon}no${boldoff}"
	fi

	if [ "${AWSTATS_OPT}" = "yes" ]; then
		echo "AWstats: ${boldon}${AWSTATS_VER}${boldoff}"
	else
		echo "AWstats: ${boldon}no${boldoff}"
	fi
	
	if [ "${EXIM_OPT}" = "yes" ]; then
		echo "Exim: ${boldon}${EXIM_VER}${boldoff}"
	else
		echo "Exim: ${boldon}no${boldoff}"
	fi

	echo "exim.conf update: ${boldon}${EXIMCONF_OPT}${boldoff}"

	if [ "${SPAMASSASSIN_OPT}" = "yes" ]; then
		echo "SpamAssassin: ${boldon}${SPAMASSASSIN_VER}${boldoff}"
	else
		echo "SpamAssassin: ${boldon}no${boldoff}"
	fi
	
	if [ "${CLAMAV_OPT}" = "yes" ]; then
		echo "ClamAV: ${boldon}${CLAMAV_VER}${boldoff}"
	else
		echo "ClamAV: ${boldon}no${boldoff}"
	fi
	
	if [ "${MYSQL_INST_OPT}" != "no" ]; then
		if [ "${OS_MARIADB}" = "0" ]; then
			echo "${MYSQLNAME}: ${boldon}${MYSQL_VER}${boldoff}"
		else
			echo "${MYSQLNAME}: ${boldon}${MARIADB_VER}${boldoff}"
		fi
	else
		echo "${MYSQLNAME}: ${boldon}no${boldoff}"
	fi

	echo "MySQL backup: ${boldon}${MYSQL_BACKUP_OPT}${boldoff}"
	
	if [ "${MYSQL_BACKUP_OPT}" = "yes" ]; then
		echo "MySQL backup directory: ${boldon}${MYSQL_BACKUP_DIR_OPT}${boldoff}"
	fi

	echo "PHP (default): ${boldon}${PHP1_RELEASE_OPT}${boldoff} as ${boldon}${PHP1_MODE_OPT}${boldoff}"
	if [ "${PHP2_RELEASE_OPT}" != "no" ]; then
		echo "PHP (additional): ${boldon}${PHP2_RELEASE_OPT}${boldoff} as ${boldon}${PHP2_MODE_OPT}${boldoff}"
	fi

	if [ "${PHPMYADMIN_OPT}" = "yes" ]; then
		echo "phpMyAdmin: ${boldon}${PHPMYADMIN_VER}${boldoff}"
	else
		echo "phpMyAdmin: ${boldon}no${boldoff}"
	fi

	if [ "${FTPD_OPT}" = "proftpd" ]; then
		echo "ProFTPD: ${boldon}${PROFTPD_VER}${boldoff}"
	else
		echo "ProFTPD: ${boldon}no${boldoff}"
	fi

	if [ "${FTPD_OPT}" = "pureftpd" ]; then
		echo "Pure-FTPd: ${boldon}${PUREFTPD_VER}${boldoff}"
	else
		echo "Pure-FTPd: ${boldon}no${boldoff}"
	fi
	
	if [ "${ROUNDCUBE_OPT}" = "yes" ]; then
		echo "RoundCube webmail: ${boldon}${ROUNDCUBE_VER}${boldoff}"
	else
		echo "RoundCube webmail: ${boldon}no${boldoff}"
	fi
	
	if [ "${WEBAPPS_INBBOX_PREFIX_OPT}" = "yes" ]; then
		echo "Webapps using .INBOX prefix for IMAP folders: ${boldon}${WEBAPPS_INBBOX_PREFIX_OPT}${boldoff}"
	fi

	echo "Replace \"php.ini\" with '$0 all' and '$0 php_ini': ${boldon}${PHP_INI_OPT}${boldoff}"

	if [ "${PHP_INI_OPT}" = "yes" ]; then
		echo "Replace \"php.ini\" using type: ${boldon}${PHP_INI_TYPE_OPT}${boldoff}"
	fi

	if [ "${CRON_OPT}" = "yes" ]; then
		echo "Cron for notifications and (or) updates: ${boldon}yes${boldoff}"
		echo "Cron frequency: ${boldon}${CRON_FREQUENCY_OPT}${boldoff}";
		if [ "${NOTIFICATIONS_OPT}" = "yes" ]; then
			echo "Auto notifications: ${boldon}yes${boldoff}"
			echo "Auto notifications email address: ${boldon}${EMAIL_OPT}${boldoff}"
		fi
		if [ "${NOTIFICATIONS_OPT}" = "yes" ]; then
			echo "Auto updates: ${boldon}yes${boldoff}"
		fi
	else
		echo "Auto updates/notifications: ${boldon}no${boldoff}"
	fi
	
	echo "Run \"clean\" every time: ${boldon}${CLEAN_OPT}${boldoff}"
	echo "Run \"clean_old_webapps\" every time: ${boldon}${CLEAN_OLD_WEBAPPS_OPT}${boldoff}"
	echo "Run \"clean_old_tarballs\" every time: ${boldon}${CLEAN_OLD_TARBALLS_OPT}${boldoff}"

	echo "Show texts in bold: ${boldon}${BOLD_OPT}${boldoff}"
	
	if [ "${SQUIRRELMAIL_OPT}" = "yes" ]; then
		echo "SquirrelMail: ${boldon}${SQUIRRELMAIL_VER}${boldoff}"
	else
		echo "SquirrelMail: ${boldon}no${boldoff}"
	fi

	if [ "${ZEND_OPT}" = "yes" ]; then
		if [ "${OS}" = "FreeBSD" ]; then
			echo "Zend Guard Loader: ${boldon}${ZEND_VER}${boldoff}"
		else
			echo "Zend Guard Loader: ${boldon}yes${boldoff}"
		fi
	else
		echo "Zend Guard Loader: ${boldon}no${boldoff}"
	fi
	
	if [ "${IONCUBE_OPT}" = "yes" ]; then
		echo "ionCube loader: ${boldon}${IONCUBE_VER}${boldoff}"
	else
		echo "ionCube loader: ${boldon}no${boldoff}"
	fi
	
	if [ "${SUHOSIN_OPT}" = "yes" ] && [ "${SUHOSIN_PHP_UPLOADSCAN_OPT}" = "yes" ]; then
		echo "Suhosin (with PHP upload scan script): ${boldon}${SUHOSIN_VER}${boldoff}"
	elif [ "${SUHOSIN_OPT}" = "yes" ] && [ "${SUHOSIN_PHP_UPLOADSCAN_OPT}" = "no" ]; then
		echo "Suhosin: ${boldon}${SUHOSIN_VER}${boldoff}"
	else
		echo "Suhosin: ${boldon}no${boldoff}"
	fi
}

####################################################

option_set_valid(){
	#Used in create_options()
	if [ -z $2 ]; then
		echo "Two arguments must be given for the function"
		return;
	fi
	VAR=`echo $1 | tr "[a-z]" "[A-Z]"`
	
	if [ -z "$(eval_var ${VAR}_SET)" ]; then
		echo "${1} is not a valid option."
		return;
	fi
	
	VALID="no"
	for i in $(eval_var ${VAR}_SET); do {
		if [ "${i}" = "${2}" ] || [ "${i}" = "userinput" ]; then
			VALID="yes"
			break;
		fi
	};
	done;
	if [ "${VALID}" = "yes" ]; then
		setOpt $1 $2;
	else
		echo "${boldon}Invalid selection, please enter the selection again.${boldoff}"
	fi
	echo ""
}

create_options(){
	HIDE_CHANGES=1
	
	if [ $# -eq 1 ]; then
		INPUT_VALUE=$1
	fi

	if [ -s ${OPTIONS_CONF} ]; then
		echo -n "Would you like to backup the current options.conf? (yes/no): ";
		read do_opt_backup;
		until [ "${do_opt_backup}" = "yes" ] || [ "${do_opt_backup}" = "no" ]; do
			echo -n "Please enter 'yes' or 'no': "
			read do_opt_backup;
		done
		
		if [ "${do_opt_backup}" = "yes" ]; then
			cp -f ${OPTIONS_CONF} ${OPTIONS_CONF}.`date +%Y%m%d%I%M%S`.backup
			echo "Backup created: ${OPTIONS_CONF}.`date +%Y%m%d%I%M%S`.backup";
		fi
		echo ""	
	fi

	QUESTION_SET="`echo ${WEBSERVER_SET} | tr ' ' '/'`"
	VALID="no"
	until [ "${VALID}" = "yes" ]; do
		echo -n "Please select webserver you would like to use (${QUESTION_SET}):"
		read option_answer;
		option_set_valid webserver ${option_answer};
	done
	
	if [ -e /etc/redhat-release ]; then
		COUNT="`grep -c CloudLinux /etc/redhat-release`"
		if [ "${COUNT}" -ge 1 ]; then
			echo -n "Would you like to enable CloudLinux in CustomBuild? (yes/no): ";
			read clopt;
			until [ "${clopt}" = "yes" ] || [ "${clopt}" = "no" ]; do
				echo -n "Please enter 'yes' or 'no': "
				read clopt
			done
			setOpt cloudlinux ${clopt}
			echo ""
		fi
	fi
	
	
	QUESTION_SET="`echo ${FTPD_SET} | tr ' ' '/'`"
	VALID="no"
	until [ "${VALID}" = "yes" ]; do
		echo -n "Please select FTP server you would like to use (${QUESTION_SET}):"
		read option_answer;
		option_set_valid ftpd ${option_answer};
	done
	
	QUESTION_SET="`echo ${PHP1_RELEASE_SET} | tr ' ' '/'`"
	VALID="no"
	until [ "${VALID}" = "yes" ]; do
		echo -n "Please select default PHP version you would like to use (${QUESTION_SET}):"
		read option_answer;
		option_set_valid php1_release ${option_answer};
	done
	
	DEFPHP_ANSWER="no"
	QUESTION_SET="`echo ${PHP1_MODE_SET} | tr ' ' '/'`"
	VALID="no"
	until [ "${VALID}" = "yes" ]; do
		echo -n "Please select default PHP mode you would like to use (${QUESTION_SET}):"
		read option_answer;
		option_set_valid php1_mode ${option_answer};
	done
	DEFPHP_ANSWER=${option_answer}
	
        echo -n "Would you like to have a second instance of PHP installed? (yes/no): ";
        read wantsec;
        until [ "${wantsec}" = "yes" ] || [ "${wantsec}" = "no" ]; do
                echo -n "Please enter 'yes' or 'no': "
                read wantsec
        done
        echo ""
        
        if [ "${wantsec}" = "yes" ]; then
		#PHP1_RELEASE_SET is not a bug here :) It's set not to display "no" as an option, because the previous question already asks if anyone would like to have a 2nd version of PHP
		QUESTION_SET="`echo ${PHP1_RELEASE_SET} | tr ' ' '/'`"
		VALID="no"
		until [ "${VALID}" = "yes" ]; do
			echo -n "Please select additional PHP version you would like to use (${QUESTION_SET}):"
			read option_answer;
			option_set_valid php2_release ${option_answer};
		done
		
        	QUESTION_SET="`echo ${PHP2_MODE_SET} | tr ' ' '/'`"
        	VALID="no"
		until [ "${VALID}" = "yes" ]; do
			echo -n "Please select additional PHP mode you would like to use (${QUESTION_SET}):"
			read option_answer;
			option_set_valid php2_mode ${option_answer};
		done
        fi
	
	if [ "${OS}" != "FreeBSD" ] && [ "${DEFPHP_ANSWER}" = "mod_php" ]; then
		QUESTION_SET="`echo ${MOD_RUID2_SET} | tr ' ' '/'`"
		VALID="no"
		until [ "${VALID}" = "yes" ]; do
			echo -n "Please select if you would like to use mod_ruid2 (${QUESTION_SET}):"
			read option_answer;
			option_set_valid mod_ruid2 ${option_answer};
		done
	else
		setOpt mod_ruid2 no
        fi
       
	QUESTION_SET="`echo ${IONCUBE_SET} | tr ' ' '/'`"
	VALID="no"
	until [ "${VALID}" = "yes" ]; do
		echo -n "Please select if you would like to use ionCube (${QUESTION_SET}):"
		read option_answer;
		option_set_valid ioncube ${option_answer};
	done
	
	QUESTION_SET="`echo ${ZEND_SET} | tr ' ' '/'`"
	VALID="no"
	until [ "${VALID}" = "yes" ]; do
		echo -n "Please select if you would like to use Zend Guard Loader (${QUESTION_SET}):"
		read option_answer;
		option_set_valid zend ${option_answer};
	done
	
	QUESTION_SET="`echo ${SUHOSIN_SET} | tr ' ' '/'`"
	VALID="no"
	until [ "${VALID}" = "yes" ]; do
		echo -n "Please select if you would like to use suhosin (${QUESTION_SET}):"
		read option_answer;
		option_set_valid suhosin ${option_answer};
	done
	
	if [ ! -s ${DACONF_FILE} ]; then
		echo "********"
		echo "For new DirectAdmin installs, we don't recommend updating ${MYSQLNAME} until after everything is finished";
		echo "${boldon}We recommend using 'no' here to use the already included precompiled binaries.${boldoff}";
		echo "You can still update ${MYSQLNAME} later.";
		echo "";
	fi

	QUESTION_SET="`echo ${MYSQL_INST_SET} | tr ' ' '/'`"
	VALID="no"
	until [ "${VALID}" = "yes" ]; do
		echo "Please select which MySQL server you'd like CustomBuild to manage, please set to 'no' if you wouldn't like CustomBuild to manage it."
		echo "You cannot select MariaDB (or MySQL) if it is not officially supported by your OS."
		echo -n "If you do not know what is officially supported by your OS, just select 'yes' or 'no' (${QUESTION_SET}):"
		read option_answer;
		option_set_valid mysql_inst ${option_answer};
	done
	
	#If MySQL/MariaDB is selected
	if [ "${option_answer}" != "no" ]; then
		QUESTION_SET="`echo ${MYSQL_SET} | tr ' ' '/'`"
		VALID="no"
		until [ "${VALID}" = "yes" ]; do
			echo -n "Please select the release of ${MYSQLNAME} (${QUESTION_SET}):"
			read option_answer;
			option_set_valid mysql ${option_answer};
		done
	fi
	
#CustomBuild 2.0 supports the latest release of apache only	
#	echo -n "Which version of Apache you would like to have? (2.0/2.2/2.4): ";
#	read apachever;
#	until [ "${apachever}" = "2.0" ] || [ "${apachever}" = "2.2" ] || [ "${apachever}" = "2.4" ]; do
#		echo -n "Please enter '2.0', '2.2' or '2.4': "
#		read apachever;
#	done
#
#	setOpt apache_ver ${apachever};
	
	QUESTION_SET="`echo ${EXIM_SET} | tr ' ' '/'`"
	VALID="no"
	until [ "${VALID}" = "yes" ]; do
		echo -n "Please select if you would like CustomBuild to manage Exim installation (${QUESTION_SET}):"
		read option_answer;
		option_set_valid exim ${option_answer};
	done
	
	QUESTION_SET="`echo ${DOVECOT_SET} | tr ' ' '/'`"
	VALID="no"
	until [ "${VALID}" = "yes" ]; do
		echo -n "Please select if you would like CustomBuild to manage Dovecot installation (${QUESTION_SET}):"
		read option_answer;
		option_set_valid dovecot ${option_answer};
	done
	
	QUESTION_SET="`echo ${PHPMYADMIN_SET} | tr ' ' '/'`"
	VALID="no"
	until [ "${VALID}" = "yes" ]; do
		echo -n "Please select if you would like CustomBuild to manage phpMyAdmin installation (${QUESTION_SET}):"
		read option_answer;
		option_set_valid phpmyadmin ${option_answer};
	done
	
	QUESTION_SET="`echo ${SQUIRRELMAIL_SET} | tr ' ' '/'`"
	VALID="no"
	until [ "${VALID}" = "yes" ]; do
		echo -n "Please select if you would like CustomBuild to manage SquirrelMail installation (${QUESTION_SET}):"
		read option_answer;
		option_set_valid squirrelmail ${option_answer};
	done
	
	QUESTION_SET="`echo ${ROUNDCUBE_SET} | tr ' ' '/'`"
	VALID="no"
	until [ "${VALID}" = "yes" ]; do
		echo -n "Please select if you would like CustomBuild to manage RoundCube installation (${QUESTION_SET}):"
		read option_answer;
		option_set_valid roundcube ${option_answer};
	done
}

####################################################

used_configs(){
	if [ "${WEBSERVER_OPT}" = "apache" ] || [ "${WEBSERVER_OPT}" = "nginx_apache" ]; then
		echo "Apache configuration file: ${WORKDIR}/${APACHE2_CONFIGURE}"
	fi
	if [ "${WEBSERVER_OPT}" = "nginx" ]; then
		echo "Nginx configuration file: ${WORKDIR}/${NGINX_CONFIGURE}"
	fi
	if [ "${WEBSERVER_OPT}" = "nginx_apache" ]; then
		echo "Nginx (reverse proxy) configuration file: ${WORKDIR}/${NGINX_CONFIGURE}"
	fi

	if [ "${PHP1_MODE_OPT}" != "mod_php" ]; then
		PHP_INI_VAR=PHP_INI_FPM${PHP1_SHORTRELEASE}
		echo "PHP (default) php.ini file: $(eval_var ${PHP_INI_VAR})"
	fi
	
	if [ "${PHP1_MODE_OPT}" = "mod_php" ]; then
		echo "PHP (default) php.ini file: ${PHP_INI}"
	fi
	
	if [ "${PHP2_MODE_OPT}" != "mod_php" ] && [ "${PHP2_RELEASE_OPT}" != "no" ]; then
		PHP_INI_VAR=PHP_INI_FPM${PHP2_SHORTRELEASE}
		echo "PHP (additional) php.ini file:: $(eval_var ${PHP_INI_VAR})"
	fi
	
	if [ "${PHP2_MODE_OPT}" = "mod_php" ] && [ "${PHP2_RELEASE_OPT}" != "no" ]; then
		echo "PHP (additional) php.ini file: ${PHP_INI}"
	fi
	
	if [ "${PHP1_MODE_OPT}" = "mod_php" ]; then
		CONFIGURE_FILE_VAR=PHP${PHP1_SHORTRELEASE}_CONFIGURE
		echo "PHP (default) configuration file: ${WORKDIR}/$(eval_var ${CONFIGURE_FILE_VAR})"
	fi

	if [ "${PHP1_MODE_OPT}" = "php-fpm" ]; then
		CONFIGURE_FILE_VAR=PHP${PHP1_SHORTRELEASE}_CONFIGURE_FPM
		echo "PHP (default) configuration file: ${WORKDIR}/$(eval_var ${CONFIGURE_FILE_VAR})"
	fi

	if [ "${PHP1_MODE_OPT}" = "suphp" ] ||  [ "${PHP2_MODE_OPT}" = "suphp" ]; then
		echo "suPHP configuration file: ${WORKDIR}/${SUPHP_CONFIGURE}"
	fi

	if [ "${PHP1_MODE_OPT}" = "suphp" ]; then
		echo "suPHP configuration file: ${WORKDIR}/${SUPHP_CONFIGURE}"
		CONFIGURE_FILE_VAR=PHP${PHP1_SHORTRELEASE}_CONFIGURE_SUPHP
		echo "PHP (default) configuration file: ${WORKDIR}/$(eval_var ${CONFIGURE_FILE_VAR})"
	fi
	
	if [ "${PHP1_MODE_OPT}" = "fastcgi" ]; then
		CONFIGURE_FILE_VAR=PHP${PHP1_SHORTRELEASE}_CONFIGURE_FCGI
		echo "PHP (default) configuration file: ${WORKDIR}/$(eval_var ${CONFIGURE_FILE_VAR})"
	fi
	
	if [ "${PHP1_MODE_OPT}" = "lsphp" ]; then
		CONFIGURE_FILE_VAR=PHP${PHP1_SHORTRELEASE}_CONFIGURE_LSPHP
		echo "PHP (default) configuration file: ${WORKDIR}/$(eval_var ${CONFIGURE_FILE_VAR})"
	fi
	
	if [ "${PHP2_MODE_OPT}" = "lsphp" ] && [ "${PHP2_RELEASE_OPT}" != "no" ]; then
		CONFIGURE_FILE_VAR=PHP${PHP2_SHORTRELEASE}_CONFIGURE_LSPHP
		echo "PHP (additional) configuration file: ${WORKDIR}/$(eval_var ${CONFIGURE_FILE_VAR})"
	fi
	
	if [ "${PHP2_MODE_OPT}" = "suphp" ] && [ "${PHP2_RELEASE_OPT}" != "no" ]; then
		CONFIGURE_FILE_VAR=PHP${PHP2_SHORTRELEASE}_CONFIGURE_SUPHP
		echo "PHP (additional) configuration file: ${WORKDIR}/$(eval_var ${CONFIGURE_FILE_VAR})"
	fi
	
	if [ "${PHP2_MODE_OPT}" = "fastcgi" ] && [ "${PHP2_RELEASE_OPT}" != "no" ]; then
		CONFIGURE_FILE_VAR=PHP${PHP2_SHORTRELEASE}_CONFIGURE_FCGI
		echo "PHP (additional) configuration file: ${WORKDIR}/$(eval_var ${CONFIGURE_FILE_VAR})"
	fi
	
	if [ "${PHP2_MODE_OPT}" = "mod_php" ] && [ "${PHP2_RELEASE_OPT}" != "no" ]; then
		CONFIGURE_FILE_VAR=PHP${PHP2_SHORTRELEASE}_CONFIGURE
		echo "PHP (additional) configuration file: ${WORKDIR}/$(eval_var ${CONFIGURE_FILE_VAR})"
	fi

	if [ "${PHP2_MODE_OPT}" = "php-fpm" ] && [ "${PHP2_RELEASE_OPT}" != "no" ]; then
		CONFIGURE_FILE_VAR=PHP${PHP2_SHORTRELEASE}_CONFIGURE_FPM
		echo "PHP (additional) configuration file: ${WORKDIR}/$(eval_var ${CONFIGURE_FILE_VAR})"
	fi

	if [ "${FTPD_OPT}" = "proftpd" ]; then
		echo "ProFTPD configuration file: ${WORKDIR}/${PROFTPD_CONFIGURE}"
	fi
	
	if [ "${FTPD_OPT}" = "pureftpd" ]; then
		echo "PureFTPD configuration file: ${WORKDIR}/${PUREFTPD_CONFIGURE}"
	fi

	if [ "${EXIM_OPT}" = "yes" ]; then
		echo -n "Exim Makefile: ";
		if [ "${EXIM_MAKEFILE}" != "" ]; then
			echo "${EXIM_MAKEFILE}";
		else
			echo "${WEBPATH}/Makefile";
		fi
	fi

	if [ "${DOVECOT_OPT}" = "yes" ]; then
		echo "Dovecot configuration file: ${WORKDIR}/${DOVECOT_CONFIGURE}"
	fi
	
	if [ -d ${PMA_THEMES} ]; then
		if [ "${PHPMYADMIN_OPT}" = "yes" ]; then
			echo "phpMyAdmin themes directory: ${PMA_THEMES}"
		fi
	fi
	
	if [ -e ${PMA_CONFIG} ]; then
		if [ "${PHPMYADMIN_OPT}" = "yes" ]; then
			echo "phpMyAdmin configuration file: ${PMA_CONFIG}"
		fi
	fi
	
	if [ -e ${SQUIRREL_CONFIG} ]; then
		if [ "${SQUIRRELMAIL_OPT}" = "yes" ]; then
			echo "SquirrelMail configuration file: ${SQUIRREL_CONFIG}"
		fi
	fi
	
	if [ -e ${ROUNDCUBE_CONFIG} ]; then
		if [ "${ROUNDCUBE_OPT}" = "yes" ]; then
			echo "RoundCube webmail configuration file: ${ROUNDCUBE_CONFIG}"
		fi
	fi
	
	if [ -e ${ROUNDCUBE_CONFIG_DB} ]; then
		if [ "${ROUNDCUBE_OPT}" = "yes" ]; then
			echo "RoundCube webmail database configuration file: ${ROUNDCUBE_CONFIG_DB}"
		fi
	fi
	
	if [ -e ${ROUNDCUBE_HTACCESS} ]; then
		if [ "${ROUNDCUBE_OPT}" = "yes" ]; then
			echo "RoundCube .htaccess file: ${ROUNDCUBE_HTACCESS}"
		fi
	fi

	if [ -d ${ROUNDCUBE_PLUGINS} ]; then
		if [ "${ROUNDCUBE_OPT}" = "yes" ]; then
			echo "RoundCube webmail plugins overwrite directory: ${ROUNDCUBE_PLUGINS}"
		fi
	fi
	
	if [ -d ${ROUNDCUBE_SKINS} ]; then
		if [ "${ROUNDCUBE_OPT}" = "yes" ]; then
			echo "RoundCube webmail skins overwrite directory: ${ROUNDCUBE_SKINS}"
		fi
	fi
	
	if [ -d ${ROUNDCUBE_PROGRAM} ]; then
		if [ "${ROUNDCUBE_OPT}" = "yes" ]; then
			echo "RoundCube webmail program overwrite directory: ${ROUNDCUBE_PROGRAM}"
		fi
	fi

}

####################################################

init_customize_write(){
	PLUGIN_PATH=/usr/local/directadmin/plugins/custombuild/configure
	CUSTOMIZE_AP2_WRITE=${PLUGIN_PATH}/ap2/configure.apache
	CUSTOMIZE_NGINX_WRITE=${PLUGIN_PATH}/nginx/configure.nginx
	CUSTOMIZE_NGINX_REVERSE_WRITE=${PLUGIN_PATH}/nginx_reverse/configure.nginx
	CUSTOMIZE_PROFTPD_WRITE=${PLUGIN_PATH}/proftpd/configure.proftpd
	CUSTOMIZE_PUREFTPD_WRITE=${PLUGIN_PATH}/pureftpd/configure.pureftpd
	CUSTOMIZE_CLAMAV_WRITE=${PLUGIN_PATH}/clamav/configure.clamav
	CUSTOMIZE_LIBXML2_WRITE=${PLUGIN_PATH}/libxml2/configure.clamav
	CUSTOMIZE_LIBXSLT_WRITE=${PLUGIN_PATH}/libxslt/configure.clamav
	CUSTOMIZE_SUPHP_WRITE=${PLUGIN_PATH}/suphp/configure.suphp
	CUSTOMIZE_DOVECOT_WRITE=${PLUGIN_PATH}/dovecot/configure.dovecot
}

set_versions(){
	if [ "$1" = "show" ]; then
		if [ -e ${VERSIONS_FILE} ]; then
			cat ${VERSIONS_FILE}
		fi
	elif [ "$1" = "show_customized" ]; then
		if [ -e ${VERSIONS_FILE_CUSTOM} ]; then
			cat ${VERSIONS_FILE_CUSTOM}
		fi
	elif [ "$1" = "remove_customized" ]; then
		if [ -e ${VERSIONS_FILE_CUSTOM} ]; then
			rm -f ${VERSIONS_FILE_CUSTOM}
		fi
	else
		if [ -e /usr/local/directadmin/plugins/custombuild/configure/versions.txt ]; then
			cat /usr/local/directadmin/plugins/custombuild/configure/versions.txt > ${VERSIONS_FILE_CUSTOM}
		else
			echo "/usr/local/directadmin/plugins/custombuild/configure/versions.txt does not exist."
		fi
	fi
}

customize_config(){
	if [ "${1}" = "" ]; then
		echo "First argument (component) is needed for the function to work."
		exit 1;
	fi
	init_customize_write;
	ARGUMENT=$1;
	if [ "${ARGUMENT}" = "ap2" ]; then
		COMPONENT=${ARGUMENT}
		CONF_PATH=${WORKDIR}/custom/${COMPONENT}
		CONF_FILE=${CONF_PATH}/configure.apache
		if [ ! -s ${CONF_FILE} ]; then
			mkdir -p ${CONF_PATH}
			touch ${CONF_FILE}
		fi
		cat ${CUSTOMIZE_AP2_WRITE} > ${CONF_FILE}
		chmod 700 ${CONF_FILE}
	fi
	if [ "${ARGUMENT}" = "nginx" ]; then
		COMPONENT=${ARGUMENT}
		CONF_PATH=${WORKDIR}/custom/${COMPONENT}
		CONF_FILE=${CONF_PATH}/configure.nginx
		if [ ! -s ${CONF_FILE} ]; then
			mkdir -p ${CONF_PATH}
			touch ${CONF_FILE}
		fi
		cat ${CUSTOMIZE_NGINX_WRITE} > ${CONF_FILE}
		chmod 700 ${CONF_FILE}
	fi
	if [ "${ARGUMENT}" = "nginx_reverse" ]; then
		COMPONENT=${ARGUMENT}
		CONF_PATH=${WORKDIR}/custom/${COMPONENT}
		CONF_FILE=${CONF_PATH}/configure.nginx
		if [ ! -s ${CONF_FILE} ]; then
			mkdir -p ${CONF_PATH}
			touch ${CONF_FILE}
		fi
		cat ${CUSTOMIZE_NGINX_REVERSE_WRITE} > ${CONF_FILE}
		chmod 700 ${CONF_FILE}
	fi
	if [ "${ARGUMENT}" = "proftpd" ]; then
		COMPONENT=${ARGUMENT}
		CONF_PATH=${WORKDIR}/custom/${COMPONENT}
		CONF_FILE=${CONF_PATH}/configure.proftpd
		if [ ! -s ${CONF_FILE} ]; then
			mkdir -p ${CONF_PATH}
			touch ${CONF_FILE}
		fi
		cat ${CUSTOMIZE_PROFTPD_WRITE} > ${CONF_FILE}
		chmod 700 ${CONF_FILE}
	fi
	if [ "${ARGUMENT}" = "clamav" ]; then
		COMPONENT=${ARGUMENT}
		CONF_PATH=${WORKDIR}/custom/${COMPONENT}
		CONF_FILE=${CONF_PATH}/configure.clamav
		if [ ! -s ${CONF_FILE} ]; then
			mkdir -p ${CONF_PATH}
			touch ${CONF_FILE}
		fi
		cat ${CUSTOMIZE_CLAMAV_WRITE} > ${CONF_FILE}
		chmod 700 ${CONF_FILE}
	fi
	if [ "${ARGUMENT}" = "libxml2" ]; then
		COMPONENT=${ARGUMENT}
		CONF_PATH=${WORKDIR}/custom/${COMPONENT}
		CONF_FILE=${CONF_PATH}/configure.libxml2
		if [ ! -s ${CONF_FILE} ]; then
			mkdir -p ${CONF_PATH}
			touch ${CONF_FILE}
		fi
		cat ${CUSTOMIZE_LIBXML2_WRITE} > ${CONF_FILE}
		chmod 700 ${CONF_FILE}
	fi
	if [ "${ARGUMENT}" = "libxslt" ]; then
		COMPONENT=${ARGUMENT}
		CONF_PATH=${WORKDIR}/custom/${COMPONENT}
		CONF_FILE=${CONF_PATH}/configure.libxslt
		if [ ! -s ${CONF_FILE} ]; then
			mkdir -p ${CONF_PATH}
			touch ${CONF_FILE}
		fi
		cat ${CUSTOMIZE_LIBXSLT_WRITE} > ${CONF_FILE}
		chmod 700 ${CONF_FILE}
	fi
	if [ "${ARGUMENT}" = "pureftpd" ]; then
		COMPONENT=${ARGUMENT}
		CONF_PATH=${WORKDIR}/custom/${COMPONENT}
		CONF_FILE=${CONF_PATH}/configure.pureftpd
		if [ ! -s ${CONF_FILE} ]; then
			mkdir -p ${CONF_PATH}
			touch ${CONF_FILE}
		fi
		cat ${CUSTOMIZE_PUREFTPD_WRITE} > ${CONF_FILE}
		chmod 700 ${CONF_FILE}
	fi
	if [ "${ARGUMENT}" = "suphp" ]; then
		COMPONENT=${ARGUMENT}
		CONF_PATH=${WORKDIR}/custom/${COMPONENT}
		CONF_FILE=${CONF_PATH}/configure.suphp
		if [ ! -s ${CONF_FILE} ]; then
			mkdir -p ${CONF_PATH}
			touch ${CONF_FILE}
		fi
		cat ${CUSTOMIZE_SUPHP_WRITE} > ${CONF_FILE}
		chmod 700 ${CONF_FILE}
	fi
	if [ "${ARGUMENT}" = "dovecot" ]; then
		COMPONENT=${ARGUMENT}
		CONF_PATH=${WORKDIR}/custom/${COMPONENT}
		CONF_FILE=${CONF_PATH}/configure.dovecot
		if [ ! -s ${CONF_FILE} ]; then
			mkdir -p ${CONF_PATH}
			touch ${CONF_FILE}
		fi
		cat ${CUSTOMIZE_DOVECOT_WRITE} > ${CONF_FILE}
		chmod 700 ${CONF_FILE}
	fi
	if [ `echo ${ARGUMENT} | grep -c '^ap2_php[0-9][0-9]$'` -eq 1 ] || [ `echo ${ARGUMENT} | grep -c '^suphp_php[0-9][0-9]$'` -eq 1 ]  || [ `echo ${ARGUMENT} | grep -c '^fastcgi_php[0-9][0-9]$'` -eq 1 ] || [ `echo ${ARGUMENT} | grep -c '^fpm_php[0-9][0-9]$'` -eq 1 ] ; then
		EXTENSION=`echo ${ARGUMENT} | cut -d_ -f2`
		COMPONENT=`echo ${ARGUMENT} | cut -d_ -f1`
		CONF_PATH=${WORKDIR}/custom/${COMPONENT}
		CONF_FILE=${CONF_PATH}/configure.${EXTENSION}
		if [ ! -s ${CONF_FILE} ]; then
			mkdir -p ${CONF_PATH}
			touch ${CONF_FILE}
		fi
		cat ${PLUGIN_PATH}/${COMPONENT}/configure.${EXTENSION} > ${CONF_FILE}
		chmod 700 ${CONF_FILE}
	fi
	if [ `echo ${ARGUMENT} | grep -c '^litespeed_php[0-9][0-9]$'` -eq 1 ] || [ `echo ${ARGUMENT} | grep -c '^litespeed_php[0-9][0-9]$'` -eq 1 ]  || [ `echo ${ARGUMENT} | grep -c '^litespeed_php[0-9][0-9]$'` -eq 1 ] || [ `echo ${ARGUMENT} | grep -c '^litespeed_php[0-9][0-9]$'` -eq 1 ] ; then
		EXTENSION=`echo ${ARGUMENT} | cut -d_ -f2`
		COMPONENT=`echo ${ARGUMENT} | cut -d_ -f1`
		CONF_PATH=${WORKDIR}/custom/${COMPONENT}
		CONF_FILE=${CONF_PATH}/configure.${EXTENSION}
		if [ ! -s ${CONF_FILE} ]; then
			mkdir -p ${CONF_PATH}
			touch ${CONF_FILE}
		fi
		cat ${PLUGIN_PATH}/${COMPONENT}/configure.${EXTENSION} > ${CONF_FILE}
		chmod 700 ${CONF_FILE}
	fi
	if [ "${ARGUMENT}" = "fastcgi_php53" ] || [ "${ARGUMENT}" = "fastcgi_php54" ] || [ "${ARGUMENT}" = "fastcgi_php55" ] || [ "${ARGUMENT}" = "fastcgi_php56" ]; then
		EXTENSION=`echo ${ARGUMENT} | cut -d_ -f2`
		COMPONENT=`echo ${ARGUMENT} | cut -d_ -f1`
		CONF_PATH=${WORKDIR}/custom/${COMPONENT}
		CONF_FILE=${CONF_PATH}/configure.${EXTENSION}
		if [ ! -s ${CONF_FILE} ]; then
			mkdir -p ${CONF_PATH}
			touch ${CONF_FILE}
		fi
		cat ${PLUGIN_PATH}/${COMPONENT}/configure.${EXTENSION} > ${CONF_FILE}
		chmod 700 ${CONF_FILE}
	fi
}

####################################################
initConfigsJSON(){
	NUM_OF_SECTIONS=0;
	AVAIL_CONFIGS=" "
	PLUGIN_PATH=/usr/local/directadmin/plugins/custombuild/configure
	MOD_PHP_CONFIGURE_ENDING="_CONFIGURE"
	FPM_CONFIGURE_ENDING="_CONFIGURE_FPM"
	FASTCGI_CONFIGURE_ENDING="_CONFIGURE_FCGI"
	SUPHP_CONFIGURE_ENDING="_CONFIGURE_SUPHP"
	LSPHP_CONFIGURE_ENDING="_CONFIGURE_LSPHP"
	
	if [ "${WEBSERVER_OPT}" = "apache" ] || [ "${WEBSERVER_OPT}" = "nginx_apache" ]; then
		AVAIL_CONFIGS="${AVAIL_CONFIGS}ap2 "
		CUSTOMIZE_AP2_DESC="Apache configuration file"
		CUSTOMIZE_AP2_READ="${WORKDIR}/${APACHE2_CONFIGURE}"
	fi
	
	if [ "${WEBSERVER_OPT}" = "nginx" ]; then
		AVAIL_CONFIGS="${AVAIL_CONFIGS}nginx "
		CUSTOMIZE_NGINX_DESC="Nginx configuration file"
		CUSTOMIZE_NGINX_READ="${WORKDIR}/${NGINX_CONFIGURE}"
	fi
	
	if [ "${WEBSERVER_OPT}" = "nginx_reverse" ]; then
		AVAIL_CONFIGS="${AVAIL_CONFIGS}nginx_reverse "
		CUSTOMIZE_NGINX_REVERSE_DESC="Nginx (reverse proxy) configuration file"
		CUSTOMIZE_NGINX_REVERSE_READ="${WORKDIR}/${NGINX_CONFIGURE}"
	fi
	
	if [ "${DOVECOT_OPT}" = "yes" ]; then
		AVAIL_CONFIGS="${AVAIL_CONFIGS}dovecot "
		CUSTOMIZE_DOVECOT_DESC="Dovecot configuration file"
		CUSTOMIZE_DOVECOT_READ="${WORKDIR}/${DOVECOT_CONFIGURE}"
	fi
	
	if [ "${FTPD_OPT}" = "proftpd" ]; then
		AVAIL_CONFIGS="${AVAIL_CONFIGS}proftpd "
		CUSTOMIZE_PROFTPD_DESC="ProFTPd configuration file"
		CUSTOMIZE_PROFTPD_READ="${WORKDIR}/${PROFTPD_CONFIGURE}"
	elif [ "${FTPD_OPT}" = "pureftpd" ]; then
		AVAIL_CONFIGS="${AVAIL_CONFIGS}pureftpd "
		CUSTOMIZE_PUREFTPD_DESC="Pure-FTPd configuration file"
		CUSTOMIZE_PUREFTPD_READ="${WORKDIR}/${PUREFTPD_CONFIGURE}"
	fi
	
	if [ "${CLAMAV_OPT}" = "yes" ]; then
		AVAIL_CONFIGS="${AVAIL_CONFIGS}clamav "
		CUSTOMIZE_CLAMAV_DESC="ClamAV configuration file"
		CUSTOMIZE_CLAMAV_READ="${WORKDIR}/${CLAMAV_CONFIGURE}"
	fi
	
	#LibXML2
	AVAIL_CONFIGS="${AVAIL_CONFIGS}libxml2 "
	CUSTOMIZE_LIBXML2_DESC="LibXML2 configuration file"
	CUSTOMIZE_LIBXML2_READ="${WORKDIR}/${LIBXML2_CONFIGURE}"
	
	#LibXSLT
	AVAIL_CONFIGS="${AVAIL_CONFIGS}libxslt "
	CUSTOMIZE_LIBXSLT_DESC="LibXSLT configuration file"
	CUSTOMIZE_LIBXSLT_READ="${WORKDIR}/${LIBXSLT_CONFIGURE}"
	
	if [ "${PHP1_MODE_OPT}" = "mod_php" ]; then
		AVAIL_CONFIGS="${AVAIL_CONFIGS}ap2_php${PHP1_SHORTRELEASE} "
		eval `echo "CUSTOMIZE_AP2_PHP${PHP1_SHORTRELEASE}_DESC=\"PHP ${PHP1_RELEASE_OPT} as ${PHP1_MODE_OPT} (default) configuration file\""`
		READ_VAR="PHP${PHP1_SHORTRELEASE}${MOD_PHP_CONFIGURE_ENDING}";
		eval `echo "CUSTOMIZE_AP2_PHP${PHP1_SHORTRELEASE}_READ=\"${WORKDIR}/$(eval_var ${READ_VAR})\""`;
		PLUGIN_WRITE=`echo $(eval_var ${READ_VAR}) | perl -0p -e 's|^custom/||' | perl -0p -e 's|^configure/||'`
		eval `echo "CUSTOMIZE_AP2_PHP${PHP1_SHORTRELEASE}_WRITE=\"${PLUGIN_PATH}/${PLUGIN_WRITE}\""`;
	elif [ "${PHP1_MODE_OPT}" = "lsphp" ]; then
		AVAIL_CONFIGS="${AVAIL_CONFIGS}litespeed_php${PHP1_SHORTRELEASE} "
		eval `echo "CUSTOMIZE_LITESPEED_PHP${PHP1_SHORTRELEASE}_DESC=\"PHP ${PHP1_RELEASE_OPT} as ${PHP1_MODE_OPT} (default) configuration file\""`
		READ_VAR="PHP${PHP1_SHORTRELEASE}${LSPHP_CONFIGURE_ENDING}";
		eval `echo "CUSTOMIZE_LITESPEED_PHP${PHP1_SHORTRELEASE}_READ=\"${WORKDIR}/$(eval_var ${READ_VAR})\""`;
		PLUGIN_WRITE=`echo $(eval_var ${READ_VAR}) | perl -0p -e 's|^custom/||' | perl -0p -e 's|^configure/||'`
		eval `echo "CUSTOMIZE_LITESPEED_PHP${PHP1_SHORTRELEASE}_WRITE=\"${PLUGIN_PATH}/${PLUGIN_WRITE}\""`;
	elif [ "${PHP1_MODE_OPT}" = "fastcgi" ] || [ "${PHP1_MODE_OPT}" = "suphp" ] || [ "${PHP1_MODE_OPT}" = "php-fpm" ]; then
		MODE_OPT="${PHP1_MODE_OPT}"
		if [ "${MODE_OPT}" = "php-fpm" ]; then
			MODE_OPT="fpm"
		fi
		MODE_UPPERCASE=`echo ${MODE_OPT} | tr "[a-z]" "[A-Z]"`
		READ_VAR="${MODE_UPPERCASE}_CONFIGURE_ENDING"
		ENDING_VAR=$(eval_var ${READ_VAR})
		AVAIL_CONFIGS="${AVAIL_CONFIGS}${MODE_OPT}_php${PHP1_SHORTRELEASE} "
		eval `echo "CUSTOMIZE_${MODE_UPPERCASE}_PHP${PHP1_SHORTRELEASE}_DESC=\"PHP ${PHP1_RELEASE_OPT} as ${MODE_OPT} (default) configuration file\""`
		READ_VAR="PHP${PHP1_SHORTRELEASE}${ENDING_VAR}";
		eval `echo "CUSTOMIZE_${MODE_UPPERCASE}_PHP${PHP1_SHORTRELEASE}_READ=\"${WORKDIR}/$(eval_var ${READ_VAR})\""`;
		PLUGIN_WRITE=`echo $(eval_var ${READ_VAR}) | perl -0p -e 's|^custom/||' | perl -0p -e 's|^configure/||'`
		eval `echo "CUSTOMIZE_${MODE_UPPERCASE}_PHP${PHP1_SHORTRELEASE}_WRITE=\"${PLUGIN_PATH}/${PLUGIN_WRITE}\""`;
	fi
	if [ "${PHP2_RELEASE_OPT}" != "no" ]; then
		if [ "${PHP2_MODE_OPT}" = "mod_php" ]; then
			AVAIL_CONFIGS="${AVAIL_CONFIGS}ap2_php${PHP2_SHORTRELEASE} "
			eval `echo "CUSTOMIZE_AP2_PHP${PHP2_SHORTRELEASE}_DESC=\"PHP ${PHP2_RELEASE_OPT} as ${PHP2_MODE_OPT} (additional) configuration file\""`
			READ_VAR="PHP${PHP2_SHORTRELEASE}${MOD_PHP_CONFIGURE_ENDING}";
			eval `echo "CUSTOMIZE_AP2_PHP${PHP2_SHORTRELEASE}_READ=\"${WORKDIR}/$(eval_var ${READ_VAR})\""`;
			PLUGIN_WRITE=`echo $(eval_var ${READ_VAR}) | perl -0p -e 's|^custom/||' | perl -0p -e 's|^configure/||'`
			eval `echo "CUSTOMIZE_AP2_PHP${PHP2_SHORTRELEASE}_WRITE=\"${PLUGIN_PATH}/${PLUGIN_WRITE}\""`;
		elif [ "${PHP2_MODE_OPT}" = "lsphp" ]; then
			AVAIL_CONFIGS="${AVAIL_CONFIGS}litespeed_php${PHP2_SHORTRELEASE} "
			eval `echo "CUSTOMIZE_LITESPEED_PHP${PHP2_SHORTRELEASE}_DESC=\"PHP ${PHP2_RELEASE_OPT} as ${PHP2_MODE_OPT} (additional) configuration file\""`
			READ_VAR="PHP${PHP2_SHORTRELEASE}${LSPHP_CONFIGURE_ENDING}";
			eval `echo "CUSTOMIZE_LITESPEED_PHP${PHP2_SHORTRELEASE}_READ=\"${WORKDIR}/$(eval_var ${READ_VAR})\""`;
			PLUGIN_WRITE=`echo $(eval_var ${READ_VAR}) | perl -0p -e 's|^custom/||' | perl -0p -e 's|^configure/||'`
			eval `echo "CUSTOMIZE_LITESPEED_PHP${PHP2_SHORTRELEASE}_WRITE=\"${PLUGIN_PATH}/${PLUGIN_WRITE}\""`;
		elif [ "${PHP2_MODE_OPT}" = "fastcgi" ] || [ "${PHP2_MODE_OPT}" = "suphp" ] || [ "${PHP2_MODE_OPT}" = "php-fpm" ]; then
			MODE_OPT="${PHP2_MODE_OPT}"
			if [ "${MODE_OPT}" = "php-fpm" ]; then
				MODE_OPT="fpm"
			fi
			MODE_UPPERCASE=`echo ${MODE_OPT} | tr "[a-z]" "[A-Z]"`
			READ_VAR="${MODE_UPPERCASE}_CONFIGURE_ENDING"
			ENDING_VAR=$(eval_var ${READ_VAR})
			AVAIL_CONFIGS="${AVAIL_CONFIGS}${MODE_OPT}_php${PHP2_SHORTRELEASE} "
			eval `echo "CUSTOMIZE_${MODE_UPPERCASE}_PHP${PHP2_SHORTRELEASE}_DESC=\"PHP ${PHP2_RELEASE_OPT} as ${MODE_OPT} (additional) configuration file\""`
			READ_VAR="PHP${PHP2_SHORTRELEASE}${ENDING_VAR}";
			eval `echo "CUSTOMIZE_${MODE_UPPERCASE}_PHP${PHP2_SHORTRELEASE}_READ=\"${WORKDIR}/$(eval_var ${READ_VAR})\""`;
			PLUGIN_WRITE=`echo $(eval_var ${READ_VAR}) | perl -0p -e 's|^custom/||' | perl -0p -e 's|^configure/||'`
			eval `echo "CUSTOMIZE_${MODE_UPPERCASE}_PHP${PHP2_SHORTRELEASE}_WRITE=\"${PLUGIN_PATH}/${PLUGIN_WRITE}\""`;
		fi
	fi
}

####################################################

listConfigsJSON(){
	initConfigsJSON;
	init_customize_write;
	echo "{";
	NUM_OF_SECTIONS=`echo ${AVAIL_CONFIGS} | wc -w`
	CUR_SECTION=0;
	for section in ${AVAIL_CONFIGS}; do {
		CUR_SECTION=`expr ${CUR_SECTION} + 1`;
		UPPERCASE_SECTION=`echo $section | tr "[a-z]" "[A-Z]"`
		SECTION_DESC=CUSTOMIZE_${UPPERCASE_SECTION}_DESC;
		SECTION_READ=CUSTOMIZE_${UPPERCASE_SECTION}_READ;
		SECTION_WRITE=CUSTOMIZE_${UPPERCASE_SECTION}_WRITE;
		FULL_WRITE_PATH="$(eval_var ${SECTION_WRITE})"
		DIR_OF_THE_PATH="`dirname ${FULL_WRITE_PATH}`"
		if [ ! -d ${DIR_OF_THE_PATH} ]; then
			mkdir -p ${DIR_OF_THE_PATH}
		fi
		printf "\t\"${section}\": {\n"
		printf "\t\t\"description\": \"$(eval_var ${SECTION_DESC})\",\n"
		printf "\t\t\"read\": \"$(eval_var ${SECTION_READ})\",\n"
		printf "\t\t\"write\": \"${FULL_WRITE_PATH}\"\n"
		if [ ${CUR_SECTION} -ne ${NUM_OF_SECTIONS} ]; then
			printf "\t},\n"
		else
			printf "\t}\n"
		fi
	};
	done;
	echo "}";
	if [ "`grep -c cb_plugin /etc/passwd`" = "0" ]; then
		chown -R admin:admin /usr/local/directadmin/plugins/custombuild/configure
	else
		chown -R cb_plugin:cb_plugin /usr/local/directadmin/plugins/custombuild/configure
	fi
	chmod -R 700 /usr/local/directadmin/plugins/custombuild/configure
}

####################################################

showFile(){
	if [ "$1" = "options" ]; then
		cat ${WORKDIR}/options.conf
	elif [ "$1" = "lockfile" ]; then
		if [ -e ${WORKDIR}/.custombuild ]; then
			cat ${WORKDIR}/.custombuild
		else
			echo "0"
		fi
	fi
}

####################################################

showComponentConfig(){
	initConfigsJSON;
	if [ -z $1 ]; then
		echo "Unable to find component config, because of no argument given."
		return;
	fi
	UPPERCASE_SECTION=`echo $1 | tr "[a-z]" "[A-Z]"`
	SECTION_READ=CUSTOMIZE_${UPPERCASE_SECTION}_READ;
	cat $(eval_var ${SECTION_READ})
}

####################################################

removeComponentConfig(){
	initConfigsJSON;
	if [ -z $1 ]; then
		echo "Unable to find component config, because of no argument given."
		return;
	fi
	UPPERCASE_SECTION=`echo $1 | tr "[a-z]" "[A-Z]"`
	SECTION_READ=CUSTOMIZE_${UPPERCASE_SECTION}_READ;
	PATH_TO_THE_FILE="$(eval_var ${SECTION_READ})"
	COUNT=`echo ${PATH_TO_THE_FILE} | grep -c "${WORKDIR}/custom/"`
	if [ "${COUNT}" = "1" ]; then
		rm -f ${PATH_TO_THE_FILE};
	else
		echo "File ${PATH_TO_THE_FILE} is not a customized configuration file."
	fi
}

####################################################

preCheck() {
	checkFile /usr/bin/patch
	checkFile /usr/bin/gcc
}


####################################################

addNginxToAccess() {
	COUNT=`grep -m1 -c "^access" /etc/group`
	# Check for nginx user in access group
	if [ "${COUNT}" -gt 0 ]; then
		COUNT=`grep -m1 "^access" /etc/group | grep -c nginx`
		if [ "${COUNT}" -eq 0 ]; then
			usermod -G access nginx
		fi
	fi
}

####################################################
fpmCheck(){
	ARG=$1;
	CHANGED=0
	COUNT=`grep -m1 -c nginx /usr/local/php${ARG}/etc/php-fpm.conf`
	CHOWN_USER=${WEBSERVER_OPT}
	if [ "${CHOWN_USER}" = "nginx_apache" ]; then
		CHOWN_USER=apache
	fi
	chown ${CHOWN_USER}:${CHOWN_USER} /usr/local/php${ARG}/sockets
	FPM_SOCK_CHMOD=700
	if [ "${MOD_RUID2_OPT}" = "yes" ]; then
		FPM_SOCK_CHMOD=711
	fi
	chmod ${FPM_SOCK_CHMOD} /usr/local/php${ARG}/sockets
	
	if [ "${WEBSERVER_OPT}" = "nginx" ] && [ "${COUNT}" -eq 0 ]; then
		perl -pi -e 's/apache/nginx/' /usr/local/php${ARG}/etc/php-fpm.conf
		CHANGED=1
	elif [ "${WEBSERVER_OPT}" = "apache" ] || [ "${WEBSERVER_OPT}" = "litespeed" ] || [ "${WEBSERVER_OPT}" = "nginx_apache" ]; then
		if [ "${COUNT}" -gt 0 ]; then
			perl -pi -e 's/nginx/apache/' /usr/local/php${ARG}/etc/php-fpm.conf
			CHANGED=1
		fi
	fi
	
	if [ -d /usr/local/php${ARG}/sockets ]; then
		if [ "${WEBSERVER_OPT}" = "nginx" ]; then
			chown -R nginx:nginx /usr/local/php${ARG}/sockets
		elif [ "${WEBSERVER_OPT}" = "apache" ] || [ "${WEBSERVER_OPT}" = "litespeed" ] || [ "${WEBSERVER_OPT}" = "nginx_apache" ]; then
			chown -R apache:apache /usr/local/php${ARG}/sockets
		fi
	fi
	
	if [ ${CHANGED} -eq 1 ]; then
		control_service php-fpm${ARG} restart
	fi
}

fpmChecks() {
	for php_shortrelease in `echo ${PHP1_SHORTRELEASE_SET}`; do {
		EVAL_CHECK_VAR=HAVE_FPM${php_shortrelease}_CGI
		EVAL_COPY_VAR=PHP${php_shortrelease}_FPM_CONF
		if [ "$(eval_var ${EVAL_CHECK_VAR})" = "yes" ] && [ -d /usr/local/php${php_shortrelease}/sockets ]; then
			cp -f $(eval_var ${EVAL_COPY_VAR}) /usr/local/php${php_shortrelease}/etc/php-fpm.conf
			fpmCheck ${php_shortrelease};
		fi
	};
	done;
	
	if [ "${HAVE_FPM_CGI}" = "yes" ]; then
		if [ "${WEBSERVER_OPT}" = "nginx" ]; then
			perl -pi -e 's/apache/nginx/' /usr/local/directadmin/data/templates/php-fpm.conf
		elif [ "${WEBSERVER_OPT}" = "apache" ] || [ "${WEBSERVER_OPT}" = "litespeed" ] || [ "${WEBSERVER_OPT}" = "nginx_apache" ]; then
			perl -pi -e 's/nginx/apache/' /usr/local/directadmin/data/templates/php-fpm.conf
		fi
	fi
}

dovecotChecks(){
	if [ -e /etc/dovecot.conf ]; then
		COUNT=`grep -m1 -c '/etc/httpd/conf/' /etc/dovecot.conf`
		if [ "${WEBSERVER_OPT}" = "nginx" ] && [ ${COUNT} -gt 0 ]; then
				perl -pi -e 's#/etc/httpd/conf/#/etc/nginx/#' /etc/dovecot.conf
			COUNT2=`grep -m1 -c '/etc/nginx/' /etc/dovecot.conf`
			if [ ${COUNT2} -gt 0 ]; then
				control_service dovecot restart
			fi
		elif [ "${WEBSERVER_OPT}" = "apache" ] || [ "${WEBSERVER_OPT}" = "litespeed" ] || [ "${WEBSERVER_OPT}" = "nginx_apache" ]; then
			if [ ${COUNT} -eq 0 ]; then
				perl -pi -e 's#/etc/nginx/#/etc/httpd/conf/#' /etc/dovecot.conf
				COUNT2=`grep -m1 -c '/etc/httpd/conf/' /etc/dovecot.conf`
				if [ ${COUNT2} -gt 0 ]; then
					control_service dovecot restart
				fi
			fi
		fi
	fi
}

####################################################

SKIP_WEBAPPS_SECTION=0;
skip_webapps_toggle(){
	SKIP_WEBAPPS_SECTION=1;
}
case "$1" in
	"") skip_webapps_toggle ;;
	opt_help) skip_webapps_toggle ;;
	set) skip_webapps_toggle ;;
	get_versions_txt) skip_webapps_toggle ;;
	update_script) skip_webapps_toggle ;;
	version) skip_webapps_toggle ;;
	set_fastest) skip_webapps_toggle ;;
	set_fastest_quiet) skip_webapps_toggle ;;
	kill) skip_webapps_toggle ;;
	update_da) skip_webapps_toggle ;;
	list_configs_json) skip_webapps_toggle ;;
	settings_json) skip_webapps_toggle ;;
	get_timezone) skip_webapps_toggle ;;
	custom_config) skip_webapps_toggle ;;
	set_versions_txt) skip_webapps_toggle ;;
	show_component_config) skip_webapps_toggle ;;
	remove_customized_config) skip_webapps_toggle ;;
	show_file) skip_webapps_toggle ;;
	check_options) skip_webapps_toggle ;;
	update) skip_webapps_toggle ;;
	update_data) skip_webapps_toggle ;;
	gen_help_json) skip_webapps_toggle ;;
	versions_json) skip_webapps_toggle ;;
	versions_ajax) skip_webapps_toggle ;;
	versions_nobold) skip_webapps_toggle ;;
	versions) skip_webapps_toggle ;;
	gen_help) skip_webapps_toggle ;;
esac

if [ "${SKIP_WEBAPPS_SECTION}" = "0" ]; then
	# Check for webapps user
	if [ `grep -c -m1 -e "^${APPUSER}:" /etc/passwd` = "0" ]; then
		if [ "${OS}" = "FreeBSD" ]; then
			/usr/sbin/pw groupadd ${APPUSER} 2> /dev/null
			/usr/sbin/pw useradd -g ${APPUSER} -n ${APPUSER} -b ${WWWDIR} -s /sbin/nologin 2> /dev/null
		elif [ -e /etc/debian_version ]; then
			/usr/sbin/adduser --system --group --firstuid 100 --home ${WWWDIR} --no-create-home --disabled-login --force-badname ${APPUSER}
		else
			/usr/sbin/useradd -d ${WWWDIR} -s /bin/false ${APPUSER} 2> /dev/null
		fi
	fi

	####################################################
	if [ "${WEBSERVER_OPT}" = "apache" ] || [ "${WEBSERVER_OPT}" = "litespeed" ] || [ "${WEBSERVER_OPT}" = "nginx_apache" ]; then
		# Do we have httpd-phpmodules.conf line?
		NEWCONFIGS=1
		if [ -e ${HTTPD_CONF} ]; then
			if [ "`grep -m1 -c -e '/etc/httpd/conf/extra/httpd-phpmodules.conf' ${HTTPD_CONF}`" = "0" ]; then
				NEWCONFIGS=0
			fi
		fi
	fi
fi
####################################################

checkCURL() {
	cd ${CWD};
	NUM=1
	if [ -e /usr/local/bin/php ]; then
		NUM=`/usr/local/bin/php -i | grep -m1 'configure' | cut -d\> -f2 | grep -c '\-\-with\-curl'`
	fi
	if [ ${NUM} = "0" ]
	then
		return;
	fi

	if [ -e /usr/local/lib/libcurl.so ]
	then
		if [ ${USER_INPUT} -eq 1 ]; then
			echo -n "cURL is already installed. Would you like to build it again? (y/n) :";
			read yesno;
			echo "";
		else
			if [ "${INPUT_VALUE}" = "d" ]; then
				yesno=y
			else
				yesno=${INPUT_VALUE}
			fi
		fi
		if [ "${yesno}" = "n" ]
		then
			return;
		fi	
	fi
	
	doCURL;	
}

checkLibJpeg() {
	cd ${CWD};
	NUM=1
	if [ -e /usr/local/bin/php ]; then
		NUM=`/usr/local/bin/php -i | grep -m1 'configure' | cut -d\> -f2 | grep -c '\-\-with\-jpeg\-dir'`
	fi
        if [ ${NUM} = "0" ]
        then
                return;
        fi

	if [ -e /usr/local/lib/libjpeg.a ]
	then
		if [ ${FORCE} = 1 ]
		then
			return;
		fi

		if [ ${USER_INPUT} -eq 1 ]; then
			echo -n "LibJPEG is already installed. Would you like to build it again? (y/n) :";
			read yesno;
			echo "";
                else
                        if [ "${INPUT_VALUE}" = "d" ]; then
                                yesno=y
                        else
                                yesno=${INPUT_VALUE}
                        fi
                fi


		if [ "${yesno}" = "n" ]
		then
			return;
		fi
	fi

	doLibJpeg;
}

checkLibz() {

	LIBZ1=/usr/lib/libz.so
	LIBZ2=/usr/lib64/libz.so
	LIBZ3=/lib/x86_64-linux-gnu/libz.so.1
	LIBZ4=/usr/lib/i386-linux-gnu/libz.so
	LIBZ5=/lib/i386-linux-gnu/libz.so.1
	if [ ! -e ${LIBZ1} ] && [ ! -e ${LIBZ2} ] && [ ! -e ${LIBZ3} ] && [ ! -e ${LIBZ4} ] && [ ! -e ${LIBZ5} ]; then
		echo "Cannot find zlib, as installed by package manager (${LIBZ1} or ${LIBZ2} or ${LIBZ3} or ${LIBZ4} or ${LIBZ5})";
		echo "Please install zlib via your package manager";
		echo "";
		
		if [ ${OS} = "FreeBSD" ]; then
			echo "pkg install zlib";
		elif [ -e ${DEBIAN_VERSION} ]; then
			echo "apt-get install zlib1g zlib1g-dev";
		else
			echo "yum install zlib zlib-devel";
		fi
		
		do_exit 0;		
	fi
	
	return;
}

checkLibPng() {
        cd ${CWD};
	NUM=1
	if [ -e /usr/local/bin/php ]; then
		NUM=`/usr/local/bin/php -i | grep -m1 'configure' | cut -d\> -f2 | grep -c '\-\-with\-png\-dir'`
	fi
        if [ ${NUM} = "0" ]
        then
                return;
        fi

	checkLibz;

        if [ -e /usr/local/lib/libpng.a ]
        then
		if [ ${FORCE} = 1 ]
		then
			return;
		fi
		
		if [ ${USER_INPUT} -eq 1 ]; then
	                echo -n "LibPng is already installed. Would you like to build it again? (y/n) :";
        	        read yesno;
                	echo "";
                else
                        if [ "${INPUT_VALUE}" = "d" ]; then
                                yesno=y
                        else
                                yesno=${INPUT_VALUE}
                        fi
                fi

                if [ "${yesno}" = "n" ]
                then
                        return;
                fi
        fi

        doLibPng;
}

checkMCrypt() {
        cd ${CWD};
	NUM=1
	if [ -e /usr/local/bin/php ]; then
		NUM=`/usr/local/bin/php -i | grep -m1 'configure' | cut -d\> -f2 | grep -c '\-\-with\-mcrypt'`
	fi
        if [ ${NUM} = "0" ]
        then
        	return;
        fi

	if [ -e /usr/local/lib/libmcrypt.so ]
	then

		if [ ${USER_INPUT} -eq 1 ]; then
			echo -n "mCrypt is already installed. Would you like to build it again? (y/n) :";
			read yesno;
			echo "";
                else
                        if [ "${INPUT_VALUE}" = "d" ]; then
                                yesno=y
                        else
                                yesno=${INPUT_VALUE}
                        fi
                fi
		
		if [ "${yesno}" = "n" ]
		then
			return;
		fi	
	fi

        doMCrypt;
}

checkMHash() {
        cd ${CWD};
	NUM=1
	if [ -e /usr/local/bin/php ]; then
		NUM=`/usr/local/bin/php -i | grep -m1 'configure' | cut -d\> -f2 | grep -c '\-\-with\-mhash'`
	fi
        if [ ${NUM} = "0" ]
        then
                return;
        fi

        if [ -e /usr/local/lib/libmhash.so ]
        then
		if [ ${USER_INPUT} -eq 1 ]; then
	                echo -n "mHash is already installed. Would you like to build it again? (y/n) :";
        	        read yesno;
                	echo "";
                else
                        if [ "${INPUT_VALUE}" = "d" ]; then
                                yesno=y
                        else
                                yesno=${INPUT_VALUE}
                        fi
                fi

                if [ "${yesno}" = "n" ]
                then
                        return;
                fi
        fi

        doMHash;
}

####################################################

checkFreeType() {
        cd ${CWD};
	NUM=1
	if [ -e /usr/local/bin/php ]; then
		NUM=`/usr/local/bin/php -i | grep -m1 'configure' | cut -d\> -f2 | grep -c '\-\-with\-freetype'`
	fi
        if [ ${NUM} = "0" ]
        then
                return;
        fi

        if [ -e /usr/local/lib/libfreetype.so ]
        then
		if [ ${USER_INPUT} -eq 1 ]; then
	                echo -n "FreeType is already installed. Would you like to build it again? (y/n) :";
        	        read yesno;
                	echo "";
                else
                        if [ "${INPUT_VALUE}" = "d" ]; then
                                yesno=y
                        else
                                yesno=${INPUT_VALUE}
                        fi
                fi

                if [ "${yesno}" = "n" ]
                then
                        return;
                fi
        fi

        doFreeType;
}

####################################################

checkIconv() {
        cd ${CWD};
	NUM=1
	if [ -e /usr/local/bin/php ]; then
		NUM=`/usr/local/bin/php -i | grep -m1 'configure' | cut -d\> -f2 | grep -c '\-\-with\-iconv'`
	fi
        if [ ${NUM} = "0" ]
        then
                return;
        fi

        if [ -e /usr/local/lib/libiconv.so ]
        then
		if [ ${USER_INPUT} -eq 1 ]; then
	                echo -n "iconv is already installed. Would you like to build it again? (y/n) :";
        	        read yesno;
                	echo "";
                else
                        if [ "${INPUT_VALUE}" = "d" ]; then
                                yesno=y
                        else
                                yesno=${INPUT_VALUE}
                        fi
                fi

                if [ "${yesno}" = "n" ]
                then
                        return;
                fi
        fi

        doIconv;
}

####################################################

ensure_webapps_logrotate()
{
	if [ ${OS} = "FreeBSD" ]; then
		#this is left to the newsyslog.sh script
		return;
	fi
	
	cd ${CWD};
	
	WL=/etc/logrotate.d/webapps
	
	if [ -s ${WL} ]; then
		return;
	fi
	
	getFile webapps.logrotate webapps_logrotate
	
	CWL=${CWD}/webapps.logrotate
	if [ ! -s ${CWL} ]; then
		echo "Download of $CWL failed";
		return;
	fi
	
	cp -f ${CWL} ${WL}
	chmod 644 ${WL}	
}

####################################################

dophpMyAdmin(){
	if [ "${PHPMYADMIN_OPT}" != "yes" ]; then
		echo "You cannot install phpMyAdmin, because you do not have it set in options.conf file.";
		exit 1;
	fi

	ensure_webapps_logrotate;

	cd ${CWD};	
	if [ ! -d ${WWWDIR} ]; then
		echo "${WWWDIR} does not exist."
		do_exit 0
	fi

	initMySQL;

	if [ "`version_cmp ${PHPMYADMIN_VER} 4.1.0 'pma ver check'`" -ge 0 ]; then
		#4.1.0 need php 5.3.. which we have.. and mysql 5.5+
		
		if [ ! -s "$MYSQL_BIN" ]; then
			echo "${boldon}phpMyAdmin requires mysqld.  Cannot find $MYSQL_BIN${boldoff}";
			return;
		fi
		
		MYSQLV="`$MYSQL_BIN --version | awk '{ print $5 }' | cut -d , -f1 | cut -d- -f1`"
		
		if [ "`version_cmp ${MYSQLV} 5.5.0 'pma mysql check'`" -lt 0 ]; then
			echo "${boldon}phpMyAdmin ${PHPMYADMIN_VER} requires ${MYSQLNAME} 5.5+, but ${MYSQLV} is installed${boldoff}";
			echo "${boldon}Dropping phpMyAdmin version down to 4.0.10.4${boldoff}";
			
			PHPMYADMIN_VER=4.0.10.4-all-languages
			#prevent md5 lookup
			PHPMYADMIN_VER_OPT=old
		fi
	fi


	TARFILE=${WORKDIR}/phpMyAdmin-${PHPMYADMIN_VER}.tar.gz
	REALPATH=${WWWDIR}/phpMyAdmin-${PHPMYADMIN_VER}
	ALIASPATH=${WWWDIR}/phpMyAdmin
	CONFIG=${REALPATH}/config.inc.php
	WEBFILE=${WEBPATH_SERVICES}/all/phpMyAdmin/phpMyAdmin-${PHPMYADMIN_VER}.tar.gz

	if [ ! -s ${TARFILE} ]; then
	        ${WGET} ${WGET_CONNECT_OPTIONS} -O ${TARFILE} ${WEBFILE}
	fi

	if [ ! -s ${TARFILE} ]; then
		echo "The phpMyAdmin package cannot be found. Please ensure that the paths are correct";
		do_exit 0;
	fi

	PMA_NAME="phpmyadmin${PHPMYADMIN_VER_OPT}"

	M=`checkMD5 $TARFILE ${PMA_NAME}`
	if [ "$M" != "0" ]; then
		echo "";
		echo "${boldon}*** MD5 Checksum for $TARFILE Failed.  Redownloading...***${boldoff}";
		echo "";
		${WGET} ${WGET_CONNECT_OPTIONS} -O ${TARFILE} ${WEBFILE}
	
	        M=`checkMD5 $TARFILE ${PMA_NAME}`
		if [ "$M" != "0" ]; then
                                echo "";
                                echo "";
                                echo "${boldon}*** MD5 Checksum for $TARFILE failed *again*.***${boldoff}";
                                echo "The md5 checksum value may be incorrect, or a wrong file is being downloaded.";
                                echo "Install continuing with this possibly corrupted file. (it may also be fine)";
                                echo "";
                                echo "";
		fi
	fi

	${TAR} xzf ${TARFILE} --no-same-owner -C ${WWWDIR};

	if [ -e ${PMA_CONFIG} ]; then
		echo "Installing custom PhpMyAdmin Config: ${PMA_CONFIG}";
		cp -f ${PMA_CONFIG} ${REALPATH}/config.inc.php
	else
		cp -f ${REALPATH}/config.sample.inc.php ${REALPATH}/config.inc.php
		perl -pi -e "s#\['host'\] = 'localhost'#\['host'\] = '${MYSQLHOST}'#" ${REALPATH}/config.inc.php
		perl -pi -e "s#\['host'\] = ''#\['host'\] = '${MYSQLHOST}'#" ${REALPATH}/config.inc.php
		perl -pi -e "s#\['auth_type'\] = 'cookie'#\['auth_type'\] = 'http'#" ${REALPATH}/config.inc.php
		perl -pi -e "s#\['extension'\] = 'mysql'#\['extension'\] = 'mysqli'#" ${REALPATH}/config.inc.php
	fi

	if [ -d ${PMA_THEMES} ]; then
			echo "Installing custom PhpMyAdmin themes: ${PMA_THEMES}";
			cp -Rf ${PMA_THEMES} ${REALPATH}
	fi
		
	rm -f ${ALIASPATH} >/dev/null 2>&1
	ln -s ${REALPATH} ${ALIASPATH}

	if [ ! -d ${REALPATH}/log ]; then
		mkdir -p ${REALPATH}/log
	fi
	
	${CHOWN} -f -R ${APPUSER}:${APPUSER} ${REALPATH};
	${CHOWN} -h ${APPUSER}:${APPUSER} ${ALIASPATH}
	chmod -f 755 ${REALPATH};

	if [ -d ${REALPATH}/scripts ]; then
		chmod 000 ${REALPATH}/scripts
	fi
	
	if [ -d ${REALPATH}/setup ]; then
		chmod 000 ${REALPATH}/setup
	fi
	
	getFile patches/pma_auth_logging.patch phpmyadmin_auth_log_patch
	
	if [ -e patches/pma_auth_logging.patch ]; then
		echo "Patching phpMyAdmin to log failed authentications for BFM..."
	        cd ${REALPATH}
	        patch -p0 < ${WORKDIR}/patches/pma_auth_logging.patch
	fi
	
	if [ -d ${REALPATH}/log ]; then
		if [ "${PHP1_MODE_OPT}" = "mod_php" ] && [ "${MOD_RUID2_OPT}" = "no" ]; then
			chown -R apache:apache ${REALPATH}/log
		fi
	fi
	
	echo "phpMyAdmin ${PHPMYADMIN_VER} installation is done."
	
	cd ${CWD}
}

####################################################

doSquirrelmail(){
	if [ "${SQUIRRELMAIL_OPT}" != "yes" ]; then
		echo "You cannot install Squirrelmail, because you do not have it set in options.conf file.";
		exit 1;
	fi
	
	ensure_webapps_logrotate;

        cd ${CWD};
	if [ ! -d ${WWWDIR} ]; then
		echo "${WWWDIR} does not exist."
		do_exit 0
	fi

	TARFILE=${WORKDIR}/squirrelmail-${SQUIRRELMAIL_VER}.tar.gz
	LOCALEFILE=${WORKDIR}/all_locales-${SQUIRRELMAIL_LOCALE_VER}.tar.gz
	LOGGERFILE=${WORKDIR}/squirrel_logger-${SQUIRRELMAIL_LOGGER_VER}.tar.gz
	REALPATH=${WWWDIR}/squirrelmail-${SQUIRRELMAIL_VER}
	ALIASPATH=${WWWDIR}/squirrelmail
	CONFIG=${REALPATH}/config/config.php

	if [ ! -s ${TARFILE} ]; then
	        ${WGET} ${WGET_CONNECT_OPTIONS} -O ${TARFILE} ${WEBPATH_SERVICES}/all/squirrelmail-${SQUIRRELMAIL_VER}.tar.gz
	fi

	if [ ! -s ${TARFILE} ]; then
                echo "The squirrelmail package cannot be found. Please ensure that the paths are correct";
                do_exit 0;
	fi

	if [ ! -s ${LOCALEFILE} ]; then
		${WGET} ${WGET_CONNECT_OPTIONS} -O ${LOCALEFILE} ${WEBPATH_SERVICES}/all/squirrelmail/locales/all_locales-${SQUIRRELMAIL_LOCALE_VER}.tar.gz
	fi
	
	if [ ! -s ${LOGGERFILE} ]; then
		${WGET} ${WGET_CONNECT_OPTIONS} -O ${LOGGERFILE} ${WEBPATH_SERVICES}/all/squirrelmail/squirrel_logger/squirrel_logger-${SQUIRRELMAIL_LOGGER_VER}.tar.gz
	fi

        M=`checkMD5 $TARFILE ${SQUIRRELMAIL_VER_NAME}`
        if [ "$M" != "0" ]; then
                echo "";
                echo "${boldon}*** MD5 Checksum for $TARFILE Failed.  Redownloading...***${boldoff}";
                echo "";
		${WGET} ${WGET_CONNECT_OPTIONS} -O ${TARFILE} ${WEBPATH_SERVICES}/all/squirrelmail-${SQUIRRELMAIL_VER}.tar.gz

                M=`checkMD5 $TARFILE ${SQUIRRELMAIL_VER_NAME}`
                if [ "$M" != "0" ]; then
                                echo "";
                                echo "";
                                echo "${boldon}*** MD5 Checksum for $TARFILE failed *again*.***${boldoff}";
                                echo "The md5 checksum value may be incorrect, or a wrong file is being downloaded.";
                                echo "Install continuing with this possibly corrupted file. (it may also be fine)";
                                echo "";
                                echo "";
                fi
        fi

	M=`checkMD5 ${LOCALEFILE} squirrelmail_locale`
	if [ "$M" != "0" ]; then
		echo "${boldon}*** MD5 Checksum for $LOCALEFILE Failed.  Redownloading...***${boldoff}";
		${WGET} ${WGET_CONNECT_OPTIONS} -O ${LOCALEFILE} ${WEBPATH_SERVICES}/all/squirrelmail/locales/all_locales-${SQUIRRELMAIL_LOCALE_VER}.tar.gz
	fi
	
	M=`checkMD5 ${LOGGERFILE} squirrel_logger`
	if [ "$M" != "0" ]; then
		echo "${boldon}*** MD5 Checksum for ${LOGGERFILE} Failed.  Redownloading...***${boldoff}";
		${WGET} ${WGET_CONNECT_OPTIONS} -O ${LOGGERFILE} ${WEBPATH_SERVICES}/all/squirrelmail/squirrel_logger/squirrel_logger-${SQUIRRELMAIL_LOGGER_VER}.tar.gz
	fi

	#Extract the file
	${TAR} xzf ${TARFILE} --no-same-owner -C ${WWWDIR}

	#install locales
	${TAR} xzf ${LOCALEFILE} --no-same-owner -C ${REALPATH}
	
	#install logger
	${TAR} xzf ${LOGGERFILE} --no-same-owner -C ${REALPATH}/plugins

	#this bit is to copy all of the preious setup to the new setup
	if [ -e ${ALIASPATH} ]; then
	   cp -fR ${ALIASPATH}/data ${REALPATH}
	fi

	#link it from a fake path:
	/bin/rm -f ${ALIASPATH}
	/bin/ln -sf squirrelmail-${SQUIRRELMAIL_VER} ${ALIASPATH}
	${CHOWN} -h ${APPUSER}:${APPUSER} ${ALIASPATH}

	if [ -d ${REALPATH}/plugins/squirrel_logger ]; then
		if [ ! -e ${REALPATH}/plugins/squirrel_logger/config.php ] && [ -e ${REALPATH}/plugins/squirrel_logger/config_example.php ]; then
			echo "Setting up SquirrelMail logger configuration file"
			cp -fp ${REALPATH}/plugins/squirrel_logger/config_example.php ${REALPATH}/plugins/squirrel_logger/config.php 
		fi
	fi
	
	COUNT_LOGGER=0;
	if [ -e ${CONFIG} ]; then
		COUNT_LOGGER="`grep -c squirrel_logger ${CONFIG}`"
	fi

	#install the proper config:
	if [ -e ${SQUIRREL_CONFIG} ]; then
		echo "Installing custom SquirrelMail Config: ${SQUIRREL_CONFIG}";
		/bin/cp -f ${SQUIRREL_CONFIG} ${CONFIG}
	else
		echo "Setting up SquirrelMail Config"
		/bin/cp -f ${REALPATH}/config/config_default.php ${CONFIG}

		#IMAP folders
		if [ "${WEBAPPS_INBOX_PREFIX_OPT}" = "no" ]; then
			/usr/bin/perl -pi -e "s/\$trash_folder = 'INBOX.Trash'/\$trash_folder = 'Trash'/" ${CONFIG}
			/usr/bin/perl -pi -e "s/\$sent_folder  = 'INBOX.Sent'/\$sent_folder  = 'Sent'/" ${CONFIG}
			/usr/bin/perl -pi -e "s/\$draft_folder = 'INBOX.Drafts'/\$draft_folder = 'Drafts'/" ${CONFIG}
		fi

		/usr/bin/perl -pi -e 's/\$force_username_lowercase = false/\$force_username_lowercase = true/' ${CONFIG}
		/usr/bin/perl -pi -e "s/\'example.com\';/\\$\_SERVER\[\'HTTP_HOST\'\];\nwhile \(sizeof\(explode\(\'\.\', \\$\domain\)\) \> 2) {\n\t\\$\domain = substr(\\$\domain, strpos\(\\$\domain, \'\.\'\) \+ 1\);\n\}/" ${CONFIG}
		/usr/bin/perl -pi -e 's/\$show_contain_subfolders_option = false/\$show_contain_subfolders_option = true/' ${CONFIG}

		/usr/bin/perl -pi -e 's/\$allow_thread_sort = false/\$allow_thread_sort = true/' ${CONFIG}
		/usr/bin/perl -pi -e 's/\$allow_server_sort = false/\$allow_server_sort = true/' ${CONFIG}

		/usr/bin/perl -pi -e 's#/var/local/squirrelmail/data/#/var/www/html/squirrelmail/data/#' ${CONFIG}
		/usr/bin/perl -pi -e 's#/var/local/squirrelmail/attach/#/var/www/html/squirrelmail/data/#' ${CONFIG}

		#we want it to use port 587 and use smtp auth.
		/usr/bin/perl -pi -e 's/\$smtpPort = 25/\$smtpPort = 587/' ${CONFIG}
		/usr/bin/perl -pi -e "s#\$smtp_auth_mech = \'none\'#\$smtp_auth_mech = \'login\'#" ${CONFIG}

		#enable the plugins
		/usr/bin/perl -pi -e "s/Add list of enabled plugins here/Add list of enabled plugins here\n\\$\plugins\[0\] = \'spamcop\';\n\\$\plugins\[1\] = \'filters\';\n\\$\plugins\[2\] = \'squirrel_logger\';\n\\$\plugins\[3\] = \'squirrelspell\';/" ${CONFIG}
	fi

	/usr/bin/perl -pi -e 's/\$allow_charset_search = true;/\$allow_charset_search = false;/' ${CONFIG}

	#set the permissions:
	/bin/chmod -R 755 ${REALPATH}
	${CHOWN} -R ${APPUSER}:${APPUSER} ${REALPATH}

	if [ "${PHP1_MODE_OPT}" = "mod_php" ] && [ "${MOD_RUID2_OPT}" = "no" ]; then
		/bin/chmod -R 770 ${REALPATH}/data
		${CHOWN} -R apache:${APPUSER} ${REALPATH}/data
	fi
	
	echo "SquirrelMail ${SQUIRRELMAIL_VER} installation is done."
}

####################################################

doroundcube(){
	if [ "${ROUNDCUBE_OPT}" != "yes" ]; then
		echo "You cannot install RoundCube webmail, because you do not have it set in options.conf file.";
		exit 1;
	fi
	
	ensure_webapps_logrotate;

	initMySQL;
	
	cd ${CWD};
	TARFILE=${WORKDIR}/roundcubemail-${ROUNDCUBE_VER}.tar.gz
	REALPATH=${WWWDIR}/roundcubemail-${ROUNDCUBE_VER}
	ALIASPATH=${WWWDIR}/roundcube
	
	if [ ${ROUNDCUBE_MAJOR_VER} -ne 0 ]; then
		if [ -s ${ROUNDCUBE_CONFIG_OLD} ] || [ -s ${ROUNDCUBE_CONFIG_DB_OLD} ]; then
			echo "Please remove RoundCube 0.x custom configuration files if you would like to upgrade it. The following files should not be used anymore: ${ROUNDCUBE_CONFIG_OLD}, ${ROUNDCUBE_CONFIG_DB_OLD}. Please use config.inc.php as a new custom RoundCube configuration file."
			return;
		fi
	fi
	
	DA_HOSTNAME=`hostname`
	HTTPPATH=${WEBPATH_SERVICES}/all/roundcube

	# variables for the database:
	ROUNDCUBE_DB=da_roundcube
	ROUNDCUBE_DB_USER=da_roundcube
	ROUNDCUBE_DB_PASS=`perl -le'print map+(A..Z,a..z,0..9)[rand 62],0..15'`;
	ROUNDCUBE_DES_KEY=`perl -le'print map+(A..Z,a..z,0..9)[rand 62],0..23'`;
	
	if [ ! -s ${TARFILE} ]; then
		${WGET} ${WGET_CONNECT_OPTIONS} -O ${TARFILE} ${HTTPPATH}/roundcubemail-${ROUNDCUBE_VER}.tar.gz
	fi

	if [ ! -s ${TARFILE} ]; then
		echo "Cannot download roundcubemail-${ROUNDCUBE_VER}"
		do_exit 0
	fi

        M=`checkMD5 $TARFILE roundcube`
        if [ "$M" != "0" ]; then
                echo "";
                echo "${boldon}*** MD5 Checksum for $TARFILE Failed.  Redownloading...***${boldoff}";
                echo "";
				${WGET} ${WGET_CONNECT_OPTIONS} -O ${TARFILE} ${HTTPPATH}/roundcubemail-${ROUNDCUBE_VER}.tar.gz

                M=`checkMD5 $TARFILE roundcube`
                if [ "$M" != "0" ]; then
                                echo "";
                                echo "";
                                echo "${boldon}*** MD5 Checksum for $TARFILE failed *again*.***${boldoff}";
                                echo "The md5 checksum value may be incorrect, or a wrong file is being downloaded.";
                                echo "Install continuing with this possibly corrupted file. (it may also be fine)";
                                echo "";
                                echo "";
                fi
        fi

	#Extract the file
	${TAR} xzf ${TARFILE} --no-same-owner -C ${WWWDIR}

	if [ ! -e ${REALPATH} ]; then
		echo "Directory ${REALPATH} does not exist"
		exit 1
	fi

	if [ -e ${ALIASPATH} ]; then
		if [ -d ${ALIASPATH}/logs ]; then
			cp -fR ${ALIASPATH}/logs ${REALPATH} >/dev/null 2>&1
		fi
		if [ -d ${ALIASPATH}/temp ]; then
			cp -fR ${ALIASPATH}/temp ${REALPATH} >/dev/null 2>&1
		fi
	fi

	#link it from a fake path:
	/bin/rm -f ${ALIASPATH}
	/bin/ln -sf roundcubemail-${ROUNDCUBE_VER} ${ALIASPATH}
	${CHOWN} -h ${APPUSER}:${APPUSER} ${ALIASPATH}
	cd ${REALPATH}

	if [ ${ROUNDCUBE_MAJOR_VER} -eq 0 ]; then
		EDIT_CONFIG=main.inc.php
		CONFIG_DIST=main.inc.php.dist
		EDIT_DB=db.inc.php
		DB_DIST=db.inc.php.dist
	else
		EDIT_CONFIG=config.inc.php
		CONFIG_DIST=config.inc.php.sample
		EDIT_DB=${EDIT_CONFIG}
		DB_DIST=${CONFIG_DIST}
	fi
	
	#insert data to mysql and create database/user for roundcube:
	if [ ! -d $MYSQL_DATA/${ROUNDCUBE_DB} ]; then
		if [ -d SQL ]; then
			echo "Inserting data to mysql and creating database/user for roundcube..."
			mysql -e "CREATE DATABASE ${ROUNDCUBE_DB};" --host=${MYSQLHOST} --user=${MYSQLUSER} --password=${MYSQLPASSWORD} 2>/dev/null
			mysql -e "GRANT SELECT,INSERT,UPDATE,DELETE,CREATE,DROP,ALTER,LOCK TABLES,INDEX ON ${ROUNDCUBE_DB}.* TO '${ROUNDCUBE_DB_USER}'@'${MYSQL_ACCESS_HOST}' IDENTIFIED BY '${ROUNDCUBE_DB_PASS}';" --host=${MYSQLHOST} --user=${MYSQLUSER} --password=${MYSQLPASSWORD} 2>/dev/null
			mysql -e "use ${ROUNDCUBE_DB}; source SQL/mysql.initial.sql;" --user=${ROUNDCUBE_DB_USER} --password=${ROUNDCUBE_DB_PASS} 2>/dev/null
			echo "Database created, ${ROUNDCUBE_DB_USER} password is ${ROUNDCUBE_DB_PASS}"
		else
			echo "Cannot find SQL directory in roundcubemail-${ROUNDCUBE_VER}"
			do_exit 0
		fi
	else
		if [ -e ${ROUNDCUBE_CONFIG_DB} ]; then
			COUNT_MYSQL=`grep -m1 -c 'mysql://' ${ROUNDCUBE_CONFIG_DB}`
			if [ ${COUNT_MYSQL} -gt 0 ]; then
				PART1="`grep -m1 "\$config\['db_dsnw'\]" ${ROUNDCUBE_CONFIG_DB} | awk '{print $3}' | cut -d\@ -f1 | cut -d'/' -f3`"
				ROUNDCUBE_DB_USER="`echo ${PART1} | cut -d\: -f1`"
				ROUNDCUBE_DB_PASS="`echo ${PART1} | cut -d\: -f2`"
				PART2="`grep -m1 "\$config\['db_dsnw'\]" ${ROUNDCUBE_CONFIG_DB} | awk '{print $3}' | cut -d\@ -f2 | cut -d\' -f1`"
				MYSQL_ACCESS_HOST="`echo ${PART2} | cut -d'/' -f1`"
				ROUNDCUBE_DB="`echo ${PART2} | cut -d'/' -f2`"
			fi
		fi
		mysql -e "SET PASSWORD FOR '${ROUNDCUBE_DB_USER}'@'${MYSQL_ACCESS_HOST}' = PASSWORD('${ROUNDCUBE_DB_PASS}');" --host=${MYSQLHOST} --user=${MYSQLUSER} --password=${MYSQLPASSWORD} 2>/dev/null
		mysql -e "GRANT SELECT,INSERT,UPDATE,DELETE,CREATE,DROP,ALTER,LOCK TABLES,INDEX ON ${ROUNDCUBE_DB}.* TO '${ROUNDCUBE_DB_USER}'@'${MYSQL_ACCESS_HOST}' IDENTIFIED BY '${ROUNDCUBE_DB_PASS}';" --host=${MYSQLHOST} --user=${MYSQLUSER} --password=${MYSQLPASSWORD} 2>/dev/null
	fi
	
	#Cleanup config
	rm -f ${REALPATH}/config/${EDIT_CONFIG}
	
	#install the proper config:
	if [ -d ../roundcube ]; then
		
		echo "Editing roundcube configuration..."
		cd ${REALPATH}/config
		
		if [ -e ${ROUNDCUBE_CONFIG} ]; then
			echo "Installing custom RoundCube Config: ${ROUNDCUBE_CONFIG}";
			cp -f ${ROUNDCUBE_CONFIG} ${EDIT_CONFIG}
		fi
		
		if [ -e ${ROUNDCUBE_CONFIG_DB} ]; then
			if [ ! -e ${EDIT_DB} ]; then
				/bin/cp -f ${ROUNDCUBE_CONFIG_DB} ${EDIT_DB}
			fi
			if [ ${COUNT_MYSQL} -eq 0 ];then
				echo "\$config['db_dsnw'] = 'mysql://${ROUNDCUBE_DB_USER}:${ROUNDCUBE_DB_PASS}@${MYSQLHOST}/${ROUNDCUBE_DB}';" >> ${EDIT_DB}
			fi
		else
			if [ ! -e ${EDIT_DB} ]; then
				/bin/cp -f ${DB_DIST} ${EDIT_DB}
				/usr/bin/perl -pi -e "s|mysql://roundcube:pass\@localhost/roundcubemail|mysql://${ROUNDCUBE_DB_USER}:${ROUNDCUBE_DB_PASS}\@${MYSQLHOST}/${ROUNDCUBE_DB}|" ${EDIT_DB} > /dev/null
				/usr/bin/perl -pi -e "s/\'mdb2\'/\'db\'/" ${EDIT_DB} > /dev/null
			fi
		fi
		
		/usr/bin/perl -pi -e "s|rcmail-\!24ByteDESkey\*Str|${ROUNDCUBE_DES_KEY}|" ${EDIT_CONFIG}
		if [ ! -e ${ROUNDCUBE_CONFIG} ]; then
			if [ ${ROUNDCUBE_MAJOR_VER} -eq 0 ]; then
				#This options does not exist anymore from RC 0.6
				#/usr/bin/perl -pi -e "s|\['enable_caching'] = TRUE|\['enable_caching'] = FALSE|" ${EDIT_CONFIG} > /dev/null

				#It's better not use use imap_root/delimiter
				#/usr/bin/perl -pi -e "s|\['imap_root'] = null|\['imap_root'] = 'INBOX.'|" ${EDIT_CONFIG} > /dev/null
				#/usr/bin/perl -pi -e "s|\['imap_delimiter'] = null|\['imap_delimiter'] = '.'|" ${EDIT_CONFIG} > /dev/null

				/usr/bin/perl -pi -e "s|\['default_host'] = ''|\['default_host'] = 'localhost'|" ${EDIT_CONFIG} > /dev/null

				#IMAP folders
				if [ "${WEBAPPS_INBOX_PREFIX_OPT}" = "yes" ]; then
					/usr/bin/perl -pi -e "s|\['drafts_mbox'] = 'Drafts'|\['drafts_mbox'] = 'INBOX.Drafts'|" ${EDIT_CONFIG} > /dev/null
					/usr/bin/perl -pi -e "s|\['junk_mbox'] = 'Junk'|\['junk_mbox'] = 'INBOX.spam'|" ${EDIT_CONFIG} > /dev/null
					/usr/bin/perl -pi -e "s|\['sent_mbox'] = 'Sent'|\['sent_mbox'] = 'INBOX.Sent'|" ${EDIT_CONFIG} > /dev/null
					/usr/bin/perl -pi -e "s|\['trash_mbox'] = 'Trash'|\['trash_mbox'] = 'INBOX.Trash'|" ${EDIT_CONFIG} > /dev/null
					/usr/bin/perl -pi -e "s|\['default_imap_folders'] = array\('INBOX', 'Drafts', 'Sent', 'Junk', 'Trash'\)|\['default_imap_folders'] = array\('INBOX', 'INBOX.Drafts', 'INBOX.Sent', 'INBOX.spam', 'INBOX.Trash'\)|" ${EDIT_CONFIG} > /dev/null
					/usr/bin/perl -pi -e "s|\['default_folders'] = array\('INBOX', 'Drafts', 'Sent', 'Junk', 'Trash'\)|\['default_folders'] = array\('INBOX', 'INBOX.Drafts', 'INBOX.Sent', 'INBOX.spam', 'INBOX.Trash'\)|" ${EDIT_CONFIG} > /dev/null
				else
					/usr/bin/perl -pi -e "s|\['junk_mbox'] = 'Junk'|\['junk_mbox'] = 'INBOX.spam'|" ${EDIT_CONFIG} > /dev/null
					/usr/bin/perl -pi -e "s|\['default_imap_folders'] = array\('INBOX', 'Drafts', 'Sent', 'Junk', 'Trash'\)|\['default_imap_folders'] = array\('INBOX', 'Drafts', 'Sent', 'INBOX.spam', 'Trash'\)|" ${EDIT_CONFIG} > /dev/null
					/usr/bin/perl -pi -e "s|\['default_folders'] = array\('INBOX', 'Drafts', 'Sent', 'Junk', 'Trash'\)|\['default_folders'] = array\('INBOX', 'Drafts', 'Sent', 'INBOX.spam', 'Trash'\)|" ${EDIT_CONFIG} > /dev/null
				fi
				
				#smtp stuff
				/usr/bin/perl -pi -e "s|\['smtp_port'] = 25|\['smtp_port'] = 587|" ${EDIT_CONFIG} > /dev/null
				/usr/bin/perl -pi -e "s|\['smtp_server'] = ''|\['smtp_server'] = 'localhost'|" ${EDIT_CONFIG} > /dev/null
				/usr/bin/perl -pi -e "s|\['smtp_user'] = ''|\['smtp_user'] = '%u'|" ${EDIT_CONFIG} > /dev/null
				/usr/bin/perl -pi -e "s|\['smtp_pass'] = ''|\['smtp_pass'] = '%p'|" ${EDIT_CONFIG} > /dev/null
				/usr/bin/perl -pi -e "s|\['smtp_auth_type'] = ''|\['smtp_auth_type'] = 'LOGIN'|" ${EDIT_CONFIG} > /dev/null

				/usr/bin/perl -pi -e "s|\['create_default_folders'] = .*;|\['create_default_folders'] = true;|" ${EDIT_CONFIG} > /dev/null
				
				/usr/bin/perl -pi -e "s|\['login_lc'] = 0;|\['login_lc'] = 2;|" ${EDIT_CONFIG} > /dev/null
				/usr/bin/perl -pi -e "s|\['login_autocomplete'] = 0;|\['login_autocomplete'] = 2;|" ${EDIT_CONFIG} > /dev/null
				/usr/bin/perl -pi -e "s|\['quota_zero_as_unlimited'] = false;|\['quota_zero_as_unlimited'] = true;|" ${EDIT_CONFIG} > /dev/null
				/usr/bin/perl -pi -e "s|\['enable_spellcheck'] = true;|\['enable_spellcheck'] = false;|" ${EDIT_CONFIG} > /dev/null
			else				
				#default_host is set to localhost by default in RC 1.0.0, so we don't echo it to the file
				
				#These ones are already in config.inc.php.sample file, so we just use perl-regex to change them
				/usr/bin/perl -pi -e "s|\['smtp_port'] = 25|\['smtp_port'] = 587|" ${EDIT_CONFIG} > /dev/null
				/usr/bin/perl -pi -e "s|\['smtp_server'] = ''|\['smtp_server'] = 'localhost'|" ${EDIT_CONFIG} > /dev/null
				/usr/bin/perl -pi -e "s|\['smtp_user'] = ''|\['smtp_user'] = '%u'|" ${EDIT_CONFIG} > /dev/null
				/usr/bin/perl -pi -e "s|\['smtp_pass'] = ''|\['smtp_pass'] = '%p'|" ${EDIT_CONFIG} > /dev/null
				
				#Changing default options, that are set in defaults.inc.php
				#IMAP folders
				if [ "${WEBAPPS_INBOX_PREFIX_OPT}" = "yes" ]; then
					echo "\$config['drafts_mbox'] = 'INBOX.Drafts';" >> ${EDIT_CONFIG}
					echo "\$config['junk_mbox'] = 'INBOX.spam';" >> ${EDIT_CONFIG}
					echo "\$config['sent_mbox'] = 'INBOX.Sent';" >> ${EDIT_CONFIG}
					echo "\$config['trash_mbox'] = 'INBOX.Trash';" >> ${EDIT_CONFIG}
					echo "\$config['default_folders'] = array('INBOX', 'INBOX.Drafts', 'INBOX.Sent', 'INBOX.spam', 'INBOX.Trash');" >> ${EDIT_CONFIG}
				else
					echo "\$config['junk_mbox'] = 'INBOX.spam';" >> ${EDIT_CONFIG}
					echo "\$config['default_folders'] = array('INBOX', 'Drafts', 'Sent', 'INBOX.spam', 'Trash');" >> ${EDIT_CONFIG}
				fi
				echo "\$config['smtp_auth_type'] = 'LOGIN';" >> ${EDIT_CONFIG}
				echo "\$config['create_default_folders'] = true;" >> ${EDIT_CONFIG}
				echo "\$config['protect_default_folders'] = true;" >> ${EDIT_CONFIG}
				echo "\$config['login_autocomplete'] = 2;" >> ${EDIT_CONFIG}
				echo "\$config['quota_zero_as_unlimited'] = true;" >> ${EDIT_CONFIG}
				echo "\$config['enable_spellcheck'] = false;" >> ${EDIT_CONFIG}
				echo "\$config['email_dns_check'] = true;" >> ${EDIT_CONFIG}
				COUNT="`grep -c '^recipients_max' /etc/exim.conf`"
				if [ "${COUNT}" -gt 0 ]; then
					RECIPIENTS_MAX="`grep -m1 '^recipients_max' /etc/exim.conf | cut -d= -f2 | tr -d ' '`"
					echo "\$config['max_recipients'] = ${RECIPIENTS_MAX};" >> ${EDIT_CONFIG}
					echo "\$config['max_group_members'] = ${RECIPIENTS_MAX};" >> ${EDIT_CONFIG}
				fi
				
				if [ ! -s mime.types ]; then
					if [ "${WEBSERVER_OPT}" = "apache" ] || [ "${WEBSERVER_OPT}" = "litespeed" ] || [ "${WEBSERVER_OPT}" = "nginx_apache" ]; then
						if [ -s /etc/httpd/conf/mime.types ]; then
							COUNT=`grep -m1 -c 'application/java-archive' /etc/httpd/conf/mime.types`
							if [ ${COUNT} -gt 0 ]; then
								cp -f /etc/httpd/conf/mime.types ./mime.types
							fi
						fi
					fi
				fi
				if [ ! -s mime.types ]; then
					${WGET} ${WGET_CONNECT_OPTIONS} -O mime.types http://svn.apache.org/repos/asf/httpd/httpd/trunk/docs/conf/mime.types 2> /dev/null
				fi
				echo "\$config['mime_types'] = '${ALIASPATH}/config/mime.types';" >> ${EDIT_CONFIG}
			fi            

			#password plugin
			if [ -e ${REALPATH}/plugins/password ]; then
				if [ ${ROUNDCUBE_MAJOR_VER} -eq 0 ]; then
					/usr/bin/perl -pi -e "s|\['plugins'] = array\(\);|\['plugins'] = array\('password'\);|" ${EDIT_CONFIG} > /dev/null
				else
					/usr/bin/perl -pi -e "s|\['plugins'] = array\(\n|\['plugins'] = array\(\n    'password',\n|" ${EDIT_CONFIG} > /dev/null
				fi

				cd ${REALPATH}/plugins/password
				if [ ! -e config.inc.php ]; then
					cp config.inc.php.dist config.inc.php
				fi

				/usr/bin/perl -pi -e "s|\['password_driver'] = 'sql'|\['password_driver'] = 'directadmin'|" config.inc.php > /dev/null

				if [ -e $DACONF_FILE ]; then
					DAPORT=`grep -m1 -e '^port=' /usr/local/directadmin/conf/directadmin.conf | cut -d= -f2`
					/usr/bin/perl -pi -e "s|\['password_directadmin_port'] = 2222|\['password_directadmin_port'] = $DAPORT|" config.inc.php > /dev/null

					DASSL=`grep -m1 -e '^SSL=' /usr/local/directadmin/conf/directadmin.conf | cut -d= -f2`
					if [ "$DASSL" -eq 1 ];then
						/usr/bin/perl -pi -e "s|\['password_directadmin_host'] = 'tcp://localhost'|\['password_directadmin_host'] = 'ssl://localhost'|" config.inc.php > /dev/null
					fi
				fi
				cd ${REALPATH}/config
			fi
			
			#pigeonhole plugin
			if [ "${PIGEONHOLE_OPT}" = "yes" ]; then
				if [ -d ${REALPATH}/plugins/managesieve ]; then
					if [ ${ROUNDCUBE_MAJOR_VER} -eq 0 ]; then
						/usr/bin/perl -pi -e "s|\['plugins'] = array\('password'\);|\['plugins'] = array\('password','managesieve'\);|" ${EDIT_CONFIG} > /dev/null
					else
						if [ `grep -m1 -c "'managesieve'" ${EDIT_CONFIG}` -eq 0 ]; then
							/usr/bin/perl -pi -e "s|\['plugins'] = array\(\n|\['plugins'] = array\(\n    'managesieve',\n|" ${EDIT_CONFIG} > /dev/null
						fi
					fi
					
					cd ${REALPATH}/plugins/managesieve
					if [ ! -e config.inc.php ]; then
						cp config.inc.php.dist config.inc.php
					fi
					/usr/bin/perl -pi -e "s|\['managesieve_port'] = null|\['managesieve_port'] = 4190|" config.inc.php > /dev/null
					cd ${REALPATH}/config
				fi
			fi
		fi

		if [ -d ${ROUNDCUBE_PLUGINS} ]; then
			echo "Copying files from ${ROUNDCUBE_PLUGINS} to ${REALPATH}/plugins";
			cp -Rp ${ROUNDCUBE_PLUGINS}/* ${REALPATH}/plugins
		fi
		
		if [ -d ${ROUNDCUBE_SKINS} ]; then
			echo "Copying files from ${ROUNDCUBE_SKINS} to ${REALPATH}/skins";
			cp -Rp ${ROUNDCUBE_SKINS}/* ${REALPATH}/skins
		fi
		
		if [ -d ${ROUNDCUBE_PROGRAM} ]; then
			echo "Copying files from ${ROUNDCUBE_PROGRAM} to ${REALPATH}/program";
			cp -Rp ${ROUNDCUBE_PROGRAM}/* ${REALPATH}/program
		fi

		if [ -e ${ROUNDCUBE_HTACCESS} ]; then
			echo "Copying .htaccess file from ${ROUNDCUBE_HTACCESS} to ${REALPATH}/.htaccess";
			cp -pf ${ROUNDCUBE_HTACCESS} ${REALPATH}/.htaccess
		fi
		
		echo "Roundcube ${ROUNDCUBE_VER} has been installed successfully."
	fi

	#set the permissions:
	${CHOWN} -R ${APPUSER}:${APPUSER} ${REALPATH}
	if [ "${PHP1_MODE_OPT}" = "mod_php" ] && [ "${MOD_RUID2_OPT}" = "no" ]; then
		${CHOWN} -R apache ${REALPATH}/temp ${REALPATH}/logs
		/bin/chmod -R 770 ${REALPATH}/temp
		/bin/chmod -R 770 ${REALPATH}/logs
	fi

	#secure configuration file
	if [ -s ${EDIT_DB} ]; then
		chmod 440 ${EDIT_DB}
		CHOWN_USER=${WEBSERVER_OPT}
		if [ "${CHOWN_USER}" = "nginx_apache" ] || [ "${CHOWN_USER}" = "litespeed" ]; then
			CHOWN_USER=apache
		fi
		chown ${APPUSER}:${CHOWN_USER} ${EDIT_DB}
	fi

	#systems with "system()" in disable_functions need to use no php.ini:
	if [ "`have_php_system`" = "0" ]; then
		perl -pi -e 's#^\#\!/usr/bin/env php#\#\!/usr/local/bin/php \-n#' ${REALPATH}/bin/update.sh
	fi


	#update if needed
	${REALPATH}/bin/update.sh '--version=?'

	#cleanup
	rm -rf ${ALIASPATH}/installer

	RC_HTACCESS=${REALPATH}/.htaccess
	if [ -s "${RC_HTACCESS}" ]; then
		COUNT=`grep -m1 -c upload_max_filesize ${RC_HTACCESS}`
		if [ "${COUNT}" -ge 1 ]; then
			perl -pi -e 's/^php_value\supload_max_filesize/#php_value       upload_max_filesize/' ${RC_HTACCESS}
			perl -pi -e 's/^php_value\spost_max_size/#php_value       post_max_size/' ${RC_HTACCESS}
		fi
	fi
	
	cd ${CWD}
}

####################################################

doExim(){
	if [ "${EXIM_OPT}" != "yes" ]; then
		echo "You cannot update Exim configuration files, because you do not have it set in options.conf file.";
		exit 1;
	fi

	if [ ! -e /usr/include/db.h ]; then
		echo "Cannot find /usr/include/db.h.  Please install db.h";
		if [ -e /etc/debian_version ]; then
			echo "apt-get install libdb4.8-dev libperl-dev libsasl2-dev";
		elif [ ${OS} = "FreeBSD" ]; then
			echo "${PKG_INSTALL} cyrus-sasl2"
		else
			echo "yum install db4-devel cyrus-sasl-devel perl-ExtUtils-Embed";
		fi
		do_exit 0;
	fi

	getFile exim-${EXIM_VER}.tar.gz exim
	getFile exim exim_boot
	getFile exim_freebsd exim_boot_freebsd
	getFile exim_debian exim_boot_debian

	quitIfLocked doExim
	
	cd ${CWD};
	FILE=${CWD}/exim-${EXIM_VER}.tar.gz
	checkFile ${FILE}
	echo "Extracting ...";
	tar xzf ${FILE} --no-same-owner
	echo "Done.";

	cd exim-${EXIM_VER}

	if [ "${EXIM_MAKEFILE}" != "" ]; then
		cp -f ${EXIM_MAKEFILE} Local/Makefile
	else
		${WGET} ${WGET_CONNECT_OPTIONS} -O Local/Makefile ${WEBPATH}/Makefile
	fi

	while
	echo "Trying to make exim..."
	do
	{
		#removed multiple cores: http://www.directadmin.com/forum/showthread.php?p=181950&posted=1#post181950
		#C_INCLUDE_PATH=/usr/kerberos/include make -j ${CPU_CORES}
		C_INCLUDE_PATH=/usr/kerberos/include make

		if [ $? -ne 0 ]
		then
			if [ ${USER_INPUT} -eq 1 ]; then
				echo -n -e "\n*** The make has failed, would you like to try to make again? (y,n): ";
				read yesno;
				echo "";
	                else
        	                if [ "${INPUT_VALUE}" = "d" ]; then
                	                yesno=n
                        	else
                                	yesno=${INPUT_VALUE}
	                        fi
        	        fi

			if [ "${yesno}" = "n" ]
			then
				do_exit 0;
			fi
		else
			break;
		fi
	}
	done
	echo "Make Complete";

	while
	echo "Installing exim...";
	do
	{
		make install

		if [ $? -ne 0 ]
		then
			if [ ${USER_INPUT} -eq 1 ]; then
	                        printf "\n*** The install has failed, would you like to try to install it again? (y,n): \n";
        	                read yesno;
                	        echo "";
			else
                                if [ "${INPUT_VALUE}" = "d" ]; then
                                        yesno=n
                                else
                                        yesno=${INPUT_VALUE}
                                fi
			fi

                        if [ "${yesno}" = "n" ]
                        then
                                do_exit 0;
                        fi
                else
                        break;
                fi
	}
	done;

	echo "Moving exim binary."
	EXIM_BINARY=`ls -t /usr/sbin/exim-${EXIM_VER}-* | head -n1`
	mv -f ${EXIM_BINARY} /usr/sbin/exim
	chmod 4755 /usr/sbin/exim

	if [ ! -e /etc/exim.conf ]; then
		${WGET} ${WGET_CONNECT_OPTIONS} -O /etc/exim.conf $WEBPATH/exim.conf
		${WGET} ${WGET_CONNECT_OPTIONS} -O /etc/exim.pl $WEBPATH/exim.pl
	fi

	if [ "${IPV6}" = "0" ] && [ -e /etc/exim.conf ]; then
		perl -pi -e 's|disable_ipv6=false|disable_ipv6=true|' /etc/exim.conf
	else
		perl -pi -e 's|disable_ipv6=true|disable_ipv6=false|' /etc/exim.conf
	fi
	
	if [ "${SYSTEMD}" = "yes" ]; then
		if [ -e ${INITDDIR}/exim ]; then
			echo "Removing ${INITDDIR}/exim..."
			rm -f ${INITDDIR}/exim
		fi
		echo "Enabling exim in systemd..."
		if [ -e ${CB_CUST_SYSTEMD}/exim.service ]; then
			cp -f ${CB_CUST_SYSTEMD}/exim.service ${SYSTEMDDIR}/exim.service
		else
			cp -f ${CB_SYSTEMD}/exim.service ${SYSTEMDDIR}/exim.service
		fi
		chmod 644 ${SYSTEMDDIR}/exim.service
		systemctl daemon-reload
		systemctl enable exim.service
	else
		if [ ! -e ${INITDDIR}/exim ]; then
			if [ "${OS}" = "FreeBSD" ]; then
				cp ${CWD}/exim_freebsd ${INITDDIR}/exim
				chmod 755 ${INITDDIR}/exim
			elif [ -e /etc/debian_version ]; then
				cp ${CWD}/exim_debian ${INITDDIR}/exim
				chmod 755 ${INITDDIR}/exim
				update-rc.d exim defaults
			else
				cp ${CWD}/exim_boot ${INITDDIR}/exim
				chmod 755 ${INITDDIR}/exim
				/sbin/chkconfig exim on
			fi
		fi
	fi
	
	echo "Exim ${EXIM_VER} Installed.";
	
	if [ "${SPAMASSASSIN_OPT}" = "no" ]; then
		if [ "${SYSTEMD}" = "yes" ] && [ -e ${SYSTEMDDIR}/spamassassin.service ]; then
			echo "Disabling spamassassin in systemd..."	
			systemctl stop spamassassin.service
			systemctl disable spamassassin.service
			systemctl daemon-reload
			rm -f ${SYSTEMDDIR}/spamassassin.service
		fi
	fi
	
	removeLockfile
	cd ${CWD};

	cagefsctl_update;
	
	echo "Restarting exim."
	control_service exim restart
}

####################################################

doEximConf(){
	if [ "${EXIMCONF_OPT}" != "yes" ]; then
		echo "You cannot update Exim configuration files, because you do not have it set in options.conf file.";
		exit 1;
	fi
	${WGET} ${WGET_CONNECT_OPTIONS} -O /etc/exim.conf http://${DOWNLOADSERVER_OPT}/services/exim.conf
	${WGET} ${WGET_CONNECT_OPTIONS} -O /etc/exim.pl http://${DOWNLOADSERVER_OPT}/services/exim.pl
	${WGET} ${WGET_CONNECT_OPTIONS} -O /etc/exim.spamassassin.conf http://${DOWNLOADSERVER_OPT}/services/exim.spamassassin.conf
#Commented out for ClamAV
#	${WGET} ${WGET_CONNECT_OPTIONS} -O /etc/exim.clamav.load.conf http://${DOWNLOADSERVER_OPT}/services/exim.clamav.load.conf
#	${WGET} ${WGET_CONNECT_OPTIONS} -O /etc/exim.clamav.conf http://${DOWNLOADSERVER_OPT}/services/exim.clamav.conf
	chmod 755 /etc/exim.pl
	cd /etc/virtual
	touch blacklist_domains whitelist_from use_rbl_domains bad_sender_hosts blacklist_senders whitelist_domains whitelist_hosts whitelist_senders
	echo 0 > limit
	mkdir -p usage
	chown mail:mail blacklist_domains whitelist_from use_rbl_domains bad_sender_hosts bad_sender_hosts_ip blacklist_senders whitelist_domains whitelist_hosts whitelist_hosts_ip whitelist_senders skip_av_domains skip_rbl_domains limit usage

	if [ "${DOVECOT_OPT}" = "yes" ]; then
		cd ${WORKDIR}
		patch -d/ -p0 < exim.conf.dovecot.patch
		if [ "${PIGEONHOLE_OPT}" = "yes" ]; then
			EXIMCONF21="`grep -c -m1 'SpamBlocker.exim.conf.2.1' /etc/exim.conf`"
			if [ "${EXIMCONF21}" != "0" ]; then
				getFile patches/exim.conf.pigeonhole.patch eximpigeonholepatch
				cd /etc
				patch -p0 < ${WORKDIR}/patches/exim.conf.pigeonhole.patch
			fi
			perl -pi -e 's#transport = virtual_localdelivery#transport = dovecot_lmtp_udp#' /etc/exim.conf
		fi
		cd ${WORKDIR}
	fi

	if [ "${IPV6}" = "0" ] && [ -e /etc/exim.conf ]; then
		perl -pi -e 's|disable_ipv6=false|disable_ipv6=true|' /etc/exim.conf
	else
		perl -pi -e 's|disable_ipv6=true|disable_ipv6=false|' /etc/exim.conf
	fi
	
	if [ "${SPAMASSASSIN_OPT}" = "yes" ]; then
		perl -pi -e 's|#.include_if_exists /etc/exim.spamassassin.conf|.include_if_exists /etc/exim.spamassassin.conf|' /etc/exim.conf
	else
		perl -pi -e 's|^.include_if_exists /etc/exim.spamassassin.conf|#.include_if_exists /etc/exim.spamassassin.conf|' /etc/exim.conf
	fi
	
	if [ "${CLAMAV_EXIM_OPT}" = "yes" ]; then
		perl -pi -e 's|#.include_if_exists /etc/exim.clamav.load.conf|.include_if_exists /etc/exim.clamav.load.conf|' /etc/exim.conf
		perl -pi -e 's|#.include_if_exists /etc/exim.clamav.conf|.include_if_exists /etc/exim.clamav.conf|' /etc/exim.conf
	else
		perl -pi -e 's|^.include_if_exists /etc/exim.clamav.load.conf|#.include_if_exists /etc/exim.clamav.load.conf|' /etc/exim.conf
		perl -pi -e 's|^.include_if_exists /etc/exim.clamav.conf|#.include_if_exists /etc/exim.clamav.conf|' /etc/exim.conf
	fi
	
	echo "Restarting exim."
	control_service exim restart
}

####################################################

compile_mysql_binary()
{
		MYSQLURL=${WEBPATH_SERVICES}/all/mysql
		MYSQLSRC=mysql-${MYSQL_VER}		

		if [ ! -s ${MYSQLSRC}.tar.gz ]; then
			fetch -o ./${MYSQLSRC}.tar.gz ${MYSQLURL}/${MYSQLSRC}.tar.gz
			if [ ! -s ${MYSQLSRC}.tar.gz ]; then
					${WGET} ${WGET_CONNECT_OPTIONS} -O ${MYSQLSRC}.tar.gz ${MYSQLURL}/${MYSQLSRC}.tar.gz
			fi
		fi

		M=`checkMD5 ${MYSQLSRC}.tar.gz mysql${MYSQL_OPT}`
		if [ "$M" != "0" ]; then
			echo "";
			echo "${boldon}*** MD5 Checksum for ${MYSQLSRC}.tar.gz  Failed.  Redownloading...***${boldoff}";
			echo "";
			${WGET} ${WGET_CONNECT_OPTIONS} -O ${MYSQLSRC}.tar.gz ${MYSQLURL}/${MYSQLSRC}.tar.gz

			M=`checkMD5 ${MYSQLSRC}.tar.gz mysql${MYSQL_OPT}`
        	        if [ "$M" != "0" ]; then
                	                echo "";
                        	        echo "";
                                	echo "${boldon}*** MD5 Checksum for ${MYSQLSRC}.tar.gz failed *again*.***${boldoff}";
	                                echo "The md5 checksum value may be incorrect, or a wrong file is being downloaded.";
        	                        echo "Install continuing with this possibly corrupted file. (it may also be fine)";
                	                echo "";
                        	        echo "";
	                fi
		fi
		
		if [ -e ${MYSQLSRC} ]; then
			echo "Found old ${MYSQLSRC}, removing ...";
			rm -rf ${MYSQLSRC};
		fi

		echo "Extracting ${MYSQLSRC}.tar.gz ... ";

		tar xzf ${MYSQLSRC}.tar.gz --no-same-owner
		cd ${MYSQLSRC}

		CFLAGS=-DHAVE_BROKEN_REALPATH
		if [ "${MYSQL_OPT}" = "5.5" ] || [ "${MYSQL_OPT}" = "5.6" ]; then
			if [ "${OS}" != "FreeBSD" ]; then
				if [ ! -e /usr/lib/libaio.so.1 ] && [ ! -e /lib64/libaio.so.1 ] && [ ! -e /lib/libaio.so.1 ] && [ ! -e /lib/x86_64-linux-gnu/libaio.so.1 ] && [ ! -e /lib/i386-linux-gnu/libaio.so.1 ]; then
					echo "Cannot find libaio.so.1.  Please install libaio";
					if [ -e /etc/debian_version ]; then
						echo "apt-get install libaio1 libaio-dev";
					else
						echo "yum install libaio";
					fi
					return;
				fi
			fi
			if [ -e /etc/debian_version ] || [ "${OS}" = "FreeBSD" ]; then
				if [ ! -e /usr/local/cmake ] && [ ! -e /usr/local/bin/cmake ] && [ ! -e /usr/bin/cmake ]; then
					echo "Cannot find cmake, please install it.";
					if [ -e /etc/debian_version ]; then
						echo "apt-get install cmake";
					elif [ "${OS}" = "FreeBSD" ]; then
						echo "${PKG_INSTALL} cmake";
					fi
					
					echo "If your package manager is not working, see: http://help.directadmin.com/item.php?id=494";
					return;
				fi
			fi
			cmake . -DCMAKE_INSTALL_PREFIX=/usr/local/mysql -DWITH_INNOBASE_STORAGE_ENGINE=1 \
					-DWITH_FEDERATED_STORAGE_ENGINE=1 \
					-DWITH_ZLIB=bundled -DWITH_EXTRA_CHARSETS=all
		else
			./configure --prefix=/usr/local/mysql --with-extra-charsets=all --enable-thread-safe-client \
					 --enable-static --enable-assembler --with-named-z-libs=not-used --enable-shared \
					 --with-federated-storage-engine \
					 --with-innodb --with-plugins=innobase
		fi
		echo "Done. Making ${MYSQLSRC}...";
		while
		echo "Trying to make ${MYSQLSRC}..."
		do
		{
				make -j ${CPU_CORES}

				if [ $? -ne 0 ]
				then
						if [ ${USER_INPUT} -eq 1 ]; then
								printf "\n*** The make has failed, would you like to try to make again? (y,n): \n";
								read yesno;
								echo "";
						else
								if [ "${INPUT_VALUE}" = "d" ]; then
										yesno=n
								else
										yesno=${INPUT_VALUE}
								fi
						fi

						if [ "${yesno}" = "n" ]
						then
								do_exit 0;
						fi
				else
						break;
				fi
		}
		done
		echo "Make complete";
		echo "Packaging ${MYSQLSRC}...";
		./scripts/make_binary_distribution

		echo "Moving ${MYSQLSRC}-*.tar.gz to ${WORKDIR} ...";
		mv -f ${MYSQLSRC}-*.tar.gz ..
		cd ..
		echo "Done.";
}

all_databases()
{
	if [ "$MYSQLUSER" = "" ] || [ "$MYSQLPASSWORD" = "" ]; then
		do_exit 1 "all_databases: user or password is blank";
	fi

	initMySQL;
	
	#Assumes that MYSQLUSER and MYSQLPASSWORD are already set.
	CMD="echo 'SHOW DATABASES' | $MYSQL_BIN -u${MYSQLUSER} -p'${MYSQLPASSWORD}'";
	eval $CMD | grep -v '^Database$' | grep -v '^information_schema$' | grep -v '^performance_schema$';
}

doMySQLback(){
    if [ "${MYSQL_BACKUP_OPT}" = "yes" ]; then
	initMySQL;
	MYSQLDUMP=/usr/local/mysql/bin/mysqldump
	if [ ! -e $MYSQLDUMP ]; then
		MYSQLDUMP=/usr/bin/mysqldump
	fi
	if [ ! -e $MYSQLDUMP ]; then
		echo "Cannot find $MYSQLDUMP";
		return;
	fi

	if [ ! -d ${MYSQL_BACKUP_DIR_OPT} ]; then
	  mkdir -p ${MYSQL_BACKUP_DIR_OPT}
	fi
	chmod 700 ${MYSQL_BACKUP_DIR_OPT}

	# sysbk code
	cd ${MYSQL_DATA}
	#for i in `ls -d */ | cut -d/ -f1`; do
	for i in `all_databases`; do
	  echo -ne "       Dumping database $i \n"
	  echo -ne "       Dumping database $i \n" >> ${WORKDIR}/mysql_backups.log
	  $MYSQLDUMP --add-drop-database --databases -l -u${MYSQLUSER} -p${MYSQLPASSWORD} $i > ${MYSQL_BACKUP_DIR_OPT}/$i.sql
	  chmod 660 ${MYSQL_BACKUP_DIR_OPT}/$i.sql
	done
    fi
}

backup_libmysqlclient()
{
	if [ ! -e /etc/debian_version ]; then
		return;
	fi

	LDD=/usr/bin/ldd
	LIB_PATH=/usr/local/mysql/lib
	COUNT=`${LDD} ${DA_BIN} 2>/dev/null | grep -m1 -c libmysqlclient.so`

	if [ "${COUNT}" -gt 0 ]; then
		LIB_NAME=`${LDD} ${DA_BIN} 2>/dev/null | grep -m1 'libmysqlclient.so' | awk '{ print $1; }'`
		CLIENT_LIB=`${LDD} ${DA_BIN} 2>/dev/null | grep -m1 'libmysqlclient.so' | awk '{ print $3; }'`
		if [ -s "${CLIENT_LIB}" ]; then
			echo "Backing up ${CLIENT_LIB} to ${WORKDIR}/${LIB_NAME}"
			cp -fp ${CLIENT_LIB} ${WORKDIR}/${LIB_NAME}
		fi
	fi
}

restore_libmysqlclient()
{
	if [ ! -e /etc/debian_version ]; then
		return;
	fi

	LDD=/usr/bin/ldd
	LIB_PATH=/usr/local/mysql/lib
	COUNT=`${LDD} ${DA_BIN} 2>/dev/null | grep -m1 -c 'libmysqlclient.so'`
		
	if [ "${COUNT}" -gt 0 ]; then
		LIB_NAME=`${LDD} ${DA_BIN} 2>/dev/null | grep -m1 'libmysqlclient.so' | awk '{ print $1; }'`
		CLIENT_LIB=${LIB_PATH}/${LIB_NAME}
		if [ ! -s "${CLIENT_LIB}" ]; then
			if [ ! -s ${WORKDIR}/${LIB_NAME} ]; then
				echo "Cannot find ${WORKDIR}/${LIB_NAME} to restore.";
				echo "DirectAdmin might crash. If needed, see this guide:";
				echo "http://help.directadmin.com/item.php?id=236";
				return;
			fi
		
			cp -fp ${WORKDIR}/${LIB_NAME} ${CLIENT_LIB}
		fi
	fi
}

doMySQL() {
	if [ "${MYSQL_INST_OPT}" != "yes" ] && [ "${MYSQL_INST_OPT}" != "mariadb" ] && [ "${MYSQL_INST_OPT}" != "mysql" ]; then
		echo "You cannot install ${MYSQLNAME}, because you do not have it set in options.conf file.";
		exit 1;
	fi

	doMySQLback;

	cd ${CWD};

	set_service mysqld OFF
	initMySQL;
	
	if [ ${OS} = "FreeBSD" ]; then

		MYSQLURL=${WEBPATH_SERVICES}/all/mysql
		MYSQLPACK=mysql-${MYSQL_VER}

		BINPACK=`ls $MYSQLPACK-*i386.tar.gz $MYSQLPACK-*i686.tar.gz $MYSQLPACK-*i486.tar.gz $MYSQLPACK-*x86_64.tar.gz 2>/dev/null | head -n 1`
		
		if [ "$BINPACK" = "" ]; then
			compile_mysql_binary
		fi

		#make sure were back
		cd ${CWD};

		BINPACK=`ls $MYSQLPACK-*i386.tar.gz $MYSQLPACK-*i686.tar.gz $MYSQLPACK-*i486.tar.gz $MYSQLPACK-*x86_64.tar.gz 2>/dev/null | head -n 1`

		if [ "$BINPACK" = "" ]; then
			echo "Cannot find $MYSQLPACK package for installation"
			exit 0;
		fi
		
		if [ ! -s ${BINPACK} ]; then
			echo "Cannot find ${BINPACK} for installation"
			exit 0;
		fi

		echo "Stopping mysqld ...";
		control_service mysqld stop

		echo "Installing ${BINPACK}...";

		#we need the non tar.gz form .. but its not basic it has freebsd and i386 and stuff we need
		#since we know the name of the file, we can get its contents which will tell us.
		MYSQLPACK=`tar tzf ${BINPACK} | head -n 1 | cut -d/ -f1`

		mv -f ${BINPACK} /usr/local
		cd /usr/local

		tar xzf ${MYSQLPACK}.tar.gz --no-same-owner
		rm -f mysql
		ln -s ${MYSQLPACK} mysql
		cd mysql

		if [ -e my.cnf ]; then
			mv -f my.cnf my.cnf.orig
		fi
		
		chown -R mysql:mysql /usr/local/mysql
		chown -R mysql:mysql /usr/local/$MYSQLPACK

		rm -rf data
		ln -s /home/mysql ./data
		control_service mysqld start

		MYSQLPATH="`echo ${PATH} | grep /usr/local/mysql/bin | wc -l`"
		if [ "${MYSQLPATH}" -eq 0 ]; then
			export PATH=${PATH}:/usr/local/mysql/bin
		fi
		
		echo "Giving mysqld a few seconds to start up...";
		sleep 5;

		if [ -e /usr/local/mysql/bin/mysql_upgrade ]; then
			/usr/local/mysql/bin/mysql_upgrade --user=${MYSQLUSER} --password=${MYSQLPASSWORD}
		elif [ -e /usr/local/mysql/bin/mysql_fix_privilege_tables ]; then
			/usr/local/mysql/bin/mysql_fix_privilege_tables --user=${MYSQLUSER} --password=${MYSQLPASSWORD}
		fi

		if [ -e /usr/local/mysql/bin/mysqlcheck ] && [ "${MYSQL_OPT}" = "5.1" ]; then
			/usr/local/mysql/bin/mysqlcheck --user=${MYSQLUSER} --password=${MYSQLPASSWORD} --fix-db-names --fix-table-names -A
		fi

                if [ ! -e /usr/local/mysql/bin/mysqld ] && [ -e /usr/local/mysql/libexec/mysqld ]; then
                        ln -s ../libexec/mysqld /usr/local/mysql/bin/mysqld
                fi

		echo "Done ${MYSQLPACK}.";

	elif [ -e /etc/debian_version ]; then
		LINUX_STR=linux
		MACHINE=i686
		
		if [ "${MYSQL_OPT}" = "5.5" ]; then
			LINUX_STR=linux2.6
		fi
		
		MYSQLURL=${WEBPATH_SERVICES}/all/mysql/debian

                if [ "${B64}" = "1" ]; then
                        MYSQLURL=${MYSQLURL}/64-bit
                        MACHINE=x86_64
                fi
                
                MYSQLPACK=mysql-${MYSQL_VER}-${LINUX_STR}-${MACHINE}

		cd /usr/local
		if [ "${MYSQL_FORCE_COMPILE_OPT}" != "yes" ] && [ ! -s ${MYSQLPACK}.tar.gz ]; then
			${WGET} ${WGET_CONNECT_OPTIONS} -O ${MYSQLPACK}.tar.gz ${MYSQLURL}/${MYSQLPACK}.tar.gz
		fi

		if [ ! -s ${MYSQLPACK}.tar.gz ]; then
			echo "Attempting to compile a package from source...";
			cd ${CWD};
			compile_mysql_binary
			cd ${CWD};
			
			if [ ! -s ${MYSQLPACK}.tar.gz ]; then
			
				#sometimes it's linux, sometimes it's linux2.6.. sometimes it's just linux.
				#Debian 6 was kernel 2.6, but when 5.6 is compiled, is linux. 5.5 is linux. Consistent? no.
				
				PACK_PRE=mysql-${MYSQL_VER}
				BINPACK=`ls ${PACK_PRE}-*i386.tar.gz ${PACK_PRE}-*i686.tar.gz ${PACK_PRE}-*i486.tar.gz ${PACK_PRE}-*x86_64.tar.gz 2>/dev/null | head -n 1`
				
				if [ "$BINPACK" = "" ]; then			
					echo "Cannot find ${MYSQLPACK} package for installation"
					exit 0;
				fi
				
				echo "Found created package: $BINPACK";
				
				LINUX_STR=`echo $BINPACK | cut -d- -f3`
				MACHINE=`echo $BINPACK | cut -d- -f4 | cut -d. -f1`
				
				MYSQLPACK=mysql-${MYSQL_VER}-${LINUX_STR}-${MACHINE}
			fi
			
			mv -f ${MYSQLPACK}.tar.gz /usr/local
			cd /usr/local
		fi
		
		echo "Stopping mysqld ...";
		control_service mysqld stop
		
		backup_libmysqlclient;

		tar xzf ${MYSQLPACK}.tar.gz --no-same-owner
		rm -f mysql
		ln -s ${MYSQLPACK} mysql
		cd mysql

		chown -R mysql:mysql /usr/local/mysql
		chown -R mysql:mysql /usr/local/$MYSQLPACK

		if [ -e my.cnf ]; then
			mv -f my.cnf my.cnf.orig
		fi
		
		rm -rf data
		ln -s /home/mysql ./data
		
		rm -f /usr/local/bin/mysql_config
		ln -s /usr/local/mysql/bin/mysql_config /usr/local/bin/mysql_config
		
		chown -R mysql:mysql /home/mysql

		MYSQLPATH="`echo ${PATH} | grep /usr/local/mysql/bin | wc -l`"
		if [ "${MYSQLPATH}" -eq 0 ]; then
			export PATH=${PATH}:/usr/local/mysql/bin
		fi
		
		if [ -d /etc/mysql ]; then
		    if [ ! -L /etc/mysql/my.cnf ]; then
			    mv -f /etc/mysql/my.cnf /etc/mysql/my.cnf.back
				ln -s /etc/my.cnf /etc/mysql/my.cnf
			fi
		fi
		
		control_service mysqld start

		echo "Giving mysqld a few seconds to start up...";
		sleep 5;

		if [ -e /usr/local/mysql/bin/mysql_upgrade ]; then
			/usr/local/mysql/bin/mysql_upgrade --user=${MYSQLUSER} --password=${MYSQLPASSWORD}
		elif [ -e /usr/local/mysql/bin/mysql_fix_privilege_tables ]; then
			/usr/local/mysql/bin/mysql_fix_privilege_tables --user=${MYSQLUSER} --password=${MYSQLPASSWORD}
		fi

		if [ -e /usr/local/mysql/bin/mysqlcheck ] && [ "${MYSQL_OPT}" = "5.1" ]; then
			/usr/local/mysql/bin/mysqlcheck --user=${MYSQLUSER} --password=${MYSQLPASSWORD} --fix-db-names --fix-table-names -A
		fi

		restore_libmysqlclient;

		#mysql 5.5.11 changed to libmysqlclient.so.18 from libmysqlclient.so.16
		if [ "${MYSQL_OPT}" = "5.5" ] || [ "${MYSQL_OPT}" = "5.6" ]; then
			if [ -e /usr/local/directadmin/directadmin ]; then
				COUNT=`ldd /usr/local/directadmin/directadmin | grep -m1 -c 'libmysqlclient.so.16'`
				if [ "${COUNT}" -eq 1 ]; then
					if [ ! -e /usr/local/mysql/lib/libmysqlclient.so.16 ] && [ -e /usr/local/mysql/lib/libmysqlclient.so.18 ]; then
						echo "*** Linking libmysqlclient.so.16 to libmysqlclient.so.18";
						ln -s libmysqlclient.so.18 /usr/local/mysql/lib/libmysqlclient.so.16
						ldconfig
					fi
				fi
				COUNT=`ldd /usr/local/directadmin/directadmin | grep -m1 -c 'libmysqlclient.so.18'`
				if [ "${COUNT}" -eq 1 ]; then
					if [ ! -e /usr/local/mysql/lib/libmysqlclient.so.18 ] && [ -e /usr/local/mysql/lib/libmysqlclient.so.16 ]; then
						echo "*** Linking libmysqlclient.so.18 to libmysqlclient.so.16";
						ln -s libmysqlclient.so.16 /usr/local/mysql/lib/libmysqlclient.so.18
						ldconfig
					fi
				fi
			fi
		fi
	else
		if [ "${MYSQL_OPT}" = "5.5" ] || [ "${MYSQL_OPT}" = "5.6" ]; then
			if [ ! -e /usr/lib/libaio.so.1 ] && [ ! -e /lib64/libaio.so.1 ] && [ ! -e /lib/libaio.so.1 ] && [ ! -e /lib/i386-linux-gnu/libaio.so.1 ]; then
				echo "Cannot find libaio.so.1.  Please install libaio";
				echo "yum install libaio";
				return;
			fi
		fi
		
		if [ "${OS_MARIADB}" = "0" ]; then
			if [ "${B64}" = "0" ]; then
				MYSQLURL=${WEBPATH_SERVICES}/all/mysql/${MYSQL_VER}
				if [ "${MYSQL_OPT}" = "5.1" ]; then
					MYSQL_EXT=glibc23.i386
				elif [ "${MYSQL_OPT}" = "5.5" ]; then
					MYSQL_EXT=linux2.6.i386
				elif [ "${MYSQL_OPT}" = "5.6" ]; then
					MYSQL_EXT=linux_glibc2.5.i386
				else
					MYSQL_EXT=i386
				fi
			else
				MYSQLURL=${WEBPATH_SERVICES}/all/mysql/64-bit/${MYSQL_VER}/
				if [ "${MYSQL_OPT}" = "5.5" ]; then
					MYSQL_EXT=linux2.6.x86_64
				elif [ "${MYSQL_OPT}" = "5.6" ]; then
					MYSQL_EXT=linux_glibc2.5.x86_64
				else
					MYSQL_EXT=glibc23.x86_64
				fi
			fi
			MYSQLCLIENT=MySQL-client-${MYSQL_VER}-${MYSQL_REL}.$MYSQL_EXT.rpm
			MYSQLDEVEL=MySQL-devel-${MYSQL_VER}-${MYSQL_REL}.$MYSQL_EXT.rpm
			MYSQLSERVER=MySQL-server-${MYSQL_VER}-${MYSQL_REL}.$MYSQL_EXT.rpm
			MYSQLSHARED=MySQL-shared-${MYSQL_VER}-${MYSQL_REL}.$MYSQL_EXT.rpm
		else
			MYSQLURL=${WEBPATH_SERVICES}/all/mariadb/${MYSQL_OPT}/${MARIADB_VER}/
			if [ "${B64}" = "0" ]; then
				MYSQL_EXT=centos6-i686
			else
				MYSQL_EXT=centos6-x86_64
			fi
			MYSQLCLIENT=MariaDB-${MARIADB_VER}-${MYSQL_EXT}-client.rpm
			MYSQLDEVEL=MariaDB-${MARIADB_VER}-${MYSQL_EXT}-devel.rpm
			MYSQLSERVER=MariaDB-${MARIADB_VER}-${MYSQL_EXT}-server.rpm
			MYSQLSHARED=MariaDB-${MARIADB_VER}-${MYSQL_EXT}-shared.rpm
			MYSQLCOMMON=MariaDB-${MARIADB_VER}-${MYSQL_EXT}-common.rpm
		fi

		mkdir -p mysql
		cd mysql
		
		if [ ! -s ${MYSQLCLIENT} ]; then
			${WGET} ${WGET_CONNECT_OPTIONS} -O ${MYSQLCLIENT} ${MYSQLURL}/${MYSQLCLIENT}
		fi
		if [ ! -s ${MYSQLDEVEL} ]; then
			${WGET} ${WGET_CONNECT_OPTIONS} -O ${MYSQLDEVEL} ${MYSQLURL}/${MYSQLDEVEL}
		fi
		if [ ! -s ${MYSQLSERVER} ]; then
			${WGET} ${WGET_CONNECT_OPTIONS} -O ${MYSQLSERVER} ${MYSQLURL}/${MYSQLSERVER}
		fi
		if [ ! -s ${MYSQLSHARED} ]; then
			${WGET} ${WGET_CONNECT_OPTIONS} -O ${MYSQLSHARED} ${MYSQLURL}/${MYSQLSHARED}
		fi
		if [ "${OS_MARIADB}" != "0" ]; then
			if [ ! -s ${MYSQLCOMMON} ]; then
				${WGET} ${WGET_CONNECT_OPTIONS} -O ${MYSQLCOMMON} ${MYSQLURL}/${MYSQLCOMMON}
			fi
		fi
		FILE1=${CWD}/mysql/${MYSQLCLIENT}
		FILE2=${CWD}/mysql/${MYSQLDEVEL}
		FILE3=${CWD}/mysql/${MYSQLSERVER}
		FILE4=${CWD}/mysql/${MYSQLSHARED}
		if [ "${OS_MARIADB}" != "0" ]; then
			FILE5=${CWD}/mysql/${MYSQLCOMMON}
		fi
		checkFile ${FILE1}
		checkFile ${FILE2}
		checkFile ${FILE3}
		checkFile ${FILE4}
		if [ "${OS_MARIADB}" != "0" ]; then
			checkFile ${FILE5}
		fi

		echo "Stopping mysqld ...";
		control_service mysqld stop

		if [ -e /usr/bin/mysql ]; then
			MYSQL_MAIN="`/usr/bin/mysql --version | awk '{ print $5 }' | cut -d , -f1 | cut -d. -f1,2`"
			MYSQL_V="`/usr/bin/mysql --version | awk '{ print $5 }' | cut -d , -f1 | cut -d- -f1`"
			if [ "${MYSQL_MAIN}" != "${MYSQL_OPT}" ]; then
				echo "Upgrading ${MYSQLNAME} ${MYSQL_MAIN} to ${MYSQL_OPT}"
				if [ "${OS_MARIADB}" = "0" ]; then
					for i in `rpm -qa | grep -i "^mysql"`; do { rpm -ev $i --nodeps; }; done;
					rpm -Uhv --nodeps ${MYSQLCLIENT} ${MYSQLDEVEL} ${MYSQLSERVER} ${MYSQLSHARED}
				else
					for i in `rpm -qa | grep -i "^mariadb"`; do { rpm -ev $i --nodeps; }; done;
					rpm -Uhv --nodeps ${MYSQLCLIENT} ${MYSQLDEVEL} ${MYSQLSERVER} ${MYSQLSHARED} ${MYSQLCOMMON}
				fi
			else
				echo "Updating ${MYSQLNAME} ${MYSQL_V} to ${MYSQL_VER}"
				if [ "${OS_MARIADB}" = "0" ]; then
					rpm -Uhv --nodeps ${MYSQLCLIENT} ${MYSQLDEVEL} ${MYSQLSERVER} ${MYSQLSHARED}
				else
					rpm -Uhv --nodeps ${MYSQLCLIENT} ${MYSQLDEVEL} ${MYSQLSERVER} ${MYSQLSHARED} ${MYSQLCOMMON}
				fi
			fi
		else
			echo "Cannot find /usr/bin/mysql, installing MySQL"
			rpm -ihv --nodeps ${MYSQLCLIENT} ${MYSQLDEVEL} ${MYSQLSERVER} ${MYSQLSHARED}
		fi

		if [ "${SYSTEMD}" = "yes" ]; then
			MYSQL_SYSTEMD=${CB_SYSTEMD}/mysql.service
			if [ -e ${CB_CUST_SYSTEMD}/mysql.service ]; then
				MYSQL_SYSTEMD=${CB_CUST_SYSTEMD}/mysql.service
			fi
			cp -pf ${MYSQL_SYSTEMD} ${SYSTEMDDIR}/mysqld.service
			systemctl daemon-reload
			systemctl enable mysqld.service
		fi
		
		if [ "${SYSTEMD}" = "yes" ]; then
			systemctl disable mysql.service
			mv -f ${SYSTEMDDIR}/mysql.service ${SYSTEMDDIR}/mysqld.service
			systemctl daemon-reload
			systemctl enable mysqld.service
		else
			if [ -e /etc/rc.d/init.d/mysql ]
			then
				/sbin/chkconfig --del mysql
				mv -f /etc/rc.d/init.d/mysql /etc/rc.d/init.d/mysqld
				/sbin/chkconfig --add mysqld
			fi
                fi
		
		control_service mysqld start

                echo "Giving mysqld a few seconds to start up...";
                sleep 5;

		if [ -e /usr/bin/mysql_upgrade ]; then
			/usr/bin/mysql_upgrade --user=${MYSQLUSER} --password=${MYSQLPASSWORD}
		elif [ -e /usr/bin/mysql_fix_privilege_tables ]; then
			/usr/bin/mysql_fix_privilege_tables --user=${MYSQLUSER} --password=${MYSQLPASSWORD}
		fi

		if [ -e /usr/bin/mysqlcheck ]; then
			/usr/bin/mysqlcheck --user=${MYSQLUSER} --password=${MYSQLPASSWORD} --fix-db-names --fix-table-names -A
		fi

		# Fixing "gcc: /usr/lib/mysql/libmysqlclient.so: No such file or directory"
		#if [ ! -e /usr/lib/mysql/libmysqlclient.so ]; then
		if [ -d /usr/lib/mysql ]; then
			cp -f /usr/lib/libmysqlclient.* /usr/lib/mysql/
		fi
	fi

	set_service mysqld ON

	cd ${CWD};

	cagefsctl_update;
	
	echo "Restarting MySQL."
	control_service mysql restart
}

####################################################

doPhpIni() {
	if [ "${PHP_INI_OPT}" = "no" ]; then
		do_exit 1 "Cannot install php.ini because it is not set in options.conf."
	fi
	
	getFile php-${PHP1_RELEASE_VER}.tar.gz php${PHP1_SHORTRELEASE}
	FILE=${CWD}/php-${PHP1_RELEASE_VER}.tar.gz

	checkFile ${FILE}
	echo "Extracting ...";
	tar xzf ${FILE} --no-same-owner
	cd php-${PHP1_RELEASE_VER}
	
	COUNT=`grep -m1 -c '^date.timezone' php.ini-${PHP_INI_TYPE_OPT}`;
	COUNT2=`grep -m1 -c ';date.timezone' php.ini-${PHP_INI_TYPE_OPT}`;
	if [ "$COUNT" -eq 0 ] && [ "$COUNT2" -eq 0 ]; then
		echo "${boldon}Adding date.timezone = \"${PHP_TIMEZONE_OPT}\" to php.ini, please change it by yourself to fit your own needs.${boldoff}"
		echo "date.timezone = \"${PHP_TIMEZONE_OPT}\"" >> php.ini-${PHP_INI_TYPE_OPT}
	elif [ "$COUNT" -eq 0 ]; then
		echo "${boldon}Adding date.timezone = \"${PHP_TIMEZONE_OPT}\" to php.ini, please change it by yourself to fit your own needs.${boldoff}"
		perl -pi -e "s#;date.timezone.*#date.timezone = \"${PHP_TIMEZONE_OPT}\"#" php.ini-${PHP_INI_TYPE_OPT}
	fi
	
	/usr/bin/perl -pi -e 's/upload_max_filesize = 2M/upload_max_filesize = 64M/' php.ini-${PHP_INI_TYPE_OPT}
	/usr/bin/perl -pi -e 's/post_max_size = 8M/post_max_size = 64M/' php.ini-${PHP_INI_TYPE_OPT}

	#short_open_tag: http://help.directadmin.com/item.php?id=438
	perl -pi -e 's/^short_open_tag = Off/short_open_tag = On/' php.ini-${PHP_INI_TYPE_OPT}

	if [ "${X_MAIL_HEADER_OPT}" = "yes" ]; then
		echo "Enabling mail.add_x_header option in php.ini"
		/usr/bin/perl -pi -e 's/mail.add_x_header = Off/mail.add_x_header = On/' php.ini-${PHP_INI_TYPE_OPT}
		/usr/bin/perl -pi -e 's/mail.add_x_header = 0/mail.add_x_header = On/' php.ini-${PHP_INI_TYPE_OPT}
		COUNT=`grep -m1 -c '^mail.add_x_header' php.ini-${PHP_INI_TYPE_OPT}`
		if [ ${COUNT} -eq 0 ]; then
			echo "mail.add_x_header = On" >> php.ini-${PHP_INI_TYPE_OPT}
		fi
	else
		echo "Disabling mail.add_x_header option in php.ini"
		/usr/bin/perl -pi -e 's/^mail.add_x_header =/;mail.add_x_header =/' php.ini-${PHP_INI_TYPE_OPT}
	fi
	
	if [ "${PHP1_MODE_OPT}" = "mod_php" ]; then
		cp -f php.ini-${PHP_INI_TYPE_OPT} ${PHP_INI}
	elif [ "${PHP1_MODE_OPT}" = "php-fpm" ] || [ "${PHP1_MODE_OPT}" = "fastcgi" ] || [ "${PHP1_MODE_OPT}" = "suphp" ] || [ "${PHP1_MODE_OPT}" = "lsphp" ]; then
		PHP_INI_VAR=PHP_INI_FPM${PHP1_SHORTRELEASE}
		cp -f php.ini-${PHP_INI_TYPE_OPT} $(eval_var ${PHP_INI_VAR})
	fi

	echo "Done for php1_release.";
	cd ${WORKDIR};
	
	if [ "${PHP2_RELEASE_OPT}" != "no" ]; then
		PHP_VERSION2_EVAL_VAR=PHP${PHP2_SHORTRELEASE}_VER
		PHP_VERSION2_VAR=$(eval_var ${PHP_VERSION2_EVAL_VAR})
		getFile php-${PHP2_RELEASE_VER}.tar.gz php${PHP2_SHORTRELEASE}
		FILE=${CWD}/php-${PHP2_RELEASE_VER}.tar.gz

		checkFile ${FILE}
		echo "Extracting ...";
		tar xzf ${FILE} --no-same-owner
		cd php-${PHP2_RELEASE_VER}

		COUNT=`grep -m1 -c '^date.timezone' php.ini-${PHP_INI_TYPE_OPT}`;
		COUNT2=`grep -m1 -c ';date.timezone' php.ini-${PHP_INI_TYPE_OPT}`;
		if [ "$COUNT" -eq 0 ] && [ "$COUNT2" -eq 0 ]; then
			echo "${boldon}Adding date.timezone = \"${PHP_TIMEZONE_OPT}\" to php.ini, please change it by yourself to fit your own needs.${boldoff}"
			echo "date.timezone = \"${PHP_TIMEZONE_OPT}\"" >> php.ini-${PHP_INI_TYPE_OPT}
		elif [ "$COUNT" -eq 0 ]; then
			echo "${boldon}Adding date.timezone = \"${PHP_TIMEZONE_OPT}\" to php.ini, please change it by yourself to fit your own needs.${boldoff}"
			perl -pi -e "s#;date.timezone.*#date.timezone = \"${PHP_TIMEZONE_OPT}\"#" php.ini-${PHP_INI_TYPE_OPT}
		fi
	
		/usr/bin/perl -pi -e 's/upload_max_filesize = 2M/upload_max_filesize = 64M/' php.ini-${PHP_INI_TYPE_OPT}
		/usr/bin/perl -pi -e 's/post_max_size = 8M/post_max_size = 64M/' php.ini-${PHP_INI_TYPE_OPT}
	
		#short_open_tag: http://help.directadmin.com/item.php?id=438
		/usr/bin/perl -pi -e 's/^short_open_tag = Off/short_open_tag = On/' php.ini-${PHP_INI_TYPE_OPT}
	
		if [ "${PHP2_MODE_OPT}" = "mod_php" ]; then
			cp -f php.ini-${PHP_INI_TYPE_OPT} ${PHP_INI}
		elif [ "${PHP2_MODE_OPT}" = "php-fpm" ] || [ "${PHP2_MODE_OPT}" = "fastcgi" ] || [ "${PHP2_MODE_OPT}" = "suphp" ] || [ "${PHP2_MODE_OPT}" = "lsphp" ]; then
			if [ "${PHP2_RELEASE_OPT}" != "no" ]; then
				PHP_INI_VAR=PHP_INI_FPM${PHP2_SHORTRELEASE}
				cp -f php.ini-${PHP_INI_TYPE_OPT} $(eval_var ${PHP_INI_VAR})
			fi
		fi
		echo "Done for php2_release";
	fi
	cd ${WORKDIR};
	
}

####################################################

disable_asm_atomic() {
	# for this error:
	# /usr/include/mysql/my_global.h:361:24: error: asm/atomic.h: No such file or directory

	MY_GLOBAL=/usr/include/mysql/my_global.h
	if [ ${OS} = "FreeBSD" ] || [ -e /etc/debian_version ]; then
		MY_GLOBAL=/usr/local/mysql/include/my_global.h
	fi

	if [ "${PHP1_RELEASE_OPT}" = "5.3" ] || [ "${PHP2_RELEASE_OPT}" = "5.3" ]; then
		if [ -e ${MY_GLOBAL} ]; then
			echo "Disabling asm/atomic in ${MY_GLOBAL}";
			perl -pi -e 's#\#include <asm/atomic.h>#//\#include <asm/atomic.h>#' ${MY_GLOBAL}
		fi
        fi
}

####################################################

doSuPhp() {
	getFile suphp-${SUPHP_VER}.tar.gz suphp_current

	getFile patches/suphp_calling_user.patch suphp_calling_user_patch
	getFile patches/suphp_script_name.patch suphp_script_name_patch
	getFile patches/suphp_attachment.patch suphp_attachment_patch
	quitIfLocked doSuPhp
	
	cd ${CWD};
	FILE=${CWD}/suphp-${SUPHP_VER}.tar.gz
	checkFile ${FILE}
	echo "Extracting ...";
	tar xzf ${FILE} --no-same-owner
	echo "Done.";

	mkdir -p /usr/local/suphp/etc
	cd suphp-${SUPHP_VER}
	
	patch -p1 < ../patches/suphp_calling_user.patch
	patch -p1 < ../patches/suphp_script_name.patch 
	patch -p1 < ../patches/suphp_attachment.patch
	
	if [ "${CLOUDLINUX_OPT}" = "yes" ]; then
		patch -p1 < ../suphp-0.7.2-cagefs.am.patch
	fi

	if [ "${SUPHP_VER}" != "0.7.1" ]; then
		echo "re-configuring suphp configure...";

		echo "calling aclocal:";
		perl -pi -e 's/AM_CONFIG_HEADER/AC_CONFIG_HEADERS/' configure.ac
		aclocal

		echo "calling libtoolize:";
		libtoolize --force
		
		echo "calling automake:";
		automake --add-missing
		
		echo "calling autoreconf:";
		autoreconf
	fi

	perl -pi -e 's#"\$major_version" = "2.2"#"\$major_version" = "2.4"#' ./configure

	echo "Configuring suphp-${SUPHP_VER}...";
	CONF_FILE=${CWD}/${SUPHP_CONFIGURE};

	${CONF_FILE}
	if [ $? -ne 0 ]
	then
		printf "\n*** There was an error while trying to configure suPHP. Check the ${SUPHP_CONFIGURE} file\n";
		do_exit 1;
	fi

	echo "Done Configuration.";

	while
	echo "Trying to make suPHP..."
	do
	{
		make

		if [ $? -ne 0 ]
		then
			if [ ${USER_INPUT} -eq 1 ]; then
				echo -n -e "\n*** The make has failed, would you like to try to make again? (y,n): ";
				read yesno;
				echo "";
	                else
        	                if [ "${INPUT_VALUE}" = "d" ]; then
                	                yesno=n
                        	else
                                	yesno=${INPUT_VALUE}
	                        fi
        	        fi

			if [ "${yesno}" = "n" ]
			then
				do_exit 0;
			fi
		else
			break;
		fi
	}
	done
	echo "Make Complete";

	if [ -e /usr/lib/apache/mod_suphp.so ]; then
		rm -f /usr/lib/apache/mod_suphp.so
	fi

	while
	echo "Installing suPHP...";
	do
	{
                #only freebsd 7 seemed affected with this, thus added.
                chmod 755 config/install-sh

		make install

		if [ $? -ne 0 ]
		then
			if [ ${USER_INPUT} -eq 1 ]; then
	                        printf "\n*** The install has failed, would you like to try to install it again? (y,n): \n";
        	                read yesno;
                	        echo "";
			else
                                if [ "${INPUT_VALUE}" = "d" ]; then
                                        yesno=n
                                else
                                        yesno=${INPUT_VALUE}
                                fi
			fi

                        if [ "${yesno}" = "n" ]
                        then
				do_exit 0;
                        fi
                else
                        break;
                fi
	}
	done;
	
	touch /var/log/suphp.log

	echo "suPHP ${SUPHP_VER} Installed.";
	removeLockfile
	cd ${CWD};
	cagefsctl_update;
}

####################################################

set_sendmail_link() {

	SM=/usr/sbin/sendmail
	MW=/usr/sbin/mailwrapper
	LINK_TO_EXIM="ln -sf exim ${SM}"

	if [ "$OS" = "FreeBSD" ] && [ -x ${MW} ]; then
		MC=/etc/mail/mailer.conf
		T=${MC}.temp
		E=`grep -m1 -c exim ${MC}`
		if [ "${E}" -eq 0 ]; then
			cp -f ${MC} ${MC}.backup
			${WGET} ${WGET_CONNECT_OPTIONS} -O ${T} ${WEBPATH_SERVICES}/mailer.conf
			
			if [ ! -s ${T} ]; then
				${LINK_TO_EXIM}
				return;
			fi
			
			cp -f ${T} ${MC}			
		fi

		L=`readlink $SM`
		if [ "${L}" = "exim" ]; then
			ln -sf ${MW} ${SM}
			
		fi

		return;
	fi
	
	${LINK_TO_EXIM}
}

####################################################

doExtensions_build() {
	EXTENSION_INT_RELEASE=$1
	EXTENSION_INT_MODE=$2
	EXTENSION_NAME=$3
	EXTENSION_SHORT_RELEASE=`echo ${EXTENSION_INT_RELEASE} | tr -d '.'`
	
	if [ "${EXTENSION_NAME}" = "" ]; then
		EXTENSION_NAME="all"
	fi
	
	OS_EXT=lin
	if [ "$OS" = "FreeBSD" ]; then
		OS_EXT=fre
		if [ "${ZEND_OPT}" = "yes" ]; then
			echo "Zend Guard loader does not support FreeBSD."
		fi
	fi
	
	if [ "${EXTENSION_INT_MODE}" = "no" ]; then
		do_exit 1 "Cannot build PHP extensions for mode ${EXTENSION_INT_MODE}."
	elif [ "${EXTENSION_INT_MODE}" = "" ] || [ "${EXTENSION_INT_MODE}" = "" ]; then
		do_exit 1 "Cannot build PHP extensions for mode: ${EXTENSION_INT_MODE}, release: ${EXTENSION_INT_RELEASE}."
	fi
	
	if [ "${EXTENSION_INT_MODE}" != "mod_php" ] && [ "${EXTENSION_INT_MODE}" != "no" ]; then
		SUHOSIN_UPLOADSCAN_FILENAME=/usr/local/php${EXTENSION_SHORT_RELEASE}/bin/php_uploadscan.sh
		if [ -d /usr/local/php${EXTENSION_SHORT_RELEASE} ]; then
			mkdir -p /usr/local/php${EXTENSION_SHORT_RELEASE}/lib/php.conf.d
		fi
		EXTENSION_INT_EXT_DIR=`/usr/local/php${EXTENSION_SHORT_RELEASE}/bin/php-config --extension-dir`
		EXTENSION_INT_PHP_INI=/usr/local/php${EXTENSION_SHORT_RELEASE}/lib/php.ini
		EXTENSION_INT_EXT_INI=/usr/local/php${EXTENSION_SHORT_RELEASE}/lib/php.conf.d/10-directadmin.ini
	elif [ "${EXTENSION_INT_MODE}" != "no" ]; then
		SUHOSIN_UPLOADSCAN_FILENAME=/usr/local/bin/php_uploadscan.sh
		if [ -d /usr/local/lib ]; then
			mkdir -p /usr/local/lib/php.conf.d
		fi
		EXTENSION_INT_EXT_DIR=`/usr/local/bin/php-config --extension-dir`
		EXTENSION_INT_PHP_INI=/usr/local/lib/php.ini
		EXTENSION_INT_EXT_INI=/usr/local/lib/php.conf.d/10-directadmin.ini
	fi
	
	#Make extensions file empty
	echo -n '' > ${EXTENSION_INT_EXT_INI}
		
	#We do comment out ioncube/zend from the old php.ini file only, because old configs cannot exist
	if [ -e ${EXTENSION_INT_PHP_INI} ]; then
		if [ "${HTSCANNER_OPT}" = "yes" ]; then
			perl -pi -e 's|^extension=htscanner.so|;extension=htscanner.so|' ${EXTENSION_INT_PHP_INI}
		fi
		if [ "${SUHOSIN_OPT}" = "yes" ]; then
			perl -pi -e 's|^extension=suhosin.so|;extension=suhosin.so|' ${EXTENSION_INT_PHP_INI}
		fi
		if [ "${OPCACHE_OPT}" = "yes" ]; then
			perl -pi -e "s|^zend_extension=${EXTENSION_INT_EXT_DIR}/opcache.so|;zend_extension=${EXTENSION_INT_EXT_DIR}/opcache.so|" ${EXTENSION_INT_PHP_INI}
		fi
		if [ "${IONCUBE_OPT}" = "yes" ]; then
			perl -pi -e 's|^zend_extension=/usr/local/lib/ioncube|;zend_extension=/usr/local/lib/ioncube|' ${EXTENSION_INT_PHP_INI}
		fi
		if [ "${ZEND_OPT}" = "yes" ]; then
			perl -pi -e 's|^zend_extension=/usr/local/lib/ZendGuardLoader.so|;zend_extension=/usr/local/lib/ZendGuardLoader.so|' ${EXTENSION_INT_PHP_INI}
			perl -pi -e 's|^zend_extension=/usr/local/lib/ZendOptimizer_|;zend_extension=/usr/local/lib/ZendOptimizer_|' ${EXTENSION_INT_PHP_INI}
		fi

		#Make extensions file empty
		echo -n '' > ${EXTENSION_INT_EXT_INI}
		
		if [ -e ${EXTENSION_INT_EXT_INI} ]; then
			echo "extension_dir=${EXTENSION_INT_EXT_DIR}" >> ${EXTENSION_INT_EXT_INI}
			if [ "${SUHOSIN_OPT}" = "yes" ]; then
				echo "extension=suhosin.so" >> ${EXTENSION_INT_EXT_INI}
				if [ "${SUHOSIN_PHP_UPLOADSCAN_OPT}" = "yes" ] && [ -e /usr/local/bin/clamdscan ]; then
					cp -f ${SUHOSIN_PHP_UPLOADSCAN_SCRIPT} ${SUHOSIN_UPLOADSCAN_FILENAME}
					chmod 755 ${SUHOSIN_UPLOADSCAN_FILENAME}
					echo "suhosin.upload.verification_script=\"${SUHOSIN_UPLOADSCAN_FILENAME}\"" >> ${EXTENSION_INT_EXT_INI}
				elif [ "${SUHOSIN_PHP_UPLOADSCAN_OPT}" = "yes" ] && [ ! -e /usr/local/bin/clamdscan ]; then
					if [ "${EXTENSION_NAME}" = "suhosin" ] || [ "${EXTENSION_NAME}" = "all" ]; then
						echo "Cannot enable suhosin upload verification script (suhosin_php_uploadscan option), because /usr/local/bin/clamdscan does not exist on the system."
					fi
				fi
                                if [ -e ${WORKDIR}/${SUHOSIN_INI} ]; then
					cat ${WORKDIR}/${SUHOSIN_INI} >> ${EXTENSION_INT_EXT_INI}
                                        echo "" >> ${EXTENSION_INT_EXT_INI}
				fi
				if [ "${EXTENSION_NAME}" = "suhosin" ] || [ "${EXTENSION_NAME}" = "all" ]; then
					echo "suhosin ${SUHOSIN_VER} is now installed for PHP ${EXTENSION_INT_RELEASE}."
				fi
			fi
		
			if [ "${HTSCANNER_OPT}" = "yes" ] && [ "${EXTENSION_INT_MODE}" != "mod_php" ] && [ "${EXTENSION_INT_MODE}" != "lsphp" ]; then
				if [ "${HAVE_CLI}" = "no" ]; then
					#FreeBSD 10 fix
					if [ -e ${EXTENSION_INT_EXT_DIR}/libhtscanner.so.0.0 ]; then
						ln -sf ${EXTENSION_INT_EXT_DIR}/libhtscanner.so.0.0 ${EXTENSION_INT_EXT_DIR}/htscanner.so
					fi
					echo "extension=htscanner.so" >> ${EXTENSION_INT_EXT_INI}
					if [ "${EXTENSION_NAME}" = "htscanner" ] || [ "${EXTENSION_NAME}" = "all" ]; then
						echo "htscanner ${HTSCANNER_VER} is now installed for PHP ${EXTENSION_INT_RELEASE}."
					fi
				fi
			fi
			
			if [ "${IONCUBE_OPT}" = "yes" ]; then
				if [ "${EXTENSION_INT_RELEASE}" != "5.6" ]; then
					echo "zend_extension=/usr/local/lib/ioncube/ioncube_loader_${OS_EXT}_${EXTENSION_INT_RELEASE}.so" >> ${EXTENSION_INT_EXT_INI}
					if [ "${EXTENSION_NAME}" = "ioncube" ] || [ "${EXTENSION_NAME}" = "all" ]; then
						echo "ionCube loader ${IONCUBE_VER} is now installed for PHP ${EXTENSION_INT_RELEASE}."
					fi
				elif [ "${EXTENSION_NAME}" = "ioncube" ] || [ "${EXTENSION_NAME}" = "all" ]; then
					echo "There is no ionCube loader available for PHP ${EXTENSION_INT_RELEASE}."
				fi
			fi
			
			if [ "${OPCACHE_OPT}" = "yes" ]; then
				echo "zend_extension=${EXTENSION_INT_EXT_DIR}/opcache.so" >> ${EXTENSION_INT_EXT_INI}
				if [ -e ${WORKDIR}/${OPCACHE_INI} ]; then
					cat ${WORKDIR}/${OPCACHE_INI} >> ${EXTENSION_INT_EXT_INI}
					echo "" >> ${EXTENSION_INT_EXT_INI}
					
				fi
				if [ "${EXTENSION_NAME}" = "opcache" ] || [ "${EXTENSION_NAME}" = "all" ]; then
					echo "opCache ${OPCACHE_VER} is now installed for PHP ${EXTENSION_INT_RELEASE}."
				fi
			fi
			
			if [ "${ZEND_OPT}" = "yes" ]; then
				if [ "${EXTENSION_INT_RELEASE}" != "5.5" ] && [ "${EXTENSION_INT_RELEASE}" != "5.6" ]; then
					echo "zend_extension=/usr/local/lib/ZendGuardLoader${EXTENSION_INT_RELEASE}.so" >> ${EXTENSION_INT_EXT_INI}
					if [ "${EXTENSION_NAME}" = "zend" ] || [ "${EXTENSION_NAME}" = "all" ]; then
						echo "Zend Guard loader is now installed for PHP ${EXTENSION_INT_RELEASE}."
					fi
				elif [ "${EXTENSION_NAME}" = "zend" ] || [ "${EXTENSION_NAME}" = "all" ]; then
					echo "There is no Zend Guard loader available for PHP ${EXTENSION_INT_RELEASE}."
				fi
			fi
		fi
	fi
}

doExtensions() {
	DO_EXT_SKIP_RESTART=0
	if [ "$1" = "1" ]; then
		DO_EXT_SKIP_RESTART=1
	fi
	
	if [ "$2" = "" ]; then
		$2="all"
	fi
	
	doExtensions_build ${PHP1_RELEASE_OPT} ${PHP1_MODE_OPT} $2
	
	if [ "${PHP2_RELEASE_OPT}" != "no" ]; then
		doExtensions_build ${PHP2_RELEASE_OPT} ${PHP2_MODE_OPT} $2
	fi

	SKIP_WEBSERVER_RESTART=0
	
	if [ "${DO_EXT_SKIP_RESTART}" = "0" ]; then
		cagefsctl_update;
		
		if [ "${PHP1_MODE_OPT}" = "php-fpm" ]; then
			if [ "${PHP2_MODE_OPT}" = "php-fpm" ] || [ "${PHP2_RELEASE_OPT}" = "no" ]; then
				SKIP_WEBSERVER_RESTART=1
			fi
		fi
		
		if [ "${SKIP_WEBSERVER_RESTART}" = "0" ]; then
			if [ "${WEBSERVER_OPT}" = "nginx" ] || [ "${WEBSERVER_OPT}" = "nginx_apache" ]; then
				control_service nginx restart
			fi
			if [ "${WEBSERVER_OPT}" = "apache" ] || [ "${WEBSERVER_OPT}" = "nginx_apache" ]; then
				control_service httpd restart
			fi
			
			if [ "${WEBSERVER_OPT}" = "litespeed" ]; then
				if [ "${SYSTEMD}" = "yes" ]; then
					#No systemd script yet...
					${INITDDIR}/litespeed restart
				else
					${INITDDIR}/litespeed restart
				fi
			fi
		fi
		
		if [ "${PHP1_MODE_OPT}" = "php-fpm" ]; then
			echo "Restarting php-fpm${PHP1_SHORTRELEASE}."
			control_service php-fpm${PHP1_SHORTRELEASE} restart
		fi
		if [ "${PHP2_MODE_OPT}" = "php-fpm" ] && [ "${PHP2_RELEASE_OPT}" != "no" ]; then
			echo "Restarting php-fpm${PHP2_SHORTRELEASE}."
			control_service php-fpm${PHP2_SHORTRELEASE} restart
		fi
	fi
}

####################################################

doPHPHtscanner() {
	if [ "${HAVE_CLI}" = "no" ]; then
		HTSCANNER_INT_SHORTRELEASE="`echo $1 | tr -d '.'`"
		cd ${CWD};
		if [ "${HTSCANNER_OPT}" = "no" ]; then
			echo "Cannot build htscanner, because you do not have it set in options.conf file."
			exit 1;
		fi
		if [ -z $1 ]; then
			return;
		fi
		if [ -z $2 ]; then
			SKIP_RESTART=0;
		else
			SKIP_RESTART=$2
		fi
		getFile htscanner-${HTSCANNER_VER}.tgz htscanner
		
		FILE=${CWD}/htscanner-${HTSCANNER_VER}.tgz
		checkFile ${FILE};
		echo "Extracting ${FILE}...";
		
		tar xzf ${FILE}
		cd htscanner-${HTSCANNER_VER}
		
		echo "Installing htscanner2-${HTSCANNER_VER} PHP extension for PHP $1...";

		/usr/local/php${HTSCANNER_INT_SHORTRELEASE}/bin/phpize
		./configure --enable-htscanner --with-php-config=/usr/local/php${HTSCANNER_INT_SHORTRELEASE}/bin/php-config
		while
		echo "Trying to make htscanner2-${HTSCANNER_VER} PHP extension..."
		do
		{
			make

			if [ $? -ne 0 ]
			then
				if [ ${USER_INPUT} -eq 1 ]; then
					printf "\n*** The make has failed, would you like to try to make again? (y,n): \n";
					read yesno;
					echo "";
				else
					if [ "${INPUT_VALUE}" = "d" ]; then
						yesno=n
					else
						yesno=${INPUT_VALUE}
					fi
				fi

				if [ "${yesno}" = "n" ]
				then
					do_exit 0;
				fi
			else
				break;
			fi
		}
		done;
		echo "Make complete";
		echo "Installing htscanner2-${HTSCANNER_VER}  PHP extension...";
		make install
		
		make clean;
		doExtensions_build $1 php-fpm htscanner;

		echo "htscanner2 PHP extension has been installed successfully.";

		cd ${CWD};
	fi
}

####################################################

doZend() {
	cd ${CWD};

	FOR_ALL="no";
	if [ -z $1 ] || [ $1 = "d" ] || [ -z $2 ]; then
		FOR_ALL="yes";
	fi
	
	SKIP_RESTART=1
	if [ "$3" != "1" ]; then
		SKIP_RESTART=0
	fi
	
	if [ "$OS" != "FreeBSD" ]; then
		if [ "${FOR_ALL}" = "yes" ]; then
			if [ "${PHP1_RELEASE_OPT}" = "5.3" ] || [ "${PHP2_RELEASE_OPT}" = "5.3" ]; then
				getFile ${ZENDFILE_GUARD53} ${ZENDNAME_PHP53_MD5}
			fi
			if [ "${PHP1_RELEASE_OPT}" = "5.4" ] || [ "${PHP2_RELEASE_OPT}" = "5.4" ]; then
				getFile ${ZENDFILE_GUARD54} ${ZENDNAME_PHP54_MD5}
			fi
		else
			ZEND_INT_SHORTRELEASE="`echo $1 | tr -d '.'`"
			if [ "$1" = "5.3" ]; then
				ZEND_INT_FILENAME=${ZENDFILE_GUARD53}
				ZEND_INT_ZENDNAME=${ZENDNAME_PHP53}
				ZEND_INT_LONGVER="$1"
				ZEND_INT_MD5=${ZENDNAME_PHP53_MD5}
			elif [ "$1" = "5.4" ]; then
				ZEND_INT_FILENAME=${ZENDFILE_GUARD54}
				ZEND_INT_ZENDNAME=${ZENDNAME_PHP54}
				ZEND_INT_LONGVER="$1"
				ZEND_INT_MD5=${ZENDNAME_PHP54_MD5}
			fi
			getFile ${ZEND_INT_FILENAME} ${ZEND_INT_MD5}
		fi
	fi
	
	if [ "${ZEND_OPT}" != "yes" ]; then
		echo "You cannot install Zend Guard Loader, because you do not have it set in the options.conf file.";
		exit 1;
	fi

	if [ "$OS" = "FreeBSD" ]; then
		echo "Zend Guard loader does not support FreeBSD."
	else
		cd ${CWD};
		if [ "${FOR_ALL}" = "yes" ]; then
			if [ "${PHP1_RELEASE_OPT}" = "5.3" ] || [ "${PHP2_RELEASE_OPT}" = "5.3" ]; then
				tar xzf ${ZENDFILE_GUARD53} --no-same-owner
				cp -fp ${ZENDNAME_PHP53}/php-5.3.x/ZendGuardLoader.so /usr/local/lib/ZendGuardLoader5.3.so
				chmod 755 /usr/local/lib/ZendGuardLoader5.3.so
				chown root:${ROOT_GRP} /usr/local/lib/ZendGuardLoader5.3.so
			fi
			if [ "${PHP1_RELEASE_OPT}" = "5.4" ] || [ "${PHP2_RELEASE_OPT}" = "5.4" ]; then
				tar xzf ${ZENDFILE_GUARD54} --no-same-owner
				cp -fp ${ZENDNAME_PHP54}/php-5.4.x/ZendGuardLoader.so /usr/local/lib/ZendGuardLoader5.4.so
				chmod 755 /usr/local/lib/ZendGuardLoader5.4.so
				chown root:${ROOT_GRP} /usr/local/lib/ZendGuardLoader5.4.so
			fi
		else
			tar xzf ${ZEND_INT_FILENAME} --no-same-owner
			cp -fp ${ZEND_INT_ZENDNAME}/php-${ZEND_INT_LONGVER}.x/ZendGuardLoader.so /usr/local/lib/ZendGuardLoader${ZEND_INT_LONGVER}.so
			chmod 755 /usr/local/lib/ZendGuardLoader${ZEND_INT_LONGVER}.so
			chown root:${ROOT_GRP} /usr/local/lib/ZendGuardLoader${ZEND_INT_LONGVER}.so
		fi
		if [ "${FOR_ALL}" = "yes" ]; then
			doExtensions ${SKIP_RESTART} zend;
		else
			doExtensions_build ${ZEND_INT_LONGVER} ${2} zend;
		fi
	fi
}

####################################################

doIoncube() {
	cd ${CWD};

	FOR_ALL="no";
	if [ -z $1 ] || [ $1 = "d" ] || [ -z $2 ]; then
		FOR_ALL="yes";
	fi
	
	if [ "${FOR_ALL}" = "no" ]; then
		IONCUBE_INT_SHORTRELEASE="`echo $1 | tr -d '.'`"
	fi
	
	SKIP_RESTART=1
	if [ "$3" != "1" ]; then
		SKIP_RESTART=0
	fi
	
	getFile ${IONCUBEFILE} ${IONCUBENAME}
	if [ "${IONCUBE_OPT}" != "yes" ]; then
		echo "You cannot install ionCube loader, because you do not have it set in options.conf file.";
		exit 1;
	fi

	tar xzf ${IONCUBEFILE} --no-same-owner

	if [ -d ioncube ]; then
		chown -R root:${ROOT_GRP} ioncube
	fi

	if [ -d /usr/local/lib/ioncube ]; then
		rm -rf /usr/local/lib/ioncube
	fi
	
	mv -f ioncube /usr/local/lib/
	
	if [ "${FOR_ALL}" = "yes" ]; then
		doExtensions ${SKIP_RESTART} ioncube;
	else
		doExtensions_build ${1} ${2} ioncube;
	fi
}

####################################################

installSuhosin(){
	if [ -z $1 ]; then
		return;
	fi
	echo "Installing suhosin-${SUHOSIN_VER} PHP extension for PHP$1...";

	if [ $2 != "mod_php" ]; then
		/usr/local/php$1/bin/phpize
		./configure --with-php-config=/usr/local/php$1/bin/php-config
	else
		/usr/local/bin/phpize
		./configure --with-php-config=/usr/local/bin/php-config
	fi
	while
	echo "Trying to make suhosin-${SUHOSIN_VER} PHP extension..."
	do
	{
		make

		if [ $? -ne 0 ]
		then
			if [ ${USER_INPUT} -eq 1 ]; then
				printf "\n*** The make has failed, would you like to try to make again? (y,n): \n";
				read yesno;
				echo "";
			else
				if [ "${INPUT_VALUE}" = "d" ]; then
					yesno=n
				else
					yesno=${INPUT_VALUE}
				fi
			fi

			if [ "${yesno}" = "n" ]
			then
				do_exit 0;
			fi
		else
			break;
		fi
	}
	done;
	echo "Make complete";
	make install
	
	make clean;
}

doSuhosin() {
	cd ${CWD};
	if [ "${SUHOSIN_OPT}" = "no" ]; then
		echo "Cannot build suhosin, because you do not have it set in options.conf file."
		exit 1;
	fi
	FOR_ALL="no";
	if [ -z $1 ] || [ $1 = "d" ] || [ -z $2 ]; then
		FOR_ALL="yes";
	fi
	
	if [ "${FOR_ALL}" = "no" ]; then
		SUHOSIN_INT_SHORTRELEASE="`echo $1 | tr -d '.'`"
	fi
	
	SKIP_RESTART=1
	if [ "$3" != "1" ]; then
		SKIP_RESTART=0
	fi
	
	getFile suhosin-${SUHOSIN_VER}.tgz suhosin
	
	FILE=${CWD}/suhosin-${SUHOSIN_VER}.tgz
	checkFile ${FILE};
	echo "Extracting ${FILE}...";
	
	tar xzf ${FILE}
	cd suhosin-${SUHOSIN_VER}
	
	if [ "${FOR_ALL}" = "no" ]; then
		installSuhosin ${SUHOSIN_INT_SHORTRELEASE} $2;
	else
		installSuhosin ${PHP1_SHORTRELEASE} ${PHP1_MODE_OPT};
		if [ "${PHP2_RELEASE_OPT}" != "no" ]; then
			installSuhosin ${PHP2_SHORTRELEASE} ${PHP2_MODE_OPT};
		fi
	fi
	
	if [ "${SUHOSIN_PHP_UPLOADSCAN_OPT}" = "yes" ] && [ ! -e /usr/local/bin/clamdscan ]; then
		if [ "${CLAMAV_OPT}" = "no" ]; then
			do_exit 1 "Cannot install suhosin with PHP upload scan using ClamAV, because /usr/local/bin/clamdscan does not exist on the system and clamav=no is set in the options.conf file."
		fi
		removeLockfile;
		doclamav;
	fi
	
	if [ "${FOR_ALL}" = "yes" ]; then
		doExtensions ${SKIP_RESTART} suhosin;
	else
		doExtensions_build ${1} ${2} suhosin;
	fi
	echo "suhosin ${SUHOSIN_VER} PHP extension has been installed successfully.";

	cd ${CWD};
}

installOpcache(){
	if [ -z $1 ]; then
		return;
	fi
	echo "Installing zendopcache-${OPCACHE_VER} PHP extension for PHP$1...";

	if [ "$1" = "53" ] || [ "$1" = "54" ]; then
		if [ "$2" != "mod_php" ]; then
			/usr/local/php$1/bin/phpize
			./configure --with-php-config=/usr/local/php$1/bin/php-config
		else
			/usr/local/bin/phpize
			./configure --with-php-config=/usr/local/bin/php-config
		fi
		while
		echo "Trying to make zendopcache-${OPCACHE_VER} PHP extension..."
		do
		{
			make

			if [ $? -ne 0 ]
			then
				if [ ${USER_INPUT} -eq 1 ]; then
					printf "\n*** The make has failed, would you like to try to make again? (y,n): \n";
					read yesno;
					echo "";
				else
					if [ "${INPUT_VALUE}" = "d" ]; then
						yesno=n
					else
						yesno=${INPUT_VALUE}
					fi
				fi

				if [ "${yesno}" = "n" ]
				then
					do_exit 0;
				fi
			else
				break;
			fi
		}
		done;
		echo "Make complete";
		make install;
		
		make clean;
	fi
}

doOpcache() {
	cd ${CWD};
	if [ "${OPCACHE_OPT}" = "no" ]; then
		echo "Cannot build opCache, because you do not have it set in options.conf file."
		exit 1;
	fi
	FOR_ALL="no";
	if [ -z $1 ] || [ $1 = "d" ] || [ -z $2 ]; then
		FOR_ALL="yes";
	fi
	
	if [ "${FOR_ALL}" = "no" ]; then
		OPCACHE_INT_SHORTRELEASE="`echo $1 | tr -d '.'`"
	fi
	
	SKIP_RESTART=1
	if [ "$1" != "1" ]; then
		SKIP_RESTART=0
	fi
	
	getFile zendopcache-${OPCACHE_VER}.tgz zendopcache
	
	FILE=${CWD}/zendopcache-${OPCACHE_VER}.tgz
	checkFile ${FILE};
	echo "Extracting ${FILE}...";
	
	tar xzf ${FILE}
	cd zendopcache-${OPCACHE_VER}
	
	if [ "${FOR_ALL}" = "no" ]; then
		installOpcache ${OPCACHE_INT_SHORTRELEASE} $2;
	else
		installOpcache ${PHP1_SHORTRELEASE} ${PHP1_MODE_OPT};
		if [ "${PHP2_RELEASE_OPT}" != "no" ]; then
			installOpcache ${PHP2_SHORTRELEASE} ${PHP2_MODE_OPT};
		fi
	fi
	
	if [ "${FOR_ALL}" = "yes" ]; then
		doExtensions ${SKIP_RESTART} opcache;
	else
		doExtensions_build ${1} ${2} suhosin;
	fi
	
	echo "opCache ${OPCACHE_VER} PHP extension has been installed successfully.";

	cd ${CWD};
}

####################################################

doModLsapi() {
	if [ "${CLOUDLINUX_OPT}" = "yes" ] && [ "${PHP1_MODE_OPT}" = "lsphp" ]; then
		if [ "${WEBSERVER_OPT}" = "apache" ] || [ "${WEBSERVER_OPT}" = "nginx_apache" ]; then
			if [ ! -s /usr/include/lsapidef.h ]; then
				yum -y install liblsapi liblsapi-devel --enablerepo=cloudlinux-updates-testing
			else
				if [ -s ${STRINGS} ]; then
					COUNT="`rpm -q liblsapi-${MOD_LSAPI_VER}.* | grep -c -m1 'is not installed'`"
					if [ "${COUNT}" != "0" ]; then
						yum -y update liblsapi liblsapi-devel --enablerepo=cloudlinux-updates-testing
					fi
				else
					yum -y update liblsapi liblsapi-devel --enablerepo=cloudlinux-updates-testing
				fi
			fi
			if [ -e /usr/local/php${PHP1_SHORTRELEASE}/bin/lsphp ]; then
				cp -pf /usr/local/php${PHP1_SHORTRELEASE}/bin/lsphp /usr/local/bin/lsphp
			fi
			cd ${CWD}
			getFileCL mod_lsapi-${MOD_LSAPI_VER}.tar.gz mod_lsapi
			LSAPI_MODDIR="`tar tzf mod_lsapi-${MOD_LSAPI_VER}.tar.gz | head -n 1 | cut -d/ -f1`"
			tar xzf mod_lsapi-${MOD_LSAPI_VER}.tar.gz
			cd ${LSAPI_MODDIR}
			cmake CMakeLists.txt
			make install
			sh ./install/da_cb_install
			if [ ! -e /etc/httpd/conf/extra/mod_lsapi.conf ]; then
				cd conf
				cat mod_lsapi.conf | sed 's/#AddType application\/x-httpd-lsphp/AddType application\/x-httpd-lsphp/g' > mod_lsapi.conf.tmp
				cp -f mod_lsapi.conf.tmp /etc/httpd/conf/extra/mod_lsapi.conf
				perl -pi -e 's#/etc/httpd/modules/mod_lsapi.so#/usr/lib/apache/mod_lsapi.so#' /etc/httpd/conf/extra/mod_lsapi.conf
			fi
			#Inserting mod_lsapi to apache config
			COUNTCLCONF=`grep -m1 -c -e "mod_lsapi.conf" /etc/httpd/conf/extra/httpd-includes.conf`
			if [ "${COUNTCLCONF}" -eq 0 ]; then
				echo "Adding mod_lsapi to apache configuration (extra/httpd-includes.conf)."
				echo "#For mod_lsphp settings" >> /etc/httpd/conf/extra/httpd-includes.conf
				echo "Include /etc/httpd/conf/extra/mod_lsapi.conf" >> /etc/httpd/conf/extra/httpd-includes.conf
			else
				perl -pi -e 's|^#Include /etc/httpd/conf/extra/mod_lsapi.conf|Include /etc/httpd/conf/extra/mod_lsapi.conf|' /etc/httpd/conf/extra/httpd-includes.conf
			fi
			cd ${CWD}
			rm -rf ${LSAPI_MODDIR}
			if [ "$1" != "0" ]; then
				control_service httpd restart;
			fi
		fi
	else
		#Removing mod_lsapi from apache config
		COUNTCLCONF=`grep -m1 -c -e '^Include /etc/httpd/conf/extra/mod_lsapi.conf' /etc/httpd/conf/extra/httpd-includes.conf`
		if [ "${COUNTCLCONF}" -gt 0 ]; then
			echo "Removing mod_lsapi from apache configuration (extra/httpd-includes.conf)."
			perl -pi -e 's|^Include /etc/httpd/conf/extra/mod_lsapi.conf|#Include /etc/httpd/conf/extra/mod_lsapi.conf|' /etc/httpd/conf/extra/httpd-includes.conf
			if [ "$1" != "0" ]; then
				if [ "${WEBSERVER_OPT}" = "apache" ] || [ "${WEBSERVER_OPT}" = "nginx_apache" ]; then
					control_service httpd restart;
				fi
			fi
		fi
	fi
}

####################################################

doModHostingLimits() {
	if [ "${CLOUDLINUX_OPT}" = "yes" ]; then
		if [ "${WEBSERVER_OPT}" = "apache" ] || [ "${WEBSERVER_OPT}" = "nginx_apache" ]; then
			if [ ! -s /usr/include/lsapidef.h ]; then
				yum -y install liblsapi liblsapi-devel --enablerepo=cloudlinux-updates-testing
			else
				if [ -s ${STRINGS} ]; then
					MODLSAPIV="`${STRINGS} /usr/lib/apache/mod_lsapi.so | grep -m1 'version' | awk '{print $3}' | cut -d: -f1`"
					COUNT="`rpm -q liblsapi-${MODLSAPIV}.* | grep -c -m1 'is not installed'`"
					if [ "${COUNT}" != "0" ]; then
						yum -y update liblsapi liblsapi-devel --enablerepo=cloudlinux-updates-testing
					fi
				else
					yum -y update liblsapi liblsapi-devel --enablerepo=cloudlinux-updates-testing
				fi
			fi
			if [ ! -e /usr/bin/cmake ]; then
				yum -y install cmake
			fi
			if [ ! -e /usr/include/lve/lve-ctl.h ]; then
				yum -y install liblve-devel
			fi
			cd ${CWD}
			getFileCL mod_hostinglimits-${MOD_HOSTINGLIMITS_VER}.tar.gz mod_hostinglimits
			CL_MODDIR="mod_hostinglimits-${MOD_HOSTINGLIMITS_VER}"
			tar xzf mod_hostinglimits-${MOD_HOSTINGLIMITS_VER}.tar.gz
			cd ${CL_MODDIR}
			cmake CMakeLists.txt
			make install
			if [ ! -s /etc/httpd/conf/extra/modhostinglimits.conf ]; then
				${WGET} ${WGET_CONNECT_OPTIONS} -O /etc/httpd/conf/extra/modhostinglimits.conf http://repo.cloudlinux.com/cloudlinux/confs/modhostinglimits.conf
				perl -pi -e 's#/etc/httpd/modules/mod_hostinglimits.so#/usr/lib/apache/mod_hostinglimits.so#' /etc/httpd/conf/extra/modhostinglimits.conf
			fi
			#Inserting mod_hostinglimits to apache config
			COUNTCLCONF=`grep -m1 -c -e "modhostinglimits.conf" /etc/httpd/conf/extra/httpd-includes.conf`
			if [ "${COUNTCLCONF}" -eq 0 ]; then
				echo "Adding mod_hostinglimits to apache configuration (extra/httpd-includes.conf)."
				echo "#For LVE settings" >> /etc/httpd/conf/extra/httpd-includes.conf
				echo "Include /etc/httpd/conf/extra/modhostinglimits.conf" >> /etc/httpd/conf/extra/httpd-includes.conf
			else
				perl -pi -e 's|^#Include /etc/httpd/conf/extra/modhostinglimits.conf|Include /etc/httpd/conf/extra/modhostinglimits.conf|' /etc/httpd/conf/extra/httpd-includes.conf
			fi
			cd ${CWD}
			rm -rf ${CL_MODDIR}
			if [ "$1" != "0" ]; then
				control_service httpd restart;
			fi
		fi
	else
		#Removing mod_hostinglimits from apache config
		COUNTCLCONF=`grep -m1 -c -e '^Include /etc/httpd/conf/extra/modhostinglimits.conf' /etc/httpd/conf/extra/httpd-includes.conf`
		if [ "${COUNTCLCONF}" -gt 0 ]; then
			echo "Removing mod_hostinglimits from apache configuration (extra/httpd-includes.conf)."
			perl -pi -e 's|^Include /etc/httpd/conf/extra/modhostinglimits.conf|#Include /etc/httpd/conf/extra/modhostinglimits.conf|' /etc/httpd/conf/extra/httpd-includes.conf
			if [ "$1" != "0" ]; then
				if [ "${WEBSERVER_OPT}" = "apache" ] || [ "${WEBSERVER_OPT}" = "nginx_apache" ]; then
					control_service httpd restart;
				fi
			fi
		fi
	fi
}

####################################################

doPhp_build() {
	cd ${CWD};
	#$1 is PHP release
	#$2 is PHP mode
	INT_RELEASE=$1
	INT_MODE=$2
	SHORT_RELEASE=`echo ${INT_RELEASE} | tr -d '.'`
	PHP_VERSION_EVAL_VAR=PHP${SHORT_RELEASE}_VER
	PHP_VER=$(eval_var ${PHP_VERSION_EVAL_VAR})
	
	if [ "${INT_MODE}" = "mod_php" ]; then
		INT_EXT_DIR=`/usr/local/bin/php-config --extension-dir`
	else
		INT_EXT_DIR=`/usr/local/php${SHORT_RELEASE}/bin/php-config --extension-dir`
	fi
	
	getFile php-${PHP_VER}.tar.gz php${SHORT_RELEASE}
	
	if [ "${INT_MODE}" = "suphp" ]; then
		mkdir -p /usr/local/php${SHORT_RELEASE}/lib
		if [ ! -s ${SUPHP_SO} ]; then
			doSuPhp
		fi
	fi

	quitIfLocked doPhp
	
	cd ${CWD};
	FILE=${CWD}/php-${PHP_VER}.tar.gz
	checkFile ${FILE}
	echo "Extracting ...";
	tar xzf ${FILE} --no-same-owner
	echo "Done.";

	disable_asm_atomic
	
	if [ "${CLOUDLINUX_OPT}" = "yes" ]; then
		getFileCL cl-apache-patches.tar.gz cl-apache-patches
		tar xzf cl-apache-patches.tar.gz --no-same-owner
		getFileCL php-litespeed-${PHP_LITESPEED_VER}.tgz php-litespeed
	fi
	
	if [ "${INT_RELEASE}" = "5.3" ] || [ "${PHP_VER}" = "5.4.32" ] || [ "${PHP_VER}" = "5.5.16" ]; then
		getFile patches/php-5.3.28_apache-2.4.10-fpm.patch php53_apache-fpm_patch
	fi
	
	cd php-${PHP_VER}

	if [ "${CLOUDLINUX_OPT}" = "yes" ]; then
		cd sapi
		mv litespeed litespeed_orig
		tar xzf ../../php-litespeed-${PHP_LITESPEED_VER}.tgz --no-same-owner
		mv -f litespeed/*.h litespeed_orig/
		mv -f litespeed/*.c litespeed_orig/
		rm -rf litespeed
		mv litespeed_orig litespeed
		cd ../
	fi
	
	#make sure we have the sendmail link
	set_sendmail_link;

	#some reports of missing -lltdl, problem found to be simple missing link
	if [ ! -e /usr/lib/libltdl.so ]; then
		ln -sf libltdl.so.3 /usr/lib/libltdl.so
	fi
	
	if [ "${OS}" = "FreeBSD" ] && [ "${OS_VER}" = "6.1" ]; then
		if [ ! -e /lib/libm.so.3 ]; then
			ln -sf libm.so.4 /lib/libm.so.3
		fi
		if [ ! -e /lib/libz.so.2 ]; then
			ln -sf libz.so.3 /lib/libz.so.2
		fi
	fi
	
	echo "Configuring php-${PHP_VER}...";

	PHP_INI_INT=${PHP_INI}
	PHP_EXT_INT=${PHP_EXT}
	if [ "${CLOUDLINUX_OPT}" = "yes" ]; then
		patch -p1 --fuzz=1 < ../fpm-lve-php${INT_RELEASE}_autoconf.patch
		if [ "${INT_RELEASE}" = "5.3" ]; then
			if [ ! -e /usr/bin/autoconf-2.13 ]; then
				yum -y install autoconf213
			fi
			touch ac*
			/usr/bin/autoconf-2.13
		else
			touch ac*
			autoconf
		fi
	fi
	if [ "${INT_RELEASE}" = "5.3" ] || [ "${PHP_VER}" = "5.4.31" ] || [ "${PHP_VER}" = "5.5.15" ]; then
		echo "Patching PHP to fix bug #67541."
		patch -p1 < ../patches/php-5.3.28_apache-2.4.10-fpm.patch
		echo "Patching is done."
	fi
	CONFIGURE_FILE_VAR=PHP${SHORT_RELEASE}_CONFIGURE
	if [ "${INT_MODE}" != "mod_php" ]; then
		PHP_INI_INT_VAR=PHP_INI_FPM${SHORT_RELEASE};
		PHP_INI_INT=$(eval_var ${PHP_INI_INT_VAR});
	fi
	
	if [ "${INT_MODE}" != "mod_php" ]; then
		PHP_EXT_INT_VAR=PHP_EXT_FPM${SHORT_RELEASE};
		PHP_EXT_INT=$(eval_var ${PHP_EXT_INT_VAR});
	fi
	
	if [ "${INT_MODE}" = "php-fpm" ]; then
		CONFIGURE_FILE_VAR=PHP${SHORT_RELEASE}_CONFIGURE_FPM
	elif [ "${INT_MODE}" = "suphp" ]; then
		CONFIGURE_FILE_VAR=PHP${SHORT_RELEASE}_CONFIGURE_SUPHP
	elif [ "${INT_MODE}" = "fastcgi" ]; then
		CONFIGURE_FILE_VAR=PHP${SHORT_RELEASE}_CONFIGURE_FCGI
	elif [ "${INT_MODE}" = "lsphp" ]; then
		CONFIGURE_FILE_VAR=PHP${SHORT_RELEASE}_CONFIGURE_LSPHP
	fi
	CONF_FILE=${CWD}/$(eval_var ${CONFIGURE_FILE_VAR});

	if [ "${OS}" = "FreeBSD" ]; then
		if [ ${MAINVER} -ge 10 ]; then
			perl -pi -e 's#\t--with-icu-dir=/usr/local/icu \\\n##' ${CONF_FILE}
		fi
	fi
	
	#we need to make sure that the mysql path is set.
	MYSQL_H="";

	if [ -d /usr/local/mysql/include ]; then
			MYSQL_H=/usr/local/mysql
	fi

	if [ "${MYSQL_H}" = "" ]; then
		if [ -e /usr/include/mysql/mysql.h ]; then
				MYSQL_H=/usr
		fi
	fi

	if [ "${MYSQL_H}" != "" ]; then
		STR="perl -pi -e 's#with-mysql\s#with-mysql=${MYSQL_H} #' ${CONF_FILE}";
		eval ${STR};
		STR="perl -pi -e 's#with-mysql\"#with-mysql=${MYSQL_H}\"#' ${CONF_FILE}";
		eval ${STR};
		STR="perl -pi -e 's#with-pdo-mysql\"#with-pdo-mysql=${MYSQL_H}\"#' ${CONF_FILE}";
		eval ${STR};
		STR="perl -pi -e 's#with-pdo-mysql\s#with-pdo-mysql=${MYSQL_H} #' ${CONF_FILE}";
		eval ${STR};
	fi

	#we need to make sure that the mysqli path is set.
	MYSQLI_BIN="";
	if [ -e /usr/local/bin/mysql_config ]; then
		MYSQLI_BIN=/usr/local/bin/mysql_config
	fi
	if [ "${MYSQLI_BIN}" = "" ]; then
		if [ -e /usr/mysql/bin/mysql_config ]; then
			MYSQLI_BIN=/usr/mysql/bin/mysql_config
		fi
	fi
	if [ "${MYSQLI_BIN}" = "" ]; then
		if [ -e /usr/local/mysql/bin/mysql_config ]; then
			MYSQLI_BIN=/usr/local/mysql/bin/mysql_config
		fi
	fi
	if [ "${MYSQLI_BIN}" = "" ]; then
		if [ -e /usr/bin/mysql_config ]; then
			MYSQLI_BIN=/usr/bin/mysql_config
		fi
	fi

	if [ "${MYSQLI_BIN}" != "" ]; then
		STR="perl -pi -e 's#with-mysqli\s#with-mysqli=${MYSQLI_BIN} #' ${CONF_FILE}";
		eval ${STR};
		STR="perl -pi -e 's#with-mysqli\"#with-mysqli=${MYSQLI_BIN}\"#' ${CONF_FILE}";
		eval ${STR};
	fi

	MYSQL_SOCK='/var/lib/mysql/mysql.sock'
	if [ ! -e ${MYSQL_SOCK} ]; then
		MYSQL_SOCK="`${MYSQLI_BIN} --socket`"
	fi
	
	perl -pi -e "s#/var/lib/mysql/mysql.sock#${MYSQL_SOCK}#" ${CONF_FILE}

	#if this is a 64bit system,make sure libmysqlclient is correct.
	if [ -e /usr/lib64/libmysqlclient.so ] && [ ! -e /usr/lib/libmysqlclient.so ]; then
			ln -s /usr/lib64/libmysqlclient.so /usr/lib/libmysqlclient.so
	fi
	
	#Patch is only needed for PHP 5.3 now
	if [ "${OS}" = "FreeBSD" ] && [ "${INT_RELEASE}" = "5.3" ]; then
		echo "Patching fpm_sockets.c for https://bugs.php.net/bug.php?id=63983";
		perl -pi -e 's|info.tcpi_sacked|info.__tcpi_sacked|' sapi/fpm/fpm/fpm_sockets.c
		perl -pi -e 's|info.tcpi_unacked|info.__tcpi_unacked|' sapi/fpm/fpm/fpm_sockets.c
	fi
	
	#Enable systemd support for PHP
	if [ "${INT_MODE}" = "php-fpm" ] && [ "${SYSTEMD}" = "yes" ]; then
		COUNT="`grep -c 'with-fpm-systemd' ${CONF_FILE}`"
		if [ ${COUNT} -eq 0 ]; then
			perl -pi -e 's#--enable-fpm \\#--enable-fpm \\\n\t--with-fpm-systemd \\#' ${CONF_FILE}
		fi
	fi
	
	${CONF_FILE}
	if [ $? -ne 0 ]
	then
		printf "\n*** There was an error while trying to configure php. Check the configure file\n";
		do_exit 1;
	fi

	echo "Done Configuration.";

	while
	echo "Trying to make php..."
	do
	{
		C_INCLUDE_PATH=/usr/kerberos/include make -j ${CPU_CORES}

		if [ $? -ne 0 ]
		then
			if [ ${USER_INPUT} -eq 1 ]; then
				echo -n -e "\n*** The make has failed, would you like to try to make again? (y,n): ";
				read yesno;
				echo "";
			else
				if [ "${INPUT_VALUE}" = "d" ]; then
						yesno=n
				else
						yesno=${INPUT_VALUE}
				fi
			fi

			if [ "${yesno}" = "n" ]
			then
				do_exit 0;
			fi
		else
			break;
		fi
	}
	done
	echo "Make Complete";
	
	#change the pear settings to remove the -n option.
	#the default memory limit was messing this up.
	/usr/bin/perl -pi -e 's/PEAR_INSTALL_FLAGS = .*/PEAR_INSTALL_FLAGS = -dshort_open_tag=0 -dsafe_mode=0/' Makefile
	
	#Remove symlink if exists
	if [ -h /usr/local/php${SHORT_RELEASE}/sbin/php-fpm${SHORT_RELEASE} ]; then
		rm -f /usr/local/php${SHORT_RELEASE}/sbin/php-fpm${SHORT_RELEASE}
	fi
	
	if [ -e ${PHP_INI_INT} ]; then
	  
	  #short_open_tag: http://help.directadmin.com/item.php?id=438
	  perl -pi -e 's/^short_open_tag = Off/short_open_tag = On/' ${PHP_INI_INT}
	  
	  if [ "${INT_RELEASE}" != "5.3" ]; then
		  echo "Making PHP ${INT_RELEASE} installation compatible with php.ini file"
		  /usr/bin/perl -pi -e 's/^register_long_arrays/;register_long_arrays/' ${PHP_INI_INT}
		  /usr/bin/perl -pi -e 's/^magic_quotes_gpc/;magic_quotes_gpc/' ${PHP_INI_INT}
		  /usr/bin/perl -pi -e 's/^safe_mode/;safe_mode/' ${PHP_INI_INT}
		  /usr/bin/perl -pi -e 's/^register_globals/;register_globals/' ${PHP_INI_INT}
		  /usr/bin/perl -pi -e 's/^register_long_arrays/;register_long_arrays/' ${PHP_INI_INT}
		  /usr/bin/perl -pi -e 's/^allow_call_time_pass_reference/;allow_call_time_pass_reference/' ${PHP_INI_INT}
		  /usr/bin/perl -pi -e 's/^define_syslog_variables/;define_syslog_variables/' ${PHP_INI_INT}
		  /usr/bin/perl -pi -e 's/^highlight.bg/;highlight.bg/' ${PHP_INI_INT}
		  /usr/bin/perl -pi -e 's/^session.bug_compat_42/;session.bug_compat_42/' ${PHP_INI_INT}
		  /usr/bin/perl -pi -e 's/^session.bug_compat_warn/;session.bug_compat_warn/' ${PHP_INI_INT}
		  /usr/bin/perl -pi -e 's/^y2k_compliance/;y2k_compliance/' ${PHP_INI_INT}
		  /usr/bin/perl -pi -e 's/^magic_quotes_runtime/;magic_quotes_runtime/' ${PHP_INI_INT}
		  /usr/bin/perl -pi -e 's/^magic_quotes_sybase/;magic_quotes_sybase/' ${PHP_INI_INT}
	  fi
	fi
	
	PHP_EXT_INT_OLD="`echo ${PHP_EXT_INT} | perl -p0 -e 's|10-directadmin.ini|directadmin.ini|'`"
	if [ -e ${PHP_EXT_INT_OLD} ]; then
		rm -f ${PHP_EXT_INT_OLD}
	fi
	
	if [ -e ${PHP_EXT_INT} ]; then
		echo "Temporary disabling extensions..."
		mv -f ${PHP_EXT_INT} ${PHP_EXT_INT}.cb_backup
	fi
	
	while
	echo "Installing php...";
	do
	{
		make install

		if [ $? -ne 0 ]
		then
			if [ ${USER_INPUT} -eq 1 ]; then
				printf "\n*** The install has failed, would you like to try to install it again? (y,n): \n";
				read yesno;
				echo "";
			else
				if [ "${INPUT_VALUE}" = "d" ]; then
					yesno=n
				else
					yesno=${INPUT_VALUE}
				fi
			fi

			if [ "${yesno}" = "n" ]; then
				do_exit 0;
			fi
		else
			break;
		fi
	}
	done;

	if [ -e ${PHP_EXT_INT}.cb_backup ]; then
		echo "Enabling temporary disabled extensions..."
		mv -f ${PHP_EXT_INT}.cb_backup ${PHP_EXT_INT}
	fi
	
	#############################################################
	#we need to have this piece of code here, because without installation we do not have /usr/local/php53(54)/lib available, so we cannot copy php.ini there
	#old note: this was moved here, again for pear (before make install)
	echo "Copying php.ini..";
	if [ ! -e ${PHP_INI_INT} ]
	then
		cp php.ini-${PHP_INI_TYPE_OPT} ${PHP_INI_INT};
	else
		echo "${PHP_INI_INT} already exists, skipping.";
	fi
	
	COUNT=`grep -m1 -c '^date.timezone' ${PHP_INI_INT}`;
	COUNT2=`grep -m1 -c ';date.timezone' ${PHP_INI_INT}`;
	if [ "$COUNT" -eq 0 ] && [ "$COUNT2" -eq 0 ]; then
		echo "${boldon}Adding date.timezone = \"${PHP_TIMEZONE_OPT}\" to ${PHP_INI_INT}, please change it by yourself to fit your own needs.${boldoff}"
		echo "date.timezone = \"${PHP_TIMEZONE_OPT}\"" >> ${PHP_INI_INT}
	elif [ "$COUNT" -eq 0 ]; then
		echo "${boldon}Adding date.timezone = \"${PHP_TIMEZONE_OPT}\" to ${PHP_INI_INT}, please change it by yourself to fit your own needs.${boldoff}"
		perl -pi -e "s#;date.timezone.*#date.timezone = \"${PHP_TIMEZONE_OPT}\"#" ${PHP_INI_INT}
	fi
	/usr/bin/perl -pi -e 's/upload_max_filesize = 2M/upload_max_filesize = 64M/' ${PHP_INI_INT}
	/usr/bin/perl -pi -e 's/post_max_size = 8M/post_max_size = 64M/' ${PHP_INI_INT}

	if [ "${X_MAIL_HEADER_OPT}" = "yes" ]; then
		echo "Enabling  mail.add_x_header option in ${PHP_INI_INT}"
		/usr/bin/perl -pi -e 's/mail.add_x_header = Off/mail.add_x_header = On/' ${PHP_INI_INT}
		/usr/bin/perl -pi -e 's/mail.add_x_header = 0/mail.add_x_header = On/' ${PHP_INI_INT}
		COUNT=`grep -m1 -c '^mail.add_x_header' ${PHP_INI_INT}`
		if [ ${COUNT} -eq 0 ]; then
			echo "mail.add_x_header = On" >> ${PHP_INI_INT}
		fi
	else
		echo "Disabling mail.add_x_header option in ${PHP_INI_INT}"
		/usr/bin/perl -pi -e 's/^mail.add_x_header =/;mail.add_x_header =/' ${PHP_INI_INT}
	fi
	
	if [ "${INT_MODE}" != "mod_php" ]; then
		if [ -e /usr/local/php${SHORT_RELEASE}/bin/php${SHORT_RELEASE} ]; then
			echo "Creating symlink for /usr/local/php${SHORT_RELEASE}/bin/php${SHORT_RELEASE}..."
			ln -sf /usr/local/php${SHORT_RELEASE}/bin/php${SHORT_RELEASE} /usr/local/php${SHORT_RELEASE}/bin/php
		fi
		if [ -e /usr/local/php${SHORT_RELEASE}/bin/php-cgi${SHORT_RELEASE} ]; then
			echo "Creating symlink for /usr/local/php${SHORT_RELEASE}/bin/php-cgi${SHORT_RELEASE}..."
			ln -sf /usr/local/php${SHORT_RELEASE}/bin/php-cgi${SHORT_RELEASE} /usr/local/php${SHORT_RELEASE}/bin/php-cgi
		fi
		if [ -e /usr/local/php${SHORT_RELEASE}/bin/php-config${SHORT_RELEASE} ]; then
			echo "Creating symlink for /usr/local/php${SHORT_RELEASE}/bin/php-config${SHORT_RELEASE}..."
			ln -sf /usr/local/php${SHORT_RELEASE}/bin/php-config${SHORT_RELEASE} /usr/local/php${SHORT_RELEASE}/bin/php-config
		fi
		if [ -e /usr/local/php${SHORT_RELEASE}/bin/phpize${SHORT_RELEASE} ]; then
			echo "Creating symlink for /usr/local/php${SHORT_RELEASE}/bin/phpize${SHORT_RELEASE}..."
			ln -sf /usr/local/php${SHORT_RELEASE}/bin/phpize${SHORT_RELEASE} /usr/local/php${SHORT_RELEASE}/bin/phpize
		fi
	fi
	
	#############################################################
	#PHP Extensions
	if [ "${INT_MODE}" != "mod_php" ]; then
		if [ "${HTSCANNER_OPT}" = "yes" ]; then
			doPHPHtscanner ${INT_RELEASE} 1;
		fi
	fi
	
	if [ "${OPCACHE_OPT}" = "yes" ]; then
		doOpcache ${INT_RELEASE} ${INT_MODE} 1;
	fi
	
	if [ "${SUHOSIN_OPT}" = "yes" ]; then
		doSuhosin ${INT_RELEASE} ${INT_MODE} 1;
	fi
	
	if [ "${IONCUBE_OPT}" = "yes" ] && [ "${INT_RELEASE}" != "5.6" ]; then
		doIoncube ${INT_RELEASE} ${INT_MODE} 1;
	fi
	
	if [ "${INT_RELEASE}" = "5.3" ] || [ "${INT_RELEASE}" = "5.4" ]; then
		if [ "${ZEND_OPT}" = "yes" ]; then
			doZend ${INT_RELEASE} ${INT_MODE} 1;
		fi
	fi
	
	#############################################################
	
	if [ "${INT_MODE}" = "php-fpm" ]; then
		#configuration
		mkdir -p /usr/local/php${SHORT_RELEASE}/sockets
		if [ "${WEBSERVER_OPT}" = "apache" ] || [ "${WEBSERVER_OPT}" = "litespeed" ] || [ "${WEBSERVER_OPT}" = "nginx_apache" ]; then
			chown apache:apache /usr/local/php${SHORT_RELEASE}/sockets
		elif [ "${WEBSERVER_OPT}" = "nginx" ]; then
			chown nginx:nginx /usr/local/php${SHORT_RELEASE}/sockets
		fi
		FPM_SOCK_CHMOD=700
		if [ "${MOD_RUID2_OPT}" = "yes" ]; then
			FPM_SOCK_CHMOD=711
		fi
		chmod ${FPM_SOCK_CHMOD} /usr/local/php${SHORT_RELEASE}/sockets

		if [ ! -s /usr/local/php${SHORT_RELEASE}/etc/php-fpm.conf ]; then
			PHP_FPM_CONF_FILE=${WORKDIR}/configure/php-fpm/conf/php-fpm.conf.${SHORT_RELEASE}
			if [ -e ${WORKDIR}/custom/php-fpm/conf/php-fpm.conf.${SHORT_RELEASE} ]; then
				cp -f ${WORKDIR}/custom/php-fpm/conf/php-fpm.conf.${SHORT_RELEASE} /usr/local/php${SHORT_RELEASE}/etc/php-fpm.conf
			fi
		fi
		if [ ! -s /usr/local/php${SHORT_RELEASE}/etc/php-fpm.conf ]; then
			getFile php-fpm.conf.${SHORT_RELEASE} php-fpm-conf-${SHORT_RELEASE}
			cp -f ${CWD}/php-fpm.conf.${SHORT_RELEASE} /usr/local/php${SHORT_RELEASE}/etc/php-fpm.conf
		fi
		
		if [ ! -s /usr/local/php${SHORT_RELEASE}/etc/php-fpm.conf ]; then
			getFile php-fpm.conf.${SHORT_RELEASE} php-fpm-conf-${SHORT_RELEASE}
			cp -f ${CWD}/php-fpm.conf.${SHORT_RELEASE} /usr/local/php${SHORT_RELEASE}/etc/php-fpm.conf
		fi
		if [ "${WEBSERVER_OPT}" = "apache" ] || [ "${WEBSERVER_OPT}" = "litespeed" ] || [ "${WEBSERVER_OPT}" = "nginx_apache" ]; then
			perl -pi -e 's/nginx/apache/' /usr/local/php${SHORT_RELEASE}/etc/php-fpm.conf
		elif [ "${WEBSERVER_OPT}" = "nginx" ]; then
			perl -pi -e 's/apache/nginx/' /usr/local/php${SHORT_RELEASE}/etc/php-fpm.conf
		fi
		
		if [ "${SYSTEMD}" = "yes" ]; then
			if [ -e ${INITDDIR}/php-fpm${SHORT_RELEASE} ]; then
				echo "Removing ${INITDDIR}/php-fpm${SHORT_RELEASE}..."
				rm -f ${INITDDIR}/php-fpm${SHORT_RELEASE}
			fi
			echo "Enabling php-fpm${SHORT_RELEASE} in systemd..."
			if [ -e ${CB_CUST_SYSTEMD}/php-fpm.service ]; then
				cp -f ${CB_CUST_SYSTEMD}/php-fpm.service ${SYSTEMDDIR}/php-fpm${SHORT_RELEASE}.service
			else
				cp -f ${CB_SYSTEMD}/php-fpm.service ${SYSTEMDDIR}/php-fpm${SHORT_RELEASE}.service
			fi
			chmod 644 ${SYSTEMDDIR}/php-fpm${SHORT_RELEASE}.service
			perl -pi -e "s#/usr/local/php/sbin/php-fpm#/usr/local/php${SHORT_RELEASE}/sbin/php-fpm${SHORT_RELEASE}#" ${SYSTEMDDIR}/php-fpm${SHORT_RELEASE}.service
			perl -pi -e "s#/run/php-fpm.pid#/run/php-fpm${SHORT_RELEASE}.pid#" ${SYSTEMDDIR}/php-fpm${SHORT_RELEASE}.service
			systemctl daemon-reload
			systemctl enable php-fpm${SHORT_RELEASE}.service
		else
			if [ ! -e ${INITDDIR}/php-fpm${SHORT_RELEASE} ]; then
				cd ${CWD};
				if [ "${OS}" = "FreeBSD" ]; then
					getFile php-fpm.freebsd
					cp ${CWD}/php-fpm.freebsd ${INITDDIR}/php-fpm${SHORT_RELEASE}
					chmod 755 ${INITDDIR}/php-fpm${SHORT_RELEASE}
				elif [ -e /etc/debian_version ]; then
					getFile php-fpm.debian
					cp ${CWD}/php-fpm.debian ${INITDDIR}/php-fpm${SHORT_RELEASE}
					chmod 755 ${INITDDIR}/php-fpm${SHORT_RELEASE}
					update-rc.d php-fpm${SHORT_RELEASE} defaults
				else
					getFile php-fpm
					cp ${CWD}/php-fpm ${INITDDIR}/php-fpm${SHORT_RELEASE}
					chmod 755 ${INITDDIR}/php-fpm${SHORT_RELEASE}
					/sbin/chkconfig php-fpm${SHORT_RELEASE} on
				fi

				perl -pi -e "s|53|${SHORT_RELEASE}|" ${INITDDIR}/php-fpm${SHORT_RELEASE}
				
			fi
		fi

		if [ -e /usr/local/php${SHORT_RELEASE}/sbin/php-fpm ] && [ ! -e /usr/local/php${SHORT_RELEASE}/sbin/php-fpm${SHORT_RELEASE} ]; then
			mv /usr/local/php${SHORT_RELEASE}/sbin/php-fpm /usr/local/php${SHORT_RELEASE}/sbin/php-fpm${SHORT_RELEASE}
		fi		

		if [ ! -e /usr/local/php${SHORT_RELEASE}/sbin/php-fpm ]; then
			rm -f /usr/local/php${SHORT_RELEASE}/sbin/php-fpm
			ln -sf /usr/local/php${SHORT_RELEASE}/sbin/php-fpm${SHORT_RELEASE} /usr/local/php${SHORT_RELEASE}/sbin/php-fpm
		fi
		
		control_service php-fpm${SHORT_RELEASE} restart
		
		#Make log files available in /var/log
		if [ ! -h /var/log/php-fpm${SHORT_RELEASE}.log ]; then
			ln -sf /usr/local/php${SHORT_RELEASE}/var/log/php-fpm.log /var/log/php-fpm${SHORT_RELEASE}.log
		fi
	elif [ "${INT_MODE}" = "fastcgi" ]; then
		if [ ! -d /usr/local/safe-bin ]; then
			mkdir -p /usr/local/safe-bin
			chmod 511 /usr/local/safe-bin
			chown apache:apache /usr/local/safe-bin
		fi
		cp -f ${CWD}/configure/fastcgi/fcgid${SHORT_RELEASE}.sh /usr/local/safe-bin/fcgid${SHORT_RELEASE}.sh
		if [ -e ${CWD}/custom/fastcgi/fcgid${SHORT_RELEASE}.sh ]; then
			cp -f ${CWD}/custom/fastcgi/fcgid${SHORT_RELEASE}.sh /usr/local/safe-bin/fcgid${SHORT_RELEASE}.sh
		fi
		chown apache:apache /usr/local/safe-bin/fcgid${SHORT_RELEASE}.sh
		chmod 555 /usr/local/safe-bin/fcgid${SHORT_RELEASE}.sh
	fi
	
	if [ "${WEBSERVER_OPT}" = "litespeed" ] && [ -e /usr/local/php${SHORT_RELEASE}/bin/lsphp ]; then
		mkdir -p /usr/local/lsws/fcgi-bin
		if [ "${SYSTEMD}" = "yes" ]; then
			#No systemd file for litespeed yet
			${INITDDIR}/litespeed stop
		else
			${INITDDIR}/litespeed stop
		fi
		sleep 2;
		killall -9 litespeed >/dev/null 2>&1
		cp -pf /usr/local/php${SHORT_RELEASE}/bin/lsphp ${LSWS_HOME}/fcgi-bin/lsphp-${INT_RELEASE}
		if [ "${INT_RELEASE}" = "${PHP1_RELEASE_OPT}" ]; then
			rm -f ${LSWS_HOME}/fcgi-bin/lsphp
			ln -s ${LSWS_HOME}/fcgi-bin/lsphp-${INT_RELEASE} ${LSWS_HOME}/fcgi-bin/lsphp
			if [ ! -f "${LSWS_HOME}/fcgi-bin/lsphp4" ]; then
				ln -sf "${LSWS_HOME}/fcgi-bin/lsphp" "${LSWS_HOME}/fcgi-bin/lsphp4"
			fi
			if [ ! -f "${LSWS_HOME}/fcgi-bin/lsphp5" ]; then
				ln -sf "${LSWS_HOME}/fcgi-bin/lsphp" "${LSWS_HOME}/fcgi-bin/lsphp5"
			fi
		fi
		if [ "${SYSTEMD}" = "yes" ]; then
			#No systemd file for litespeed yet
			${INITDDIR}/litespeed start
		else
			${INITDDIR}/litespeed start
		fi
	fi
				
	doModLsapi 0;
	
	NATIVE_CONF=/etc/cl.selector/native.conf
	
	if [ -e ${NATIVE_CONF} ] && [ "${CLOUDLINUX_OPT}" = "yes" ] && [ "${PHP1_RELEASE}" != "mod_php" ]; then
		COUNT="`grep -c '^php=' ${NATIVE_CONF}`"
		if [ ${COUNT} -gt 0 ]; then
			CL_PHP_BIN=PHP_BIN_SUPHP${PHP1_SHORTRELEASE}
			OPTION="`grep '^php=' ${NATIVE_CONF} | cut -d= -f2`"
			CHARS="`echo ${OPTION} | wc -m`"
			if [ ${CHARS} -gt 0 ]; then
				perl -pi -e "s#${OPTION}#$(eval_var ${CL_PHP_BIN})#" ${NATIVE_CONF}
			fi
			if [ "${PHP1_MODE_OPT}" = "php-fpm" ]; then
				CL_PHP_FPM=PHP_SBIN_FPM${PHP1_SHORTRELEASE};
				OPTION="`grep '^php-fpm=' ${NATIVE_CONF} | cut -d= -f2`"
				CHARS="`echo ${OPTION} | wc -m`"
				if [ ${CHARS} -gt 0 ]; then
					perl -pi -e "s#${OPTION}#$(eval_var ${CL_PHP_FPM})#" ${NATIVE_CONF}
				fi
			fi
			OPTION="`grep '^php.ini=' ${NATIVE_CONF} | cut -d= -f2`"
			CHARS="`echo ${OPTION} | wc -m`"
			if [ ${CHARS} -gt 0 ]; then
				perl -pi -e "s#${OPTION}#${PHP1_INI_FILE}#" ${NATIVE_CONF}
			fi
		fi
		
	fi
	
	removeLockfile

	echo "PHP ${PHP_VER} Installed.";

	cd ${CWD};
}

####################################################

doModAclr2() {
	cd ${CWD};
	if [ "${WEBSERVER_OPT}" != "nginx_apache" ]; then
		echo "Cannot build mod_aclr2, because of the chosen webserver in the options.conf file."
		exit 1;
	fi
	getFile mod_aclr2-${MOD_ACLR2_VER}.tar.gz mod_aclr2
	
	FILE=${CWD}/mod_aclr2-${MOD_ACLR2_VER}.tar.gz
	checkFile ${FILE};
	echo "Extracting ${FILE}...";
	
	#We don't have a directory in a tarball, so we create it here, and extract files to it
	mkdir -p mod_aclr2-${MOD_ACLR2_VER}
	tar xzf ${FILE} -C ./mod_aclr2-${MOD_ACLR2_VER}
	cd mod_aclr2-${MOD_ACLR2_VER}
	
	echo "Installing mod_aclr2-${MOD_ACLR2_VER}...";

	APXS=/usr/sbin/apxs
	if [ ! -e $APXS ]; then
		echo "cannot find $APXS, trying a different path";
		APXS=/usr/bin/apxs
	fi
	$APXS -c mod_aclr2.c
	$APXS -i -a -n aclr mod_aclr2.la

	if [ $? -ne 0 ]
	then
		printf "\n*** There was an error while trying to install mod_aclr2-${MOD_ACLR2_VER}.\n";
		do_exit 1;
	fi
	
	perl -pi -e 's|^LoadModule aclr_module|#LoadModule aclr_module|' /etc/httpd/conf/httpd.conf

	echo "mod_aclr2 has been installed successfully.";

	cd ${CWD};
}

####################################################

doModRuid2() {
	cd ${CWD};
	if [ "${WEBSERVER_OPT}" = "nginx" ]; then
		echo "Cannot build mod_ruid2, because nginx webserver is chosen in the options.conf file."
		exit 1;
	fi
	if [ "${WEBSERVER_OPT}" = "litespeed" ]; then
		echo "Cannot build mod_ruid2, because litespeed webserver is chosen in the options.conf file."
 		return;
	fi
	getFile mod_ruid2-${MOD_RUID2_VER}.tar.bz2 mod_ruid2

	if [ "${MOD_RUID2_OPT}" != "yes" ]; then
		echo "You cannot install mod_ruid2, because you do not have it set in options.conf file.";
		exit 1;
	fi

	if [ ! -e /lib/libcap.so ] && [ ! -e /lib64/libcap.so ] && [ ! -e /lib/x86_64-linux-gnu/libcap.so ] && [ ! -e /lib/i386-linux-gnu/libcap.so ]; then
		echo "Cannot find libcap.so.  Please install libcap";
		if [ -e /etc/debian_version ]; then
			echo "apt-get install libcap-dev";
		else
			echo "yum -y install libcap-devel";
		fi
		return;
	fi
	
	if [ ! -e /usr/bin/bzip2 ] && [ ! -e /bin/bzip2 ]; then
		echo "Cannot find bzip2. Please install it.";
		if [ -e /etc/debian_version ]; then
			echo "apt-get install bzip2";
		else
			echo "yum -y install bzip2";
		fi
		return;
	fi
	
	FILE=${CWD}/mod_ruid2-${MOD_RUID2_VER}.tar.bz2
	checkFile ${FILE};
	echo "Extracting ${FILE}...";
	
	tar xjf ${FILE}
	cd mod_ruid2-${MOD_RUID2_VER}
	
	echo "Installing mod_ruid2-${MOD_RUID2_VER}...";

	APXS=/usr/sbin/apxs
	if [ ! -e $APXS ]; then
		echo "cannot find $APXS, trying a different path";
		APXS=/usr/bin/apxs
	fi
	$APXS -a -i -l cap -c mod_ruid2.c

	if [ $? -ne 0 ]
	then
		printf "\n*** There was an error while trying to install mod_ruid2-${MOD_RUID2_VER}.\n";
		do_exit 1;
	fi

	PHPMODULES=${HTTPDCONF}/extra/httpd-phpmodules.conf
	
	if [ -e ${PHPMODULES} ]; then
		COUNT="`grep -m1 -c 'ruid2_module' ${PHPMODULES}`"
		perl -pi -e 's|^LoadModule ruid2_module|#LoadModule ruid2_module|' /etc/httpd/conf/httpd.conf
		if [ ${COUNT} -eq 0 ]; then
			echo "LoadModule	ruid2_module		/usr/lib/apache/mod_ruid2.so" >> ${PHPMODULES}
			echo "Mutex sem" >> ${PHPMODULES}
		fi
	fi

	echo "action=rewrite&value=httpd" >> ${TASK_QUEUE}
	run_dataskq
	echo "mod_ruid2 has been installed successfully.";

	cd ${CWD};
}

####################################################

doModHtscanner() {
	cd ${CWD};
	if [ "${HTSCANNER_OPT}" = "no" ]; then
		echo "Cannot build htscanner, because you do not have it set in options.conf file."
		exit 1;
	fi
	if [ ! -e /usr/sbin/apxs ]; then
		echo "/usr/sbin/apxs is not found, skipping htscanner for now."
		return;
	fi
	getFile htscanner-${HTSCANNER_VER}.tgz htscanner
	
	FILE=${CWD}/htscanner-${HTSCANNER_VER}.tgz
	checkFile ${FILE};
	echo "Extracting ${FILE}...";
	
	tar xzf ${FILE}
	cd htscanner-${HTSCANNER_VER}
	
	echo "Installing mod_htscanner2-${HTSCANNER_VER}...";

	APXS=/usr/sbin/apxs
	if [ ! -e $APXS ]; then
		echo "cannot find $APXS, trying a different path";
		APXS=/usr/bin/apxs
	fi
	$APXS -a -i -c mod_htscanner2.c

	if [ $? -ne 0 ]
	then
		printf "\n*** There was an error while trying to install mod_htscanner2-${HTSCANNER_VER}.\n";
		do_exit 1;
	fi

	PHPMODULES=${HTTPDCONF}/extra/httpd-phpmodules.conf
	
	if [ -e ${PHPMODULES} ]; then
		COUNT="`grep -m1 -c 'htscanner_module' ${PHPMODULES}`"
		perl -pi -e 's|^LoadModule htscanner_module|#LoadModule htscanner_module|' /etc/httpd/conf/httpd.conf
		if [ ${COUNT} -eq 0 ]; then
			echo "LoadModule	htscanner_module		/usr/lib/apache/mod_htscanner2.so" >> ${PHPMODULES}
		fi
	fi

	echo "action=rewrite&value=httpd" >> ${TASK_QUEUE}
	run_dataskq
	echo "mod_htscanner2 has been installed successfully.";

	cd ${CWD};
}

####################################################

doModFCGID() {
	cd ${CWD};
	if [ "${WEBSERVER_OPT}" = "nginx" ]; then
		echo "Cannot build mod_fcgid, because nginx webserver is chosen in the options.conf file."
		exit 1;
	fi
	getFile mod_fcgid-${MOD_FCGID_VER}.tar.gz mod_fcgid
	getFile fcgid.sh fcgid_sh
	
	FILE=${CWD}/mod_fcgid-${MOD_FCGID_VER}.tar.gz
	checkFile ${FILE};
	echo "Extracting ${FILE}...";
	
	tar xzf ${FILE} --no-same-owner
	cd mod_fcgid-${MOD_FCGID_VER}
	
	if [ "${CLOUDLINUX_OPT}" = "yes" ]; then
		patch -p1 < ../mod_fcgid_2_3_7.patch
	fi
	
	echo "Installing mod_fcgid-${MOD_FCGID_VER}...";
	
	APXS=/usr/sbin/apxs ./configure.apxs

	while
	echo "Trying to make mod_fcgid-${MOD_FCGID_VER}..."
	do
	{
		make

		if [ $? -ne 0 ]
		then
			if [ ${USER_INPUT} -eq 1 ]; then
				printf "\n*** The make has failed, would you like to try to make again? (y,n): \n";
				read yesno;
				echo "";
                        else
                                if [ "${INPUT_VALUE}" = "d" ]; then
                                        yesno=n
                                else
                                        yesno=${INPUT_VALUE}
                                fi
                        fi

			if [ "${yesno}" = "n" ]
			then
				do_exit 0;
			fi
		else
			break;
		fi
	}
	done;
	echo "Make complete";
	echo "Installing mod_fcgid-${MOD_FCGID_VER}...";
	make install

	PHPMODULES=${HTTPDCONF}/extra/httpd-phpmodules.conf
	
	if [ -e ${PHPMODULES} ]; then
		COUNT="`grep -m1 -c 'fcgid_module' ${PHPMODULES}`"
		if [ ${COUNT} -eq 0 ]; then
			perl -pi -e 's|^LoadModule	fcgid_module|#LoadModule	fcgid_module|' /etc/httpd/conf/httpd.conf
			echo "LoadModule fcgid_module /usr/lib/apache/mod_fcgid.so" >> ${PHPMODULES}
		fi
		COUNT="`grep -m1 -c 'httpd-fcgid.conf' ${PHPMODULES}`"
		if [ ${COUNT} -eq 0 ]; then
			echo "Include /etc/httpd/conf/extra/httpd-fcgid.conf" >> ${PHPMODULES}
		fi
	fi
 
	if [ ! -e ${HTTPDCONF}/extra/httpd-fcgid.conf ] && [ -e ${CWD}/configure/ap2/conf/extra/httpd-fcgid.conf ]; then
	  cp ${CWD}/configure/ap2/conf/extra/httpd-fcgid.conf ${HTTPDCONF}/extra/httpd-fcgid.conf
	fi
	
	echo "action=rewrite&value=httpd" >> ${TASK_QUEUE}
	run_dataskq

	
	echo "mod_fcgid-${MOD_FCGID_VER} has been installed successfully.";

	cd ${CWD};
	cagefsctl_update;
}

doPigz() {
	if [ ! -e /usr/local/lib_da/lib/libz.a ]; then
		doZlib;
	fi
        cd ${CWD};
        getFile pigz-${PIGZ_VER}.tar.gz pigz
        
        FILE=${CWD}/pigz-${PIGZ_VER}.tar.gz
        checkFile ${FILE};
        echo "Extracting ${FILE}...";
        
        tar xzf ${FILE} --no-same-owner
        cd pigz-${PIGZ_VER}
        
        if [ -e /usr/local/lib_da/lib/libz.a ]; then
		perl -pi -e 's#-lz#/usr/local/lib_da/lib/libz.a#' Makefile
        fi
        
        echo "Installing pigz-${PIGZ_VER}...";
 
        while
        echo "Trying to make pigz-${PIGZ_VER}..."
        do
        {
		if [ "$OS" = "FreeBSD" ]; then
                        MAKE_BIN="/usr/local/bin/gmake"
                else
                        MAKE_BIN="make"
                fi
                
		if [ -e /usr/local/lib_da/lib/libz.a ]; then
			${MAKE_BIN} CFLAGS="-I/usr/local/lib_da/include/" -j ${CPU_CORES}
                else
			${MAKE_BIN} -j ${CPU_CORES}
                fi
 
                if [ $? -ne 0 ]
                then
                        if [ ${USER_INPUT} -eq 1 ]; then
                                printf "\n*** The make has failed, would you like to try to make again? (y,n): \n";
                                read yesno;
                                echo "";
                        else
                                if [ "${INPUT_VALUE}" = "d" ]; then
                                        yesno=n
                                else
                                        yesno=${INPUT_VALUE}
                                fi
                        fi
 
                        if [ "${yesno}" = "n" ]
                        then
                                do_exit 0;
                        fi
                else
                        break;
                fi
        }
        done;
        echo "Make complete";
        echo "Installing pigz-${PIGZ_VER}...";
        mv -f pigz /usr/local/bin/pigz
        mv -f unpigz /usr/local/bin/unpigz
       
        echo "Enabling pigz in directadmin.conf to use ${CPU_CORES} CPU core(s)."
        setVal pigz ${CPU_CORES} ${DACONF_TEMPLATE_FILE}
	setVal pigz ${CPU_CORES} ${DACONF_FILE}
	doRestartDA;
        echo "pigz-${PIGZ_VER} has been installed successfully.";
 
        cd ${CWD};
        cagefsctl_update;
}
####################################################

ensure_server_ca() {

	if [ "${WEBSERVER_OPT}" = "apache" ] || [ "${WEBSERVER_OPT}" = "litespeed" ] || [ "${WEBSERVER_OPT}" = "nginx_apache" ]; then
		SSL_CA=${HTTPDCONF}/ssl.crt/server.ca
		SSL_CRT=${HTTPDCONF}/ssl.crt/server.crt
		SSL_KEY=${HTTPDCONF}/ssl.key/server.key
		mkdir -p ${HTTPDCONF}/ssl.crt
	elif [ "${WEBSERVER_OPT}" = "nginx" ]; then
		SSL_CA=${NGINXCONF}/ssl.crt/server.ca
		SSL_CRT=${NGINXCONF}/ssl.crt/server.crt
		mkdir -p ${NGINXCONF}/ssl.crt
	else
		echo "Unknown value for webserver=${WEBSERVER_OPT}";
		return;
	fi

	if [ "${WEBSERVER_OPT}" = "nginx_apache" ]; then
		mkdir -p ${NGINXCONF}/ssl.crt
		mkdir -p ${NGINXCONF}/ssl.key
	fi
	
	echo "Checking to ensure ${SSL_CA} is set.";

	if [ ! -s ${SSL_CA} ]; then
		echo "Downloading new generic server.ca ...";
		${WGET} ${WGET_CONNECT_OPTIONS} -O ${SSL_CA} ${WEBPATH_SERVICES}/all/ssl/server.ca
		
		if [ ! -s ${SSL_CA} ]; then
			echo "Trying server.ca from backup services url...";
			${WGET} ${WGET_CONNECT_OPTIONS} -O ${SSL_CA} ${WEBPATH_SERVICES_BACKUP}/all/ssl/server.ca

			if [ ! -s ${SSL_CA} ]; then
				echo "server.ca download failed.";

				if [ -s ${SSL_CRT} ]; then
					echo "Copying main server.crt to server.ca just as a valid read value so apache can start up";
					cp -f ${SSL_CRT} ${SSL_CA}
				fi
			fi
		fi	
	fi
	
	if [ "${WEBSERVER_OPT}" = "nginx_apache" ]; then
		NG_CA=${NGINXCONF}/ssl.crt/server.ca
		NG_CRT=${NGINXCONF}/ssl.crt/server.crt
		NG_KEY=${NGINXCONF}/ssl.key/server.key

# Always copy apache certs to nginx, so that things wouldn't be complex (2 different places to setup certs..)
#		if [ ! -s ${NG_CA} ] && [ -s ${SSL_CA} ]; then
			cp -f ${SSL_CA} ${NG_CA}
#		fi
		
#		if [ ! -s ${NG_CRT} ] && [ -s ${SSL_CRT} ]; then
			cp -f ${SSL_CRT} ${NG_CRT}
#		fi 
		
		cp -f ${SSL_KEY} ${NG_KEY}
	fi
	
	if [ "${WEBSERVER_OPT}" = "nginx" ] || [ "${WEBSERVER_OPT}" = "nginx_apache" ]; then
		NG_CA=${NGINXCONF}/ssl.crt/server.ca
		NG_CRT=${NGINXCONF}/ssl.crt/server.crt
		
		if [ -s ${NG_CRT} ] && [ -s ${NG_CA} ]; then
			cat ${NG_CRT} > ${NG_CRT}.combined
			cat ${NG_CA} >> ${NG_CRT}.combined
		fi
		
		chmod 600 ${NGINXCONF}/ssl.crt/server.ca
		chmod 600 ${NGINXCONF}/ssl.crt/server.crt
		chmod 600 ${NG_CRT}.combined
	fi	
}

backupHttp() {
	echo "Backing up certificate and key, and turning off httpd for DirectAdmins's check.";

	if [ -e ${HTTPDCONF}/ssl.crt/server.crt ]
	then
		cp -fp ${HTTPDCONF}/ssl.crt/server.crt ${HTTPDCONF}/ssl.crt/server.crt.backup
	fi
	if [ -e ${HTTPDCONF}/ssl.key/server.key ]
	then
		cp -fp ${HTTPDCONF}/ssl.key/server.key ${HTTPDCONF}/ssl.key/server.key.backup
	fi
	if [ -e ${HTTPD_CONF} ]
	then
		cp -fp ${HTTPD_CONF} ${HTTPD_CONF}.backup
	fi
	
	#turn off httpd service checking
	set_service httpd OFF
}

restoreHttp() {
	echo "Restoring certificate and key, and turning on httpd for DirectAdmins's check.";

	if [ -e ${HTTPDCONF}/ssl.crt/server.crt.backup ]
	then
		cp -fp ${HTTPDCONF}/ssl.crt/server.crt.backup ${HTTPDCONF}/ssl.crt/server.crt
		chmod 600 ${HTTPDCONF}/ssl.crt/server.crt
	fi
	if [ -e ${HTTPDCONF}/ssl.key/server.key.backup ]
	then
		cp -fp ${HTTPDCONF}/ssl.key/server.key.backup ${HTTPDCONF}/ssl.key/server.key
		chmod 600 ${HTTPDCONF}/ssl.key/server.key
	fi
	if [ -e ${HTTPDCONF}/httpd.conf.backup ]
	then
		cp -fp ${HTTPDCONF}/httpd.conf.backup ${HTTPDCONF}/httpd.conf
	fi
	
	ensure_server_ca

	#turn on httpd service checking
	set_service httpd ON
}

####################################################

checkRPMS() {
	if [ ${OS} = "FreeBSD" ]; then
		return;
	fi

	if [ -e ${DEBIAN_VERSION} ]; then
		return;
	fi

	echo "Removing all apache related rpms...";
	rpm -e --nodeps mod_auth_pgsql 2> /dev/null
	rpm -e --nodeps mod_python 2> /dev/null
	rpm -e --nodeps mod_auth_mysql 2> /dev/null
	rpm -e --nodeps mod_auth_any 2> /dev/null
	rpm -e --nodeps mod_dav 2> /dev/null
	rpm -e --nodeps mod_ssl 2> /dev/null
	rpm -e --nodeps mod_perl 2> /dev/null
	rpm -e --nodeps mod_fpse 2> /dev/null
	rpm -e --nodeps apache-fp 2> /dev/null
	rpm -e --nodeps apache-fp-devel 2> /dev/null
	rpm -e --nodeps apache-manual 2> /dev/null
	rpm -e --nodeps apacheconf 2> /dev/null
	rpm -e --nodeps apache-devel 2> /dev/null
	rpm -e --nodeps apache 2> /dev/null
	rpm -e --nodeps httpd 2> /dev/null
	rpm -e --nodeps httpd-devel 2> /dev/null
	rpm -e --nodeps httpd-tools 2> /dev/null
	rpm -e --nodeps httpd-manual 2> /dev/null
	rpm -e --nodeps php 2> /dev/null
	echo "All apache related rpms have been removed.";
}

####################################################

addUserGroup() {
	if [ ${OS} = "FreeBSD" ]; then
		PW=/usr/sbin/pw
		if ! /usr/bin/grep -q "^${2}:" < /etc/group; then
			${PW} groupadd ${2}
		fi
		if ! /usr/bin/id ${1} > /dev/null; then
			${PW} useradd -g ${2} -n ${1} -s /sbin/nologin
		fi
	elif [ -e ${DEBIAN_VERSION} ]; then
		if ! /usr/bin/id ${1} > /dev/null; then
			adduser --system --group --no-create-home \
		            --disabled-login --force-badname ${1} > /dev/null
		fi
	else
		if ! /usr/bin/id ${1} > /dev/null; then				
			/usr/sbin/useradd -r -s /bin/false ${1}
		fi
	fi
}

####################################################

set64() {
	if [ ! -d /usr/lib64 ]; then
		return;
	fi

	if [ ! -e /usr/lib/libssl.so ]; then
		ln -sf /usr/lib64/libssl.so /usr/lib/libssl.so
	fi
	if [ ! -e /usr/lib/libidn.so ]; then
		ln -sf /usr/lib64/libidn.so /usr/lib/libidn.so
	fi
}

####################################################

doApacheCheck() {
	if [ ! -e ${HTTPDCONF}/extra/httpd-includes.conf ]; then
		echo -n "" > ${HTTPDCONF}/extra/httpd-includes.conf
	fi

	if [ ! -e ${SUPHP_HTTPD} ]; then
		echo -n "" > ${SUPHP_HTTPD}
	fi
	
	if [ ! -e ${HTTPDCONF}/extra/httpd-php-handlers.conf ]; then
		echo -n "" > ${HTTPDCONF}/extra/httpd-php-handlers.conf
	fi
	
	if [ ! -e ${HTTPDCONF}/extra/httpd-phpmodules.conf ]; then
		echo -n "" > ${HTTPDCONF}/extra/httpd-phpmodules.conf
	fi
}

####################################################

doRestartDA(){
	echo "action=directadmin&value=reload" >> ${TASK_QUEUE}
	run_dataskq
}

####################################################

hideFrontpage() {
        if [ -e ${DACONF_TEMPLATE_FILE} ] && [ "`grep -m1 -c frontpage_on ${DACONF_TEMPLATE_FILE}`" = "0" ]; then
                echo "frontpage_on=0" >> ${DACONF_TEMPLATE_FILE}
        fi

        if [ -e ${DACONF_FILE} ] && [ "`grep -m1 -c frontpage_on ${DACONF_FILE}`" = "0" ]; then
                echo "frontpage_on=0" >> ${DACONF_FILE}
                if [ -e /usr/local/directadmin/data ]; then
                        echo "action=directadmin&value=reload" >> ${TASK_QUEUE}
                fi
        fi
}

####################################################

setFDSETSIZE()
{
        #this bit is to increase the socket limit
        if [ -e /usr/include/bits/typesizes.h ]; then
                perl -pi -e 's/__FD_SETSIZE.*1024/__FD_SETSIZE 32768/' /usr/include/bits/typesizes.h
        fi

        if [ -e /usr/include/linux/posix_types.h ]; then
                perl -pi -e 's/__FD_SETSIZE.*1024/__FD_SETSIZE 32768/' /usr/include/linux/posix_types.h
        fi

        if [ -e /usr/include/bits/types.h ]; then
                perl -pi -e 's/__FD_SETSIZE.*1024/__FD_SETSIZE 32768/' /usr/include/bits/types.h
        fi

        #same thing, for freebsd
        if [ -e /usr/include/sys/select.h ]; then
                perl -pi -e 's/FD_SETSIZE.*1024U/FD_SETSIZE 32768U/' /usr/include/sys/select.h
        fi

        if [ ${OS} != "FreeBSD" ]; then
		NUMBER=`cat /proc/sys/fs/file-max`
		if [ ${NUMBER} -lt 131072 ]; then
                 echo "131072" > /proc/sys/fs/file-max
                fi
        fi
}

####################################################

#tokenize the IP
tokenize_IP() {
	TOKENFILE_APACHE=${HTTPDCONF}/extra/httpd-vhosts.conf

	TOKENFILE_NGINX=${NGINXCONF}/nginx.conf
	if [ -e ${TOKENFILE_NGINX} ]; then
		COUNT="`grep -c -m1 'nginx-vhosts\.conf' ${TOKENFILE_NGINX}`"
		if [ "${COUNT}" != "0" ]; then
			TOKENFILE_NGINX=${NGINXCONF}/nginx-vhosts.conf
		fi
	fi
	
	HOSTNAME=`hostname`;
	IP="`grep -r -l -m1 '^status=server$' /usr/local/directadmin/data/admin/ips | cut -d/ -f8`"
	if [ "${IP}" = "" ]; then
		IP="`grep -m1 ${HOSTNAME} /etc/hosts | awk '{print $1}'`"
		if [ "${IP}" = "" ]; then
			echo "Unable to detect your server IP in /etc/hosts. Please enter it: "
			read IP;
		fi
	fi
	if [ "${IP}" = "" ]; then
		echo "Unable to detect your server IP. Exiting..."
		do_exit 0;
	fi

	if [ "`echo ${IP} | grep -m1 -c ':'`" -gt 0 ]; then
		IP="[${IP}]";
	fi

	echo "Using $IP for your server IP";
			
	if [ "${WEBSERVER_OPT}" = "apache" ] || [ "${WEBSERVER_OPT}" = "litespeed" ] || [ "${WEBSERVER_OPT}" = "nginx_apache" ]; then
		if [ -e ${TOKENFILE_APACHE} ]; then
			if [ "`grep -m1 -c '|IP|' ${TOKENFILE_APACHE}`" -gt "0" ]; then
				STR="perl -pi -e 's/\|IP\|/$IP/' ${TOKENFILE_APACHE}";
				eval ${STR};
			fi
		fi
	fi
	
	if [ "${WEBSERVER_OPT}" = "nginx" ] || [ "${WEBSERVER_OPT}" = "nginx_apache" ]; then
		if [ -e ${TOKENFILE_NGINX} ]; then
			if [ "`grep -m1 -c '|IP|' ${TOKENFILE_NGINX}`" -gt "0" ]; then
				echo "Using $IP for your server IP";
				STR="perl -pi -e 's/\|IP\|/$IP/' ${TOKENFILE_NGINX}";
				eval ${STR};
			fi
		fi
	fi
}

#tokenize ports
tokenize_ports() {
	TOKENFILE_APACHE=${HTTPDCONF}/extra/httpd-vhosts.conf
	
	TOKENFILE_NGINX=${NGINXCONF}/nginx.conf
	if [ -e ${TOKENFILE_NGINX} ]; then
		COUNT="`grep -c -m1 'nginx-vhosts\.conf' ${TOKENFILE_NGINX}`"
		if [ "${COUNT}" != "0" ]; then
			TOKENFILE_NGINX=${NGINXCONF}/nginx-vhosts.conf
		fi
	fi

	if [ "${WEBSERVER_OPT}" = "apache" ] || [ "${WEBSERVER_OPT}" = "litespeed" ]; then
		if [ -e ${TOKENFILE_APACHE} ]; then
			if [ "`grep -m1 -c '|PORT_80|' ${TOKENFILE_APACHE}`" -gt "0" ]; then
				STR="perl -pi -e \"s/\|PORT_80\|/${PORT_80}/\" ${TOKENFILE_APACHE}";
				eval ${STR};
			else
				perl -pi -e "s/:${PORT_8080}\>/:${PORT_80}\>/" ${TOKENFILE_APACHE}
				perl -pi -e "s/^Listen ${PORT_8080}$/Listen ${PORT_80}/" ${TOKENFILE_APACHE}
			fi
			if [ "`grep -m1 -c '|PORT_443|' ${TOKENFILE_APACHE}`" -gt "0" ]; then
				STR="perl -pi -e \"s/\|PORT_443\|/${PORT_443}/\" ${TOKENFILE_APACHE}";
				eval ${STR};
			else
				perl -pi -e "s/:${PORT_8081}\>/:${PORT_443}\>/" ${TOKENFILE_APACHE}
				perl -pi -e "s/^Listen ${PORT_8081}$/Listen ${PORT_443}/" ${TOKENFILE_APACHE}
			fi
		
			SSLFILE=${HTTPDCONF}/extra/httpd-ssl.conf
			STR="perl -pi -e \"s/\|PORT_443\|/${PORT_443}/\" ${SSLFILE}";
			eval ${STR};
			perl -pi -e "s/:${PORT_8081}\>/:${PORT_443}\>/" ${SSLFILE}
			perl -pi -e "s/^Listen ${PORT_8081}$/Listen ${PORT_443}/" ${SSLFILE}
			
			perl -pi -e "s/:${PORT_8080}\>/:${PORT_80}\>/" ${HTTPD_CONF}
			perl -pi -e "s/^Listen ${PORT_8080}$/Listen ${PORT_80}/" ${HTTPD_CONF}
		fi
	fi
	
	if [ "${WEBSERVER_OPT}" = "nginx" ]; then
		if [ -e ${TOKENFILE_NGINX} ]; then
			if [ "`grep -m1 -c '|PORT_80|' ${TOKENFILE_NGINX}`" -gt "0" ]; then
				STR="perl -pi -e \"s/\|PORT_80\|/${PORT_80}/\" ${TOKENFILE_NGINX}";
				eval ${STR};
			fi
			if [ "`grep -m1 -c '|PORT_443|' ${TOKENFILE_NGINX}`" -gt "0" ]; then
				STR="perl -pi -e \"s/\|PORT_443\|/${PORT_443}/\" ${TOKENFILE_NGINX}";
				eval ${STR};
			fi
		fi
	fi
	
	if [ "${WEBSERVER_OPT}" = "nginx_apache" ]; then
		if [ -e ${TOKENFILE_NGINX} ]; then
			if [ "`grep -m1 -c '|PORT_80|' ${TOKENFILE_NGINX}`" -gt "0" ]; then
				STR="perl -pi -e \"s/\|PORT_80\|/${PORT_80}/\" ${TOKENFILE_NGINX}";
				eval ${STR};
			fi
			
			if [ "`grep -m1 -c '|PORT_443|' ${TOKENFILE_NGINX}`" -gt "0" ]; then
				STR="perl -pi -e \"s/\|PORT_443\|/${PORT_443}/\" ${TOKENFILE_NGINX}";
				eval ${STR};
			fi
			
			if [ "`grep -m1 -c '|PORT_8080|' ${TOKENFILE_NGINX}`" -gt "0" ]; then
				STR="perl -pi -e \"s/\|PORT_8080\|/${PORT_8080}/\" ${TOKENFILE_NGINX}";
				eval ${STR};
			fi
			
			if [ "`grep -m1 -c '|PORT_8081|' ${TOKENFILE_NGINX}`" -gt "0" ]; then
				STR="perl -pi -e \"s/\|PORT_8081\|/${PORT_8081}/\" ${TOKENFILE_NGINX}";
				eval ${STR};
			fi
		fi
		
		if [ -e ${TOKENFILE_APACHE} ]; then
			if [ "`grep -m1 -c '|PORT_80|' ${TOKENFILE_APACHE}`" -gt "0" ]; then
				STR="perl -pi -e \"s/\|PORT_80\|/${PORT_8080}/\" ${TOKENFILE_APACHE}";
				eval ${STR};
			else
				perl -pi -e "s/:${PORT_80}\>/:${PORT_8080}\>/" ${TOKENFILE_APACHE}
			fi
			
			if [ "`grep -m1 -c '|PORT_443|' ${TOKENFILE_APACHE}`" -gt "0" ]; then
				STR="perl -pi -e \"s/\|PORT_443\|/${PORT_8081}/\" ${TOKENFILE_APACHE}";
				eval ${STR};
			else
				perl -pi -e "s/:${PORT_443}\>/:${PORT_8081}\>/" ${TOKENFILE_APACHE}
			fi
		
			if [ "`grep -m1 -c "^Listen ${PORT_80}$" ${HTTPD_CONF}`" -gt 0 ]; then
				STR="perl -pi -e \"s/^Listen ${PORT_80}$/Listen ${PORT_8080}/\" ${HTTPD_CONF}";
				eval ${STR};
			else
				perl -pi -e "s/:${PORT_80}\>/:${PORT_8080}\>/" ${HTTPD_CONF}
			fi
		
			SSLFILE=${HTTPDCONF}/extra/httpd-ssl.conf
			STR="perl -pi -e \"s/\|PORT_443\|/${PORT_8081}/\" ${SSLFILE}";
			eval ${STR};
			perl -pi -e "s/:${PORT_443}\>/:${PORT_8081}\>/" ${SSLFILE}
			perl -pi -e "s/^Listen ${PORT_443}$/Listen ${PORT_8081}/" ${SSLFILE}
		fi
	fi
}

doCURL() {
	if [ "${CURL_OPT}" != "yes" ]; then
		echo "You cannot install curl, because you do not have it set in options.conf file.";
		return;
	fi

	getFile curl-${CURL_VER}.tar.gz curl
	quitIfLocked doCURL
	
	cd ${CWD};
	FILE=${CWD}/curl-${CURL_VER}.tar.gz
	checkFile ${FILE}
	echo "Extracting ...";
	tar xzf ${FILE} --no-same-owner
	echo "Done.";
	chmod -R 755 curl-${CURL_VER}
	cd curl-${CURL_VER}
	echo "Configuring curl-${CURL_VER}...";
	./configure
	/usr/bin/perl -pi -e 's/\#define HAVE_OPENSSL_ENGINE_H 1/\/\/\#define HAVE_OPENSSL_ENGINE_H 0/' ./lib/config.h;
	echo "Done. Making curl-${CURL_VER}...";
	while
	echo "Trying to make cURL..."
	do
	{
		if [ ${OS} = "FreeBSD" ]; then
			make
		else
			make CPPFLAGS=-I/usr/kerberos/include
		fi

		if [ $? -ne 0 ]
		then
			if [ ${USER_INPUT} -eq 1 ]; then
				printf "\n*** The make has failed, would you like to try to make again? (y,n): \n";
				read yesno;
				echo "";
                        else
                                if [ "${INPUT_VALUE}" = "d" ]; then
                                        yesno=n
                                else
                                        yesno=${INPUT_VALUE}
                                fi
                        fi

			if [ "${yesno}" = "n" ]
			then
				do_exit 0;
			fi
		else
			break;
		fi
	}
	done
	echo "Make complete";
	echo "Installing curl-${CURL_VER}...";
	make install
	echo "Done curl.";
	removeLockfile
	cd ${CWD}
	cagefsctl_update;
}

####################################################

doPCRE() {
	if [ "$NEW_PCRE_OPT" = "yes" ]; then
		getFile pcre-${PCRE_VER}.tar.gz pcre_current
	else
		getFile pcre-${PCRE_VER}.tar.gz pcre
	fi
	quitIfLocked doPCRE
	
	cd ${CWD};
	FILE=${CWD}/pcre-${PCRE_VER}.tar.gz
	checkFile ${FILE}
	echo "Extracting ...";
	tar xzf ${FILE} --no-same-owner
	echo "Done.";
	chmod -R 755 pcre-${PCRE_VER}
	cd pcre-${PCRE_VER}
	echo "Configuring pcre-${PCRE_VER}...";
	./configure --enable-utf8 --enable-unicode-properties
	echo "Done. Making pcre-${PCRE_VER}...";
	while
	echo "Trying to make PCRE..."
	do
	{
		make CPPFLAGS=-I/usr/kerberos/include

		if [ $? -ne 0 ]
		then
			if [ ${USER_INPUT} -eq 1 ]; then
				printf "\n*** The make has failed, would you like to try to make again? (y,n): \n";
				read yesno;
				echo "";
                        else
                                if [ "${INPUT_VALUE}" = "d" ]; then
                                        yesno=n
                                else
                                        yesno=${INPUT_VALUE}
                                fi
                        fi

			if [ "${yesno}" = "n" ]
			then
				do_exit 0;
			fi
		else
			break;
		fi
	}
	done
	echo "Make complete";
	echo "Installing pcre-${PCRE_VER}...";
	make install
	echo "Done pcre.";
	
	if [ "${OS}" = "FreeBSD" ]; then
		if [ ${MAINVER} -ge 10 ] && [ ! -e /usr/local/lib/libpcre.so.0 ] && [ -e /usr/local/lib/libpcre.so ]; then
			ln -sf /usr/local/lib/libpcre.so /usr/local/lib/libpcre.so.0
		fi
	fi
	
	/sbin/ldconfig

	removeLockfile
	cd ${CWD}
	cagefsctl_update;
}

####################################################

doMCrypt() {
	getFile libmcrypt-${MCRYPT_VER}.tar.gz mcrypt
	quitIfLocked doMCrypt
	
	cd ${CWD};
	FILE=${CWD}/libmcrypt-${MCRYPT_VER}.tar.gz
	checkFile ${FILE}
	echo "Extracting ...";
	tar xzf ${FILE} --no-same-owner
	echo "Done.";
	chmod -R 755 libmcrypt-${MCRYPT_VER}
	cd libmcrypt-${MCRYPT_VER}
	echo "Configuring libmcrypt-${MCRYPT_VER}...";
	./configure --enable-ltdl-install
	echo "Done. Making libmcrypt-${MCRYPT_VER}...";
	while
	echo "Trying to make mCrypt..."
	do
	{
		make

		if [ $? -ne 0 ]
		then
			if [ ${USER_INPUT} -eq 1 ]; then
				printf "\n*** The make has failed, would you like to try to make again? (y,n): \n";
				read yesno;
				echo "";
                        else
                                if [ "${INPUT_VALUE}" = "d" ]; then
                                        yesno=n
                                else
                                        yesno=${INPUT_VALUE}
                                fi
                        fi

			if [ "${yesno}" = "n" ]
			then
				do_exit 0;
			fi
		else
			break;
		fi
	}
	done
	echo "Make complete";
	echo "Installing mcrypt-${MCRYPT_VER}...";
	make install
	echo "Done mcrypt.";
	if [ -d ${WORKDIR}/libmcrypt-${MCRYPT_VER}/libltdl ]; then
		echo "Doing extra /libltdl for mcrypt..";
		cd libltdl
		./configure --enable-ltdl-install
		make
		make install
		echo "Done extra /libltdl for mcrypt.";
	fi
	removeLockfile
	cd ${CWD}
	cagefsctl_update;
}

####################################################

doMHash() {
	getFile mhash-${MHASH_VER}.tar.gz mhash
	quitIfLocked doMHash
	
        cd ${CWD};
        FILE=${CWD}/mhash-${MHASH_VER}.tar.gz
        checkFile ${FILE}
        echo "Extracting ...";
        tar xzf ${FILE} --no-same-owner
        echo "Done.";
	chmod -R 755 mhash-${MHASH_VER}
        cd mhash-${MHASH_VER}
        echo "Configuring mhash-${MHASH_VER}...";
        ./configure
        echo "Done. Making mhash-${MHASH_VER}...";
        while
        echo "Trying to make mHash..."
        do
        {
                make

                if [ $? -ne 0 ]
                then
			if [ ${USER_INPUT} -eq 1 ]; then
	                        printf "\n*** The make has failed, would you like to try to make again? (y,n): \n";
        	                read yesno;
                	        echo "";
                        else
                                if [ "${INPUT_VALUE}" = "d" ]; then
                                        yesno=n
                                else
                                        yesno=${INPUT_VALUE}
                                fi
                        fi

                        if [ "${yesno}" = "n" ]
                        then
                                do_exit 0;
                        fi
                else
                        break;
                fi
        }
        done
        echo "Make complete";
        echo "Installing mhash-${MHASH_VER}...";
        make install
        echo "Done mhash.";
	removeLockfile
        cd ${CWD}
        cagefsctl_update;
}

####################################################

doFreeType() {
	getFile freetype-${FREETYPE_VER}.tar.gz freetype
	quitIfLocked doFreeType
	
	if [ "${OS}" = "FreeBSD" ] && [ ! -e /usr/local/bin/gmake ]; then
		cd /usr/ports/devel/gmake
		make
		make install
		make clean
                if [ ! -e /usr/local/bin/gmake ]; then
                        ${PKG_INSTALL} gmake
                fi
                rehash
	fi
        cd ${CWD};
        FILE=${CWD}/freetype-${FREETYPE_VER}.tar.gz
        checkFile ${FILE}
        echo "Extracting ...";
        tar xzf ${FILE} --no-same-owner
        echo "Done.";
        cd freetype-${FREETYPE_VER}
        echo "Configuring freetype-${FREETYPE_VER}...";
        ./configure
        echo "Done. Making freetype-${FREETYPE_VER}...";
        while
        echo "Trying to make FreeType..."
        do
        {
		if [ "${OS}" = "FreeBSD" ]; then
			/usr/local/bin/gmake
		else
			make
		fi

                if [ $? -ne 0 ]
                then
			if [ ${USER_INPUT} -eq 1 ]; then
	                        printf "\n*** The make has failed, would you like to try to make again? (y,n): \n";
        	                read yesno;
                	        echo "";
                        else
                                if [ "${INPUT_VALUE}" = "d" ]; then
                                        yesno=n
                                else
                                        yesno=${INPUT_VALUE}
                                fi
                        fi

                        if [ "${yesno}" = "n" ]
                        then
                                do_exit 0;
                        fi
                else
                        break;
                fi
        }
        done
        echo "Make complete";
        echo "Installing freetype-${FREETYPE_VER}...";
	if [ "${OS}" = "FreeBSD" ]; then
		/usr/local/bin/gmake install
	else
		make install
	fi

	#fix for freetype.h path change: http://forum.directadmin.com/showthread.php?t=47795
	if [ -e /usr/local/include/freetype2/freetype.h ] && [ ! -e /usr/local/include/freetype2/freetype/freetype.h ]; then
		echo "Linking freetype/freetype.h to freetype.h";
		mkdir -p /usr/local/include/freetype2/freetype
		ln -s ../freetype.h /usr/local/include/freetype2/freetype/freetype.h
	fi

	#FreeType 2.5.2+ doesn't cleanup it's old ft2build.h.
	if [ "`version_cmp ${FREETYPE_VER} 2.5.1 'freetype ver check'`" -ge 0 ]; then
		FT_BUILD_OLD=/usr/local/include/ft2build.h
		FT_BUILD_NEW=/usr/local/include/freetype2/ft2build.h
		if [ -e ${FT_BUILD_OLD} ] && [ -e ${FT_BUILD_NEW} ]; then
			echo "Removing old header: ${FT_BUILD_OLD}";
			rm -f ${FT_BUILD_OLD}
		fi
	fi

        echo "Done FreeType.";
		removeLockfile
        cd ${CWD}
        cagefsctl_update;
}

####################################################

doICU() {
	getFile icu4c-${ICU_VER}-src.tgz icu4c
	quitIfLocked doICU
	
	if [ "${OS}" = "FreeBSD" ]; then
		if [ ${MAINVER} -ge 10 ]; then
			if [ ! -e /usr/local/lib/libicui18n.so ]; then
				${PKG_INSTALL} icu
				/sbin/ldconfig	
			fi
			return;
		fi
		
	fi
	
        cd ${CWD};
        FILE=${CWD}/icu4c-${ICU_VER}-src.tgz
        checkFile ${FILE}
        echo "Extracting ...";
        tar xzf ${FILE} --no-same-owner
        echo "Done.";
        cd icu/source
	mkdir -p /usr/local/icu
        echo "Configuring icu-${ICU_VER}...";
	./configure --prefix=/usr/local/icu

        echo "Done. Making icu-${ICU_VER}...";
        while
        echo "Trying to make icu..."
        do
        {
                if [ "$OS" = "FreeBSD" ]; then
                        /usr/local/bin/gmake
                else
                        make
                fi

                if [ $? -ne 0 ]
                then
			if [ ${USER_INPUT} -eq 1 ]; then
	                        printf "\n*** The make has failed, would you like to try to make again? (y,n): \n";
        	                read yesno;
                	        echo "";
                        else
                                if [ "${INPUT_VALUE}" = "d" ]; then
                                        yesno=n
                                else
                                        yesno=${INPUT_VALUE}
                                fi
                        fi

                        if [ "${yesno}" = "n" ]
                        then
                                do_exit 0;
                        fi
                else
                        break;
                fi
        }
        done
        echo "Make complete";
        echo "Installing icu4c-${ICU_VER}...";

        if [ "$OS" = "FreeBSD" ]; then
                /usr/local/bin/gmake install
        else
                make install
        fi

        echo "Done ICU.";
		removeLockfile
        cd ${CWD}
        cagefsctl_update;
}

####################################################

doIconv() {

	if [ "${OS}" = "FreeBSD" ]; then
		if [ "`echo $OS_VER | cut -d. -f1`" -ge 7 ] && [ "`echo $OS_VER | cut -d. -f1`" -lt 10 ]; then
			pkg_add -r http://${DOWNLOADSERVER_OPT}/services/packages-7-stable/Latest/libiconv.tbz
			/sbin/ldconfig
			return;
		else
			${PKG_INSTALL} libiconv
			/sbin/ldconfig
			return;
		fi
	fi

	getFile libiconv-${ICONV_VER}.tar.gz iconv
	quitIfLocked doIconv
	
        cd ${CWD};
        FILE=${CWD}/libiconv-${ICONV_VER}.tar.gz
        checkFile ${FILE}
        echo "Extracting ...";
        tar xzf ${FILE} --no-same-owner
        echo "Done.";
        cd libiconv-${ICONV_VER}
        echo "Configuring iconv-${ICONV_VER}...";

        ./configure --prefix=/usr/local --enable-extra-encodings

        echo "Done. Making iconv-${ICONV_VER}...";
        while
        echo "Trying to make iconv..."
        do
        {
		make
                #make -j ${CPU_CORES}

                if [ $? -ne 0 ]
                then
			if [ ${USER_INPUT} -eq 1 ]; then
	                        printf "\n*** The make has failed, would you like to try to make again? (y,n): \n";
        	                read yesno;
                	        echo "";
                        else
                                if [ "${INPUT_VALUE}" = "d" ]; then
                                        yesno=n
                                else
                                        yesno=${INPUT_VALUE}
                                fi
                        fi

                        if [ "${yesno}" = "n" ]
                        then
                                do_exit 0;
                        fi
                else
                        break;
                fi
        }
        done
        echo "Make complete";
        echo "Installing iconv-${ICONV_VER}...";
        make install
        echo "Done iconv.";
	removeLockfile
        cd ${CWD}

	if [ ! -e /usr/lib/libiconv.so.2 ]; then
		ln -s /usr/local/lib/libiconv.so.2 /usr/lib/libiconv.so.2
	fi

	/sbin/ldconfig
	cagefsctl_update;
}

####################################################

doLibxslt() {
	getFile libxslt-${LIBXSLT_VER}.tar.gz libxslt
	quitIfLocked doLibxslt
	
        cd ${CWD};
        FILE=${CWD}/libxslt-${LIBXSLT_VER}.tar.gz
        checkFile ${FILE}
        echo "Extracting ...";
        tar xzf ${FILE} --no-same-owner
        echo "Done.";
        cd libxslt-${LIBXSLT_VER}
        echo "Configuring libxslt-${LIBXSLT_VER}...";
        ${CWD}/${LIBXSLT_CONFIGURE}
	
        echo "Done. Making libxslt-${LIBXSLT_VER}...";
        while
        echo "Trying to make libxslt..."
        do
        {
                make -j ${CPU_CORES}

                if [ $? -ne 0 ]
                then
			if [ ${USER_INPUT} -eq 1 ]; then
	                        printf "\n*** The make has failed, would you like to try to make again? (y,n): \n";
        	                read yesno;
                	        echo "";
                        else
                                if [ "${INPUT_VALUE}" = "d" ]; then
                                        yesno=n
                                else
                                        yesno=${INPUT_VALUE}
                                fi
                        fi

                        if [ "${yesno}" = "n" ]
                        then
                                do_exit 0;
                        fi
                else
                        break;
                fi
        }
        done
        echo "Make complete";
        echo "Installing libxslt-${LIBXSLT_VER}...";
        make install
        echo "Done libxslt.";
	removeLockfile
        cd ${CWD}

	/sbin/ldconfig
	cagefsctl_update;
}

####################################################

doZlib() {
	quitIfLocked doZlib
	
        cd ${CWD};
	getFile zlib-${ZLIB_VER}.tar.gz zlib-current
        tar xzf zlib-${ZLIB_VER}.tar.gz --no-same-owner
        cd zlib-${ZLIB_VER}

        ./configure --prefix=/usr/local/lib_da

        while
        echo "Trying to make libz..."
        do
        {
                make -j ${CPU_CORES}

                if [ $? -ne 0 ]
                then
			if [ ${USER_INPUT} -eq 1 ]; then
	                        printf "\n*** The make has failed, would you like to try to make again? (y,n): \n";
        	                read yesno;
                	        echo "";
                        else
                                if [ "${INPUT_VALUE}" = "d" ]; then
                                        yesno=n
                                else
                                        yesno=${INPUT_VALUE}
                                fi
                        fi

                        if [ "${yesno}" = "n" ]
                        then
                                do_exit 0;
                        fi
                else
                        break;
                fi
        }
        done

        make install
	removeLockfile

	cd ${CWD};
	cagefsctl_update;
}

####################################################

doLibxml2() {
	getFile libxml2-${LIBXML2_VER}.tar.gz libxml2-current
	quitIfLocked doLibxml2
	
        cd ${CWD};
        FILE=${CWD}/libxml2-${LIBXML2_VER}.tar.gz
        checkFile ${FILE}
        echo "Extracting ...";
        tar xzf ${FILE} --no-same-owner
        echo "Done.";
        cd libxml2-${LIBXML2_VER}
        echo "Configuring libxml2-${LIBXML2_VER}...";

	#fix for this bug on FreeBSD 6:
	#http://forums.freebsd.org/showthread.php?t=20273
	if [ "${OS}" = "FreeBSD" ] && [ "${MAINVER}" = "6" ]; then
		echo "Patching configure to address this bug:";
		echo "http://forums.freebsd.org/showthread.php?t=20273";
		
		perl -pi -e 's/WIN32_EXTRA_PYTHON_LIBADD=\"/#WIN32_EXTRA_PYTHON_LIBADD=\"/' configure		
	fi

	#for old systems that still have /usr/local/lib/libz.so.
	#they need to compile against it, as it will be found first at binary runtime.
	if [ -s /usr/local/lib/libz.so ]; then
		perl -pi -e 's#with-zlib=/usr$#with-zlib=/usr/local#' ${CWD}/${LIBXML2_CONFIGURE}
	fi

        ${CWD}/${LIBXML2_CONFIGURE}

        echo "Done. Making libxml2-${LIBXML2_VER}...";
        while
        echo "Trying to make libxml2..."
        do
        {
                #make -j ${CPU_CORES}
		make

                if [ $? -ne 0 ]
                then
			if [ ${USER_INPUT} -eq 1 ]; then
	                        printf "\n*** The make has failed, would you like to try to make again? (y,n): \n";
        	                read yesno;
                	        echo "";
                        else
                                if [ "${INPUT_VALUE}" = "d" ]; then
                                        yesno=n
                                else
                                        yesno=${INPUT_VALUE}
                                fi
                        fi

                        if [ "${yesno}" = "n" ]
                        then
                                do_exit 0;
                        fi
                else
                        break;
                fi
        }
        done
        echo "Make complete";
        echo "Installing libxml2-${LIBXML2_VER}...";
        make install
        echo "Done libxml2. It is recommended to reinstall libxslt after update of libxml2.";
	removeLockfile
        cd ${CWD}

	/sbin/ldconfig
	cagefsctl_update;
}

####################################################

doM4() {
        cd ${CWD};
        getFile m4-${M4_VER}.tar.gz m4
        quitIfLocked doM4
        
        cd ${CWD};
        FILE=${CWD}/m4-${M4_VER}.tar.gz
        checkFile ${FILE}
        echo "Extracting ...";
        tar xzf ${FILE} --no-same-owner
        echo "Done.";
        cd m4-${M4_VER}

        echo "Configuring m4-${M4_VER}...";
        ./configure --prefix=/usr/local
        echo "Done. Making m4-${M4_VER}...";

        while
        echo "Trying to make m4..."
        do
        {
                LANG=c make;

                if [ $? -ne 0 ]
                then
                        if [ ${USER_INPUT} -eq 1 ]; then
                                printf "\n*** The make has failed, would you like to try to make again? (y,n): \n";
                                read yesno;
                                echo "";
                        else
                                if [ "${INPUT_VALUE}" = "d" ]; then
                                        yesno=n
                                else
                                        yesno=${INPUT_VALUE}
                                fi
                        fi

                        if [ "${yesno}" = "n" ]
                        then
                                do_exit 0;
                        fi
                else
                        break;
                fi
        }
        done
        echo "Make complete";
        echo "Installing m4-${M4_VER}...";
        LANG=c make install;
        echo "Done m4";

        removeLockfile
        cd ${CWD}
        cagefsctl_update;
}

####################################################

doAutoconf() {
	if [ "${AUTOCONF_OPT}" != "yes" ]; then
		echo "You cannot install autoconf, because you do not have it set in options.conf file.";
		exit 1;
	fi
	cd ${CWD};
	getFile autoconf-${AUTOCONF_VER}.tar.gz autoconf
	quitIfLocked doAutoconf
	
	cd ${CWD};
	FILE=${CWD}/autoconf-${AUTOCONF_VER}.tar.gz
	checkFile ${FILE}
	echo "Extracting ...";
	tar xzf ${FILE} --no-same-owner
	echo "Done.";
	cd autoconf-${AUTOCONF_VER}

	echo "Configuring autoconf-${AUTOCONF_VER}...";
	./configure --prefix=/usr/local
	echo "Done. Making autoconf-${AUTOCONF_VER}...";
	while
	echo "Trying to make autoconf..."
	do
	{
			LANG=c make;

			if [ $? -ne 0 ]; then
				if [ ${USER_INPUT} -eq 1 ]; then
					printf "\n*** The make has failed, would you like to try to make again? (y,n): \n";
					read yesno;
					echo "";
				else
					if [ "${INPUT_VALUE}" = "d" ]; then
						yesno=n
					else
						yesno=${INPUT_VALUE}
					fi
				fi

				if [ "${yesno}" = "n" ]
				then
					do_exit 0;
				fi
			else
				break;
			fi
	}
	done
	echo "Make complete";
	echo "Installing autoconf-${AUTOCONF_VER}...";
	LANG=c make install;
	echo "Done Autoconf";
	removeLockfile
	cd ${CWD}
	cagefsctl_update;
}

####################################################

doAutomake() {
	if [ "${AUTOMAKE_OPT}" != "yes" ]; then
		echo "You cannot install automake, because you do not have it set in options.conf file.";
		exit 1;
	fi
	cd ${CWD};
	getFile automake-${AUTOMAKE_VER}.tar.gz automake
	quitIfLocked doAutomake
	
	cd ${CWD};
	FILE=${CWD}/automake-${AUTOMAKE_VER}.tar.gz
	checkFile ${FILE}
	echo "Extracting ...";
	tar xzf ${FILE} --no-same-owner
	echo "Done.";
	cd automake-${AUTOMAKE_VER}

	echo "Configuring automake-${AUTOMAKE_VER}...";
	./configure --prefix=/usr/local
	echo "Done. Making automake-${AUTOMAKE_VER}...";
	while
	echo "Trying to make automake..."
	do
	{
			LANG=c make;

			if [ $? -ne 0 ]; then
				if [ ${USER_INPUT} -eq 1 ]; then
					printf "\n*** The make has failed, would you like to try to make again? (y,n): \n";
					read yesno;
					echo "";
				else
					if [ "${INPUT_VALUE}" = "d" ]; then
						yesno=n
					else
						yesno=${INPUT_VALUE}
					fi
				fi

				if [ "${yesno}" = "n" ]; then
					do_exit 0;
				fi
			else
				break;
			fi
	}
	done
	echo "Make complete";
	echo "Installing automake-${AUTOMAKE_VER}...";
	LANG=c make install;
	echo "Done Automake";
	removeLockfile
	cd ${CWD}
	cagefsctl_update;
}

####################################################

doLibtool() {
	if [ "${LIBTOOL_OPT}" != "yes" ]; then
		echo "You cannot install libtool, because you do not have it set in options.conf file.";
		exit 1;
	fi
	cd ${CWD};
	getFile libtool-${LIBTOOL_VER}.tar.gz libtool
	quitIfLocked doLibtool
	
	cd ${CWD};
	FILE=${CWD}/libtool-${LIBTOOL_VER}.tar.gz
	checkFile ${FILE}
	echo "Extracting ...";
	tar xzf ${FILE} --no-same-owner
	echo "Done.";
	cd libtool-${LIBTOOL_VER}

	echo "Configuring libtool-${LIBTOOL_VER}...";
	./configure --prefix=/usr/local
	echo "Done. Making libtool-${LIBTOOL_VER}...";
	while
	echo "Trying to make libtool..."
	do
	{
			LANG=c make;

			if [ $? -ne 0 ]; then
				if [ ${USER_INPUT} -eq 1 ]; then
					printf "\n*** The make has failed, would you like to try to make again? (y,n): \n";
					read yesno;
					echo "";
				else
					if [ "${INPUT_VALUE}" = "d" ]; then
						yesno=n
					else
						yesno=${INPUT_VALUE}
					fi
				fi

				if [ "${yesno}" = "n" ]; then
					do_exit 0;
				fi
			else
				break;
			fi
	}
	done
	echo "Make complete";
	echo "Installing libtool-${LIBTOOL_VER}...";
	LANG=c make install;

	#because the programmers of libtool decided not to actually show the true version
	#we have to change the version to make it accurate so things match
	COUNT=`grep -m1 -c ${LIBTOOL_VER} /usr/local/bin/libtool`
	if [ "$COUNT" -eq 0 ]; then
			perl -pi -e "s/2.2.6/${LIBTOOL_VER}/" /usr/local/bin/libtool
	fi

	echo "Done Libtool";
	removeLockfile
	cd ${CWD}
	cagefsctl_update;
}

####################################################

doWebalizer() {
	quitIfLocked doWebalizer
	
	if [ "${WEBALIZER_OPT}" != "yes" ]; then
		echo "You cannot install webalizer, because you do not have it set in options.conf file.";
		setVal webalizer 0 ${DACONF_TEMPLATE_FILE}
		setVal webalizer 0 ${DACONF_FILE}
		exit 1;
	fi
	
	
	PREFIX=/usr
	LIBPATH=/usr/lib
	INCPATH=/usr/include
	if [ ${OS} = "FreeBSD" ]; then
		PREFIX=/usr/local
		LIBPATH=/usr/local/lib
		INCPATH=/usr/local/include
	fi

	if [ -e ${PREFIX}/bin/webalizer ]; then
		echo "The webalizer binary exists, aborting.  Delete ${PREFIX}/bin/webalizer if you wish to compile."
		removeLockfile
		return;
	fi

        cd ${CWD};
        getFile ${WEBALIZER_FILE} webalizer
        tar xzf ${WEBALIZER_FILE} --no-same-owner
        cd ${WEBALIZER}

        export LD_LIBRARY_PATH=${LIBPATH}
        ./configure --prefix=${PREFIX} --with-png=${LIBPATH} --with-gdlib=${LIBPATH} --with-gd=${INCPATH} --enable-dns --with-dblib --with-db --with-z-inc --with-zlib

        while
        echo "Trying to make webalizer..."
        do
        {
                make

                if [ $? -ne 0 ]
                then
			if [ ${USER_INPUT} -eq 1 ]; then
	                        echo -n -e "\n*** The make has failed, would you like to try to make again? (y,n): ";
        	                read yesno;
                	        echo "";
                        else
                                if [ "${INPUT_VALUE}" = "d" ]; then
                                        yesno=n
                                else
                                        yesno=${INPUT_VALUE}
                                fi
                        fi

                        if [ "${yesno}" = "n" ]
                        then
				removeLockfile
                                return;
                        fi
                else
                        break;
                fi
        }
        done

        make install
	removeLockfile

	if [ "${AWSTATS_OPT}" = "no" ]; then
		setVal awstats 0 ${DACONF_TEMPLATE_FILE}
		setVal awstats 0 ${DACONF_FILE}
	else
		setVal awstats 1 ${DACONF_TEMPLATE_FILE}
		setVal awstats 1 ${DACONF_FILE}
	fi
	
	doRestartDA;
	
	if [ -e /etc/webalizer.conf ]; then
		mv -f /etc/webalizer.conf /etc/webalizer.conf.moved 2> /dev/null > /dev/null
	fi
	
	cagefsctl_update;
}

####################################################

doawstats() {
	if [ "${AWSTATS_OPT}" != "yes" ]; then
		echo "You cannot install awstats, because you do not have it set in options.conf file.";
		setVal awstats 0 ${DACONF_TEMPLATE_FILE}
		setVal awstats 0 ${DACONF_FILE}
		exit 1;
	fi
	
	HTTPPATH=http://${DOWNLOADSERVER_OPT}/services/all/awstats
	TARFILE=${WORKDIR}/awstats-${AWSTATS_VER}.tar.gz
	USR=/usr/local
	REALPATH=${USR}/awstats-${AWSTATS_VER}
	ALIASPATH=${USR}/awstats
	
	if [ ! -e ${TARFILE} ]; then
		${WGET} ${WGET_CONNECT_OPTIONS} -O ${TARFILE} ${HTTPPATH}/awstats-${AWSTATS_VER}.tar.gz
	fi

	if [ ! -e ${TARFILE} ]; then
        echo "Cannot download awstats-${AWSTATS_VER}"
        exit 1
	fi

	M=`checkMD5 $TARFILE awstats`
        if [ "$M" != "0" ]; then
                echo "";
                echo "${boldon}*** MD5 Checksum for $TARFILE Failed.  Redownloading...***${boldoff}";
                echo "";
		${WGET} ${WGET_CONNECT_OPTIONS} -O ${TARFILE} ${WEBPATH_SERVICES}/all/awstats-${AWSTATS_VER}.tar.gz

                M=`checkMD5 $TARFILE awstats`
                if [ "$M" != "0" ]; then
                                echo "";
                                echo "";
                                echo "${boldon}*** MD5 Checksum for $TARFILE failed *again*.***${boldoff}";
                                echo "The md5 checksum value may be incorrect, or a wrong file is being downloaded.";
                                echo "Install continuing with this possibly corrupted file. (it may also be fine)";
                                echo "";
                                echo "";
                fi
	fi
	
	getFile patches/awstats_url.patch awstats_url_patch

	#Extract the file
	${TAR} xzf ${TARFILE} --no-same-owner -C ${USR}

	if [ ! -e ${REALPATH} ]; then
		echo "Directory ${REALPATH} does not exist"
		exit 1
	fi

	#link it from a fake path:
	/bin/rm -f ${ALIASPATH}
	/bin/ln -sf ${REALPATH} ${ALIASPATH}
	cd ${REALPATH}
	chown -R root:${ROOT_GRP} ${REALPATH}
	chmod -R 755 ${REALPATH}
	
	if [ "`version_cmp ${AWSTATS_VER} 7.3 'awstats ver check'`" -lt 0 ]; then
		#patch the url bug
		echo "Patching awstats_buildstaticpages.pl to fix url bug...";
		cd ${REALPATH}/tools
		cp -f ${WORKDIR}/patches/awstats_url.patch ./awstats_url.patch
		if [ ! -s awstats_url.patch ]; then
			echo "Error with awstats_url.patch. File is missing or empty";
			echo "This will cause url issues in the static awstats output.";
		else
			patch -p0 < awstats_url.patch
		fi
	fi

	#setup the directadmin.conf
	setVal awstats 1 ${DACONF_TEMPLATE_FILE}
	setVal awstats 1 ${DACONF_FILE}
	if [ "${WEBALIZER_OPT}" = "no" ]; then
		setVal webalizer 0 ${DACONF_TEMPLATE_FILE}
		setVal webalizer 0 ${DACONF_FILE}
	else
		setVal webalizer 1 ${DACONF_TEMPLATE_FILE}
		setVal webalizer 1 ${DACONF_FILE}
	fi

	doRestartDA;
	cd ${CWD};
	echo "AWstats ${AWSTATS_VER} installation is done."
}

####################################################

doUpdateScript() {
	cd ${CWD}
	cp -f options.conf ..
	cd ..
	if [ ${OS} = "FreeBSD" ]
	then
		fetch -o ./${NAME}.tar.gz ${WEBPATH}/${CUSTOMBUILD_OPT}/${NAME}.tar.gz
	else
		${WGET} ${WGET_CONNECT_OPTIONS} -O ./${NAME}.tar.gz ${WEBPATH}/${CUSTOMBUILD_OPT}/${NAME}.tar.gz
	fi
	
	if [ -s ${NAME}.tar.gz ]; then
		echo "Extracting ${NAME}.tar.gz...";

		tar xvzf ${NAME}.tar.gz --no-same-owner
		mv -f options.conf ${WORKDIR}
		cd ${CWD}
		
		downloadVersionsTxt;

		chmod 700 build
	else
		echo "Unable to extract ${NAME}.tar.gz.";
	fi
}

####################################################

doUpdate() {
	doUpdateScript;	
	cd ${CWD};
 	./build update_data;
}

####################################################

doPhpConf() {
	if [ "${WEBSERVER}" = "litespeed" ]; then
		return;
	fi
	
	if [ "${HAVE_FPM_CGI}" = "yes" ]; then
		for php_shortrelease in `echo ${PHP1_SHORTRELEASE_SET}`; do {
			set_service php-fpm${php_shortrelease} OFF
		};
		done;
	else
		for php_shortrelease in `echo ${PHP1_SHORTRELEASE_SET}`; do {
			set_service php-fpm${php_shortrelease} delete
		};
		done;
	fi
	
	fpmChecks;
	
	if [ "${WEBSERVER_OPT}" = "apache" ] || [ "${WEBSERVER_OPT}" = "litespeed" ] || [ "${WEBSERVER_OPT}" = "nginx_apache" ]; then
		doApacheHostConf;
	
		# Writing data to httpd-php-handlers.conf
		echo -n "" > ${PHP_HANDLERS_HTTPD}
		
		echo '<FilesMatch "\.(inc|php|php3|php4|php44|php5|php52|php53|php54|php55|php56|php6|phtml|phps)$">' >> ${PHP_HANDLERS_HTTPD}


		if [ "${PHP1_MODE_OPT}" = "mod_php" ]; then
			echo "AddHandler application/x-httpd-php .inc .php .php5 .php${PHP1_SHORTRELEASE} .phtml" >> ${PHP_HANDLERS_HTTPD}
		fi

		if [ "${PHP2_MODE_OPT}" = "mod_php" ] && [ "${PHP2_RELEASE_OPT}" != "no" ]; then
			echo "AddHandler application/x-httpd-php .php${PHP2_SHORTRELEASE}" >> ${PHP_HANDLERS_HTTPD}
		fi
		
		if [ "${PHP1_MODE_OPT}" = "mod_php" ] || [ "${PHP2_MODE_OPT}" = "mod_php" ]; then
			echo "AddHandler application/x-httpd-php-source .phps" >> ${PHP_HANDLERS_HTTPD}
		fi
		
		if [ "${PHP1_MODE_OPT}" = "lsphp" ]; then
			echo "AddHandler application/x-httpd-lsphp .inc .php .php5 .php${PHP1_SHORTRELEASE} .phtml" >> ${PHP_HANDLERS_HTTPD}
		fi
		
		if [ "${PHP1_MODE_OPT}" = "lsphp" ]; then
			echo "AddHandler application/x-httpd-php-source .phps" >> ${PHP_HANDLERS_HTTPD}
		fi
		
		echo '</FilesMatch>' >> ${PHP_HANDLERS_HTTPD}

		echo "AddType text/html .php" >> ${PHP_HANDLERS_HTTPD}
	fi
	
	for php_shortrelease in `echo ${PHP1_SHORTRELEASE_SET}`; do {
		eval `echo "HAVE_FPM${php_shortrelease}=no"`;
	};
	done;
	
	if [ "${PHP1_MODE_OPT}" = "php-fpm" ]; then
		if [ "${SYSTEMD}" = "yes" ]; then
			systemctl restart php-fpm${PHP1_SHORTRELEASE}.service
			systemctl enable php-fpm${PHP1_SHORTRELEASE}.service
		else
			${INITDDIR}/php-fpm${PHP1_SHORTRELEASE} restart
			if [ ${OS} = "FreeBSD" ]
			then
				${INITDDIR}/php-fpm${PHP1_SHORTRELEASE} restart
			elif [ -e /etc/debian_version ]; then
				update-rc.d php-fpm${PHP1_SHORTRELEASE} defaults
			else
				/sbin/chkconfig php-fpm${PHP1_SHORTRELEASE} on
			fi
		fi
		
		set_service php-fpm${PHP1_SHORTRELEASE} ON
		eval `echo "HAVE_FPM${PHP1_SHORTRELEASE}=yes"`;
	fi
	if [ "${PHP2_MODE_OPT}" = "php-fpm" ] && [ "${PHP2_RELEASE_OPT}" != "no" ]; then
		if [ "${SYSTEMD}" = "yes" ]; then
			systemctl restart php-fpm${PHP2_SHORTRELEASE}.service
			systemctl enable php-fpm${PHP2_SHORTRELEASE}.service
		else
			${INITDDIR}/php-fpm${PHP2_SHORTRELEASE} restart
			if [ ${OS} = "FreeBSD" ]
			then
				${INITDDIR}/php-fpm${PHP2_SHORTRELEASE} restart
			elif [ -e /etc/debian_version ]; then
				update-rc.d php-fpm${PHP2_SHORTRELEASE} defaults
			else
				/sbin/chkconfig php-fpm${PHP2_SHORTRELEASE} on
			fi
		fi
		
		set_service php-fpm${PHP2_SHORTRELEASE} ON
		eval `echo "HAVE_FPM${PHP2_SHORTRELEASE}=yes"`;
	fi
	
	for php_shortrelease in `echo ${PHP1_SHORTRELEASE_SET}`; do {
		EVAL_FPM_VAR=HAVE_FPM${php_shortrelease}
		HAVE_SHORTRELEASE="$(eval_var ${EVAL_FPM_VAR})"
		if [ "${HAVE_SHORTRELEASE}" = "no" ]; then
			if [ "${SYSTEMD}" = "yes" ]; then
				systemctl stop php-fpm${php_shortrelease}.service 2> /dev/null
				systemctl disable php-fpm${php_shortrelease}.service 2> /dev/nulll
				if [ -e ${INITDDIR}/php-fpm${php_shortrelease} ]; then
					rm -f ${INITDDIR}/php-fpm${php_shortrelease}
				fi
				if [ -e ${SYSTEMDDIR}/php-fpm${php_shortrelease}.service ]; then
					rm -f ${SYSTEMDDIR}/php-fpm${php_shortrelease}.service
				fi
				systemctl daemon-reload
			else
				if [ -e ${INITDDIR}/php-fpm${php_shortrelease} ]; then
					if [ -e /etc/debian_version ]; then
						update-rc.d php-fpm${php_shortrelease} remove
					elif [ -e /sbin/chkconfig ]; then
						/sbin/chkconfig php-fpm${php_shortrelease} off
					fi
					${INITDDIR}/php-fpm${php_shortrelease} stop
				fi
				set_service php-fpm${php_shortrelease} delete
				rm -f ${INITDDIR}/php-fpm${php_shortrelease}
			fi
		fi
	};
	done;

	if [ "${WEBSERVER_OPT}" = "apache" ] || [ "${WEBSERVER_OPT}" = "litespeed" ] || [ "${WEBSERVER_OPT}" = "nginx_apache" ]; then
		if [ "${HAVE_SUPHP_CGI}" = "yes" ]; then
			# Writing data to suphp.conf
			echo -n "" > ${SUPHP_CONF_FILE}
			echo "[global]" >> ${SUPHP_CONF_FILE}
			echo ";Path to logfile" >> ${SUPHP_CONF_FILE}
			echo "logfile=/var/log/suphp.log" >> ${SUPHP_CONF_FILE}
			echo "" >> ${SUPHP_CONF_FILE}
			echo ";Loglevel" >> ${SUPHP_CONF_FILE}
			echo "loglevel=warn" >> ${SUPHP_CONF_FILE}
			echo "" >> ${SUPHP_CONF_FILE}
			echo ";User Apache is running as" >> ${SUPHP_CONF_FILE}
			echo "webserver_user=apache" >> ${SUPHP_CONF_FILE}
			echo "" >> ${SUPHP_CONF_FILE}
			echo ";Path all scripts have to be in" >> ${SUPHP_CONF_FILE}
			echo "docroot=/" >> ${SUPHP_CONF_FILE}
			echo "" >> ${SUPHP_CONF_FILE}
			echo "; Security options" >> ${SUPHP_CONF_FILE}
			echo "allow_file_group_writeable=false" >> ${SUPHP_CONF_FILE}
			echo "allow_file_others_writeable=false" >> ${SUPHP_CONF_FILE}
			echo "allow_directory_group_writeable=false" >> ${SUPHP_CONF_FILE}
			echo "allow_directory_others_writeable=false" >> ${SUPHP_CONF_FILE}
			echo "" >> ${SUPHP_CONF_FILE}
			echo ";Check wheter script is within DOCUMENT_ROOT" >> ${SUPHP_CONF_FILE}
			echo "check_vhost_docroot=false" >> ${SUPHP_CONF_FILE}
			echo "" >> ${SUPHP_CONF_FILE}
			echo ";Send minor error messages to browser" >> ${SUPHP_CONF_FILE}
			echo "errors_to_browser=true" >> ${SUPHP_CONF_FILE}
			echo "" >> ${SUPHP_CONF_FILE}
			echo ";PATH environment variable" >> ${SUPHP_CONF_FILE}
			echo "env_path=\"/bin:/usr/bin\"" >> ${SUPHP_CONF_FILE}
			echo "" >> ${SUPHP_CONF_FILE}
			echo ";Umask to set, specify in octal notation" >> ${SUPHP_CONF_FILE}
			echo "umask=0022" >> ${SUPHP_CONF_FILE}
			echo "" >> ${SUPHP_CONF_FILE}
			echo ";Minimum UID" >> ${SUPHP_CONF_FILE}
			echo "min_uid=100" >> ${SUPHP_CONF_FILE}
			echo "" >> ${SUPHP_CONF_FILE}
			echo ";Minimum GID" >> ${SUPHP_CONF_FILE}
			echo "min_gid=100" >> ${SUPHP_CONF_FILE}
			echo "" >> ${SUPHP_CONF_FILE}
			echo "[handlers]" >> ${SUPHP_CONF_FILE}
			echo ";Handler for php-scripts" >> ${SUPHP_CONF_FILE}

			if [ "${PHP1_MODE_OPT}" = "suphp" ]; then
				echo "x-httpd-php${PHP1_SHORTRELEASE}=\"php:/usr/local/php${PHP1_SHORTRELEASE}/bin/php-cgi${PHP1_SHORTRELEASE}\"" >> ${SUPHP_CONF_FILE}
			fi
			
			if [ "${PHP2_MODE_OPT}" = "suphp" ] && [ "${PHP2_RELEASE_OPT}" != "no" ]; then
				echo "x-httpd-php${PHP2_SHORTRELEASE}=\"php:/usr/local/php${PHP2_SHORTRELEASE}/bin/php-cgi${PHP2_SHORTRELEASE}\"" >> ${SUPHP_CONF_FILE}
			fi

			echo "" >> ${SUPHP_CONF_FILE}
			echo ";Handler for CGI-scripts" >> ${SUPHP_CONF_FILE}
			echo "x-suphp-cgi=\"execute:!self\"" >> ${SUPHP_CONF_FILE}

			# Writing data to /etc/httpd/conf/extra/httpd-suphp.conf
			echo "Writing data to ${SUPHP_HTTPD}"
			echo -n "" > ${SUPHP_HTTPD}

			echo "<IfModule mod_suphp.c>" >> ${SUPHP_HTTPD}
			echo '<FilesMatch "\.(inc|php|php3|php4|php44|php5|php52|php53|php54|php55|php56|php6|phtml|phps)$">' >> ${SUPHP_HTTPD}
			if [ "${PHP1_MODE_OPT}" = "suphp" ]; then
				echo "AddHandler x-httpd-php${PHP1_SHORTRELEASE} .inc .php .php3 .php4 .php5 .php${PHP1_SHORTRELEASE} .phtml" >> ${SUPHP_HTTPD}
			fi
			
			if [ "${PHP2_MODE_OPT}" = "suphp" ] && [ "${PHP2_RELEASE_OPT}" != "no" ]; then
				echo "AddHandler x-httpd-php${PHP2_SHORTRELEASE} .php${PHP2_SHORTRELEASE}" >> ${SUPHP_HTTPD}
			fi
			echo '</FilesMatch>' >> ${SUPHP_HTTPD}

			echo "<Location />" >> ${SUPHP_HTTPD}
			echo "suPHP_Engine on" >> ${SUPHP_HTTPD}

			if [ -d /usr/local/php${PHP1_SHORTRELEASE}/lib ]; then
				echo "suPHP_ConfigPath /usr/local/php${PHP1_SHORTRELEASE}/lib/" >> ${SUPHP_HTTPD}
			elif [ -d /usr/local/php${PHP2_SHORTRELEASE}/lib ]; then
				echo "suPHP_ConfigPath /usr/local/php${PHP2_SHORTRELEASE}/lib/" >> ${SUPHP_HTTPD}
			fi
			
			if [ "${PHP1_MODE_OPT}" = "suphp" ]; then
				echo "suPHP_AddHandler x-httpd-php${PHP1_SHORTRELEASE}" >> ${SUPHP_HTTPD}
			fi
			
			if [ "${PHP2_MODE_OPT}" = "suphp" ] && [ "${PHP2_RELEASE_OPT}" != "no" ]; then
				echo "suPHP_AddHandler x-httpd-php${PHP2_SHORTRELEASE}" >> ${SUPHP_HTTPD}
			fi
			
			echo "</Location>" >> ${SUPHP_HTTPD}
			echo "</IfModule>" >> ${SUPHP_HTTPD}
			echo "Done."
		elif [ -e ${SUPHP_HTTPD} ]; then
			echo -n "" > ${SUPHP_HTTPD}
		fi
	fi
}

####################################################
add_alias_redirect()
{
	AF=$1
	A=$2
	P=$3

	HTTP=http://
	if [ "${REDIRECT_HOST_HTTPS_OPT}" = "yes" ]; then
		HTTP=https://
	fi

	HOST_ALIAS=no
	if [ "${USE_HOSTNAME_FOR_ALIAS_OPT}" = "yes" ]; then
		HOST_ALIAS=yes
	fi

	if [ "${HOST_ALIAS}" = "yes" ]; then
		echo "RewriteCond %{HTTP_HOST} !^${REDIRECT_HOST_OPT}\$" >> ${AF}
	
		echo "RewriteCond %{REQUEST_URI} ^/${A}/ [OR]" >> ${AF}
		echo "RewriteCond %{REQUEST_URI} ^/${A}\$ [OR]" >> ${AF}
		
		echo "RewriteRule ^/${A}(.*) ${HTTP}${REDIRECT_HOST_OPT}/${P}\$1" >> ${AF}
		
		echo "" >> ${AF}
	fi
	# "! -e /var/www/html/${A}" is used to add Alias'es for the RewriteRules that don't have /var/www/html/ALIAS
	if [ "${HOST_ALIAS}" = "no" ] || [ ! -e /var/www/html/${A} ]; then
		echo "Alias /${A} /var/www/html/${P}" >> ${AF}
	fi
}

do_rewrite_httpd_alias()
{
	#if [ "${USE_HOSTNAME_FOR_ALIAS_OPT}" != "yes" ]; then
	#	return;
	#fi
	if [ -e ${WORKDIR}/custom/ap2/conf/extra/httpd-alias.conf ]; then
		cp -pf ${WORKDIR}/custom/ap2/conf/extra/httpd-alias.conf /etc/httpd/conf/extra/httpd-alias.conf
	else
		HA=/etc/httpd/conf/extra/httpd-alias.conf
			
		echo -n '' > ${HA}
		
		if [ "${USE_HOSTNAME_FOR_ALIAS_OPT}" = "yes" ]; then
			echo "RewriteEngine On" >> ${HA}
		fi
		
		add_alias_redirect ${HA} config redirect.php
		
		if [ "${SQUIRRELMAIL_OPT}" = "yes" ]; then
			add_alias_redirect ${HA} squirrelmail squirrelmail
		fi
		
		if [ "${ROUNDCUBE_OPT}" = "yes" ]; then
			add_alias_redirect ${HA} roundcube roundcube
		fi

		WEBMAILLINK=`get_webmail_link`
		if [ -e /var/www/html/${WEBMAILLINK} ]; then
			add_alias_redirect ${HA} webmail ${WEBMAILLINK}
		fi
		
		if [ "${PHPMYADMIN_OPT}" = "yes" ]; then
			add_alias_redirect ${HA} phpMyAdmin phpMyAdmin
			add_alias_redirect ${HA} phpmyadmin phpMyAdmin
			add_alias_redirect ${HA} pma phpMyAdmin
		fi
		
		if [ -s "${WEBAPPS_LIST}" ]; then
			#http://forum.directadmin.com/showthread.php?t=48203&p=247343#post247343
			echo "Adding custom webapps from ${WEBAPPS_LIST}";
			
			cat ${WEBAPPS_LIST} | while read l; do
				app=`echo "$l" | cut -d= -f1`
				app_path=`echo "$l" | cut -d= -f2`
				
				if [ "${app}" = "" ] || [ "${app_path}" = "" ]; then
					echo "${boldon}Check your ${WEBAPPS_LIST}.  A name or path is blank.${boldoff}";
					echo "name=$app";
					echo "path=$app_path";
					continue;
				fi
				
				if [ ! -e /var/www/html/${app_path} ]; then
					echo "${boldon}Cannot find path $app_path for alias ${app}${boldoff}";
					continue;
				fi

				add_alias_redirect ${HA} ${app} ${app_path}
				echo "Added ${app} pointing to ${app_path}";
			done;
		fi
	fi
}

add_nginx_alias_redirect()
{	#A fake P real
	F=$1
	A=$2
	P=$3
	
	${ECHO} -e "\tlocation /${A} {" >> ${F}
	${ECHO} -e "\t\trewrite ^/* /${P} last;" >> ${F}
	${ECHO} -e "\t}" >> ${F}
}

add_nginx_alias()
{
	F=$1
	A=$2
	
	if [ "${WEBSERVER_OPT}" = "nginx" ]; then
		${ECHO} -e "\tlocation /${A} {" >> ${F}
		${ECHO} -e "\t\troot /var/www/html/;" >> ${F}
		${ECHO} -e "\t\tindex index.php index.html index.htm;" >> ${F}
		${ECHO} -e "\t\tlocation ~ ^/${A}/(.+\.php)\$ {" >> ${F}
		${ECHO} -e "\t\t\tinclude /etc/nginx/webapps_settings.conf;" >> ${F}
		${ECHO} -e "\t\t}" >> ${F};
		${ECHO} -e "\t\tlocation ~* ^/${A}/(.+\\.(jpg|jpeg|gif|css|png|js|ico|html|xml|txt))\$ {" >> ${F}
		${ECHO} -e "\t\t\troot /var/www/html/;" >> ${F}
		${ECHO} -e "\t\t}" >> ${F}
		${ECHO} -e "\t}" >> ${F}
	elif [ "${WEBSERVER_OPT}" = "nginx_apache" ]; then
		${ECHO} -e "\tlocation /${A} {" >> ${F}
		${ECHO} -e "\t\troot /var/www/html/;" >> ${F}
		${ECHO} -e "\t\tindex index.php index.html index.htm;" >> ${F}
		${ECHO} -e "\t\tlocation ~ ^/${A}/ {" >> ${F}
                ${ECHO} -e "\t\t\taccess_log off;" >> ${F}
                ${ECHO} -e "\t\t\tproxy_pass http://\$server_addr:${PORT_8080};" >> ${F}
                ${ECHO} -e "\t\t\tproxy_set_header X-Client-IP      \$remote_addr;" >> ${F}
                ${ECHO} -e "\t\t\tproxy_set_header X-Accel-Internal /$A/nginx_static_files;" >> ${F}
                ${ECHO} -e "\t\t\tproxy_set_header Host             \$host;" >> ${F}
                ${ECHO} -e "\t\t\tproxy_set_header X-Forwarded-For  \$proxy_add_x_forwarded_for;" >> ${F}
		${ECHO} -e "\t\t}" >> ${F};
		${ECHO} -e "\t\tlocation ~ ^/${A}/nginx_static_files/ {" >> ${F}
		${ECHO} -e "\t\t\taccess_log  /var/log/nginx/access_log_proxy;" >> ${F}
		${ECHO} -e "\t\t\talias       /var/www/html/;" >> ${F}
		${ECHO} -e "\t\t\tinternal;" >> ${F}
		${ECHO} -e "\t\t}" >> ${F};

		${ECHO} -e "\t}" >> ${F}
	fi
}

do_rewrite_nginx_webapps()
{
	if [ -e ${WORKDIR}/custom/nginx/conf/webapps.conf ]; then
		cp -pf ${WORKDIR}/custom/nginx/conf/webapps.conf /etc/nginx/webapps.conf
	else
		NW=/etc/nginx/webapps.conf
		
		${ECHO} -n '' > ${NW}

		if [ "${SQUIRRELMAIL_OPT}" = "yes" ]; then
			add_nginx_alias ${NW} squirrelmail
		fi
		
		if [ "${ROUNDCUBE_OPT}" = "yes" ]; then
			add_nginx_alias ${NW} roundcube
		fi

		if [ "${PHPMYADMIN_OPT}" = "yes" ]; then
			add_nginx_alias ${NW} phpMyAdmin
			add_nginx_alias_redirect ${NW} phpmyadmin phpMyAdmin
			add_nginx_alias_redirect ${NW} pma phpMyAdmin
		fi	

		WEBMAILLINK=`get_webmail_link`
		if [ -e /var/www/html/${WEBMAILLINK} ]; then
			add_nginx_alias_redirect ${NW} webmail ${WEBMAILLINK}
		fi

		${ECHO} -e '\tif ($request_method !~ ^(GET|HEAD|POST)$ ) {' >> ${NW}
		${ECHO} -e '\t\treturn 444;' >> ${NW}
		${ECHO} -e '\t}' >> ${NW}
		
		#block .htaccess and .user.ini
		${ECHO} -e '\tlocation ~ /(\\.ht|\\.user\\.ini) {' >> ${NW}
		${ECHO} -e '\t\tdeny all;' >> ${NW}
		${ECHO} -e '\t}' >> ${NW}
	fi
	
	cp -pf /etc/nginx/webapps.conf /etc/nginx/webapps.ssl.conf
	perl -pi -e "s|:${PORT_8080}|:${PORT_8081}|" /etc/nginx/webapps.ssl.conf
	perl -pi -e 's|http:|https:|' /etc/nginx/webapps.ssl.conf
	
	if [ "${HAVE_FPM_CGI}" = "yes" ]; then
		#update the webapps_settings.conf
		#swap "fastcgi_pass unix:/usr/local/php54/sockets/webapps.sock;" if needed
		#might be a better way to do this, other checks. Close enough for now.
		
		PHP_REPLACE_STRING="`grep -m1 '^fastcgi_pass unix:/usr/local/php../sockets/webapps.sock;' /etc/nginx/webapps_settings.conf | cut -d/ -f4`"
		if [ "${PHP_REPLACE_STRING}" = "" ]; then
			PHP_REPLACE_STRING=php54
		fi
		if [ "${PHP1_MODE_OPT}" = "php-fpm" ]; then
			perl -pi -e "s#${PHP_REPLACE_STRING}#php${PHP1_SHORTRELEASE}#" /etc/nginx/webapps_settings.conf
		fi		
	fi
}


####################################################

create_httpd_nginx() {
	CONF_FILE=${HTTPDCONF}/extra/httpd-nginx.conf
	echo -n '' > ${CONF_FILE}

	if [ "${WEBSERVER_OPT}" = "nginx_apache" ]; then
		if [ ! -e /usr/lib/apache/mod_aclr2.so ]; then
			doModAclr2;
		fi
		echo 'LoadModule aclr_module        /usr/lib/apache/mod_aclr2.so' >> ${CONF_FILE};
		echo 'AccelRedirectSet On' >> ${CONF_FILE};
		echo 'AccelRedirectSize 1k' >> ${CONF_FILE};
		echo 'RemoteIPHeader X-Client-IP' >> ${CONF_FILE};
		echo 'RemoteIPInternalProxy 127.0.0.1' >> ${CONF_FILE};
		if [ "${IPV6}" = "1" ]; then
			echo 'RemoteIPInternalProxy ::1' >> ${CONF_FILE};
		fi
		echo 'RemoteIPInternalProxyList /usr/local/directadmin/data/admin/ip.list' >> ${CONF_FILE};
	fi
}

doRewriteConfs() {
	quitIfLocked doRewriteConfs
	
	cd ${CWD}
	if [ "${WEBSERVER_OPT}" = "apache" ] || [ "${WEBSERVER_OPT}" = "litespeed" ] || [ "${WEBSERVER_OPT}" = "nginx_apache" ]; then
		if [ ! -e httpd-${APACHE2_VER}.tar.gz ]; then
			echo "File httpd-${APACHE2_VER}.tar.gz does not exist. Cannot rewrite configs"
		else
			tar xzf httpd-${APACHE2_VER}.tar.gz --no-same-owner
		fi

		if [ ! -d httpd-${APACHE2_VER} ]; then
			echo "Directory httpd-${APACHE2_VER} does not exist. Cannot rewrite configs"
		fi

		#copy the new configs
		cp -rf ${APCONFDIR} ${HTTPDDIR}
		cp -f ${APCONFDIR}/httpd.conf ${HTTPD_CONF}
		cp -f ${APCONFDIR}/extra/httpd-mpm.conf ${HTTPDCONF}/extra/httpd-mpm.conf
		
		perl -pi -e 's/^DefaultType/#DefaultType/' ${HTTPD_CONF}

		HDC=httpd-directories-old.conf

		ln -sf $HDC ${HTTPDCONF}/extra/httpd-directories.conf

		doApacheHostConf;
		
		if [ "${APCUSTOMCONFDIR}" != "0" ]; then
			cp -rf ${APCUSTOMCONFDIR} ${HTTPDDIR}
		fi
		
		chmod 710 ${HTTPDDIR}
		
		#swap the |WEBAPPS_PHP_RELEASE| token.
		if [ "${PHP1_MODE_OPT}" = "php-fpm" ] || [ "${PHP2_MODE_OPT}" = "php-fpm" ]; then
			PHPV=""
			if [ "${PHP1_MODE_OPT}" = "php-fpm" ]; then
				PHPV=`perl -e "print ${PHP1_RELEASE_OPT} * 10"`
			elif [ "${PHP2_RELEASE_OPT}" != "no" ]; then
				PHPV=`perl -e "print ${PHP2_RELEASE_OPT} * 10"`
			fi
			
			if [ "${PHPV}" != "" ]; then
				perl -pi -e "s/\|WEBAPPS_PHP_RELEASE\|/${PHPV}/" ${HTTPDCONF}/extra/${HDC}
			fi
		fi		

		ensure_server_ca

		#ensure we have the correct apache_ver
		if [ "`grep -m1 -c apache_ver=2.0 ${DACONF_TEMPLATE_FILE}`" -eq "0" ]; then
			echo "apache_ver=2.0" >> ${DACONF_TEMPLATE_FILE}
		elif [ "`grep -m1 -c apache_ver= ${DACONF_TEMPLATE_FILE}`" -ne "0" ]; then
			perl -pi -e 's/`grep apache_ver= ${DACONF_TEMPLATE_FILE}`/apache_ver=2.0/' ${DACONF_TEMPLATE_FILE}
		fi
		if [ "`grep -m1 -c apache_ver=2.0 ${DACONF_FILE}`" -eq "0" ]; then
			echo "apache_ver=2.0" >> ${DACONF_FILE}
			echo "action=rewrite&value=httpd" >> ${TASK_QUEUE}
		elif [ "`grep -m1 -c apache_ver= ${DACONF_FILE}`" -ne "0" ]; then
			perl -pi -e 's/`grep apache_ver= ${DACONF_FILE}`/apache_ver=2.0/' ${DACONF_FILE}
			echo "action=rewrite&value=httpd" >> ${TASK_QUEUE}
		fi
		
		do_rewrite_httpd_alias

		#rewrite ips.conf
		echo "action=rewrite&value=ips" >> ${TASK_QUEUE}

		run_dataskq

		#tokenize the IP and ports
		tokenize_IP
		tokenize_ports

		#add all the Include lines if they do not exist
		if [ "`grep -m1 -c 'Include' ${HTTPDCONF}/extra/directadmin-vhosts.conf`" = "0" ] || [ ! -e ${HTTPDCONF}/extra/directadmin-vhosts.conf ]; then
			doVhosts;
			cd ${CWD}/httpd-${APACHE2_VER}
		fi

		if [ ! -d /etc/httpd/conf/ssl.key ] || [ ! -d /etc/httpd/conf/ssl.crt ]; then
			cd ${WORKDIR}
			mkdir -p /etc/httpd/conf/ssl.key
			mkdir -p /etc/httpd/conf/ssl.crt
			#install the cert/key
			/usr/bin/openssl req -x509 -newkey rsa:2048 -keyout /etc/httpd/conf/ssl.key/server.key -out /etc/httpd/conf/ssl.crt/server.crt -days 9999 -nodes -config ./${APCERTCONF}

			chmod 600 ${HTTPDCONF}/ssl.crt/server.crt
			chmod 600 ${HTTPDCONF}/ssl.key/server.key
			cd ${CWD}
		fi
		
		doApacheCheck

		rm -rf ${CWD}/httpd-${APACHE2_VER}

		cd ${CWD}

		PHPMODULES=${HTTPDCONF}/extra/httpd-phpmodules.conf
		
		echo -n "" > ${HTTPDCONF}/extra/httpd-nginx.conf
		
		echo -n "" > ${PHPMODULES}
		
		if [ "${HAVE_SUPHP_CGI}" = "yes" ]; then
		perl -pi -e 's|^LoadModule suphp_module|#LoadModule suphp_module|' /etc/httpd/conf/httpd.conf
		echo "LoadModule	suphp_module		/usr/lib/apache/mod_suphp.so" >> ${PHPMODULES}
		fi
		
		if [ "${MOD_RUID2_OPT}" = "yes" ]; then
		perl -pi -e 's|^LoadModule ruid2_module|#LoadModule ruid2_module|' /etc/httpd/conf/httpd.conf
		echo "LoadModule	ruid2_module		/usr/lib/apache/mod_ruid2.so" >> ${PHPMODULES}
			echo "Mutex sem" >> ${PHPMODULES}
		fi
		
		if [ "${HTSCANNER_OPT}" = "yes" ]; then
			if [ "${HAVE_FCGID}" = "yes" ] || [ "${HAVE_FPM_CGI}" = "yes" ] || [ "${HAVE_SUPHP_CGI}" = "yes" ]; then 
				perl -pi -e 's|^LoadModule htscanner_module|#LoadModule htscanner_module|' /etc/httpd/conf/httpd.conf
				echo "LoadModule	htscanner_module		/usr/lib/apache/mod_htscanner2.so" >> ${PHPMODULES}
			fi
		fi

		COUNT="`grep -m1 -c '/usr/lib/apache/mod_mpm_' ${PHPMODULES}`"
		if [ ${COUNT} -eq 0 ]; then
			#Use event MPM for php-fpm and prefork for mod_php
			if [ "${APACHE_MPM_OPT}" = "auto" ]; then
				if [ "${HAVE_CLI}" = "no" ]; then
					# Add to httpd-phpmodules.conf
					echo "LoadModule mpm_event_module /usr/lib/apache/mod_mpm_event.so" >> ${PHPMODULES}
				else
					# Add to httpd-phpmodules.conf
					echo "LoadModule mpm_prefork_module /usr/lib/apache/mod_mpm_prefork.so" >> ${PHPMODULES}
				fi
			elif [ "${APACHE_MPM_OPT}" = "event" ]; then
				echo "LoadModule mpm_event_module /usr/lib/apache/mod_mpm_event.so" >> ${PHPMODULES}
			elif [ "${APACHE_MPM_OPT}" = "worker" ]; then
				echo "LoadModule mpm_worker_module /usr/lib/apache/mod_mpm_worker.so" >> ${PHPMODULES}
			else
				echo "LoadModule mpm_prefork_module /usr/lib/apache/mod_mpm_prefork.so" >> ${PHPMODULES}
			fi
		fi

		if [ "${HAVE_CLI}" = "yes" ]; then
			# Change httpd.conf info
			perl -pi -e 's/^LoadModule php4/\#LoadModule php4/' /etc/httpd/conf/httpd.conf
			perl -pi -e 's/^LoadModule php5/\#LoadModule php5/' /etc/httpd/conf/httpd.conf
			# Add to httpd-phpmodules.conf
			echo "LoadModule	php5_module		/usr/lib/apache/libphp5.so" >> ${PHPMODULES}
		fi
		
		if [ "${HAVE_CLI}" = "no" ]; then
			perl -pi -e 's/^LoadModule php4/\#LoadModule php4/' /etc/httpd/conf/httpd.conf
			perl -pi -e 's/^LoadModule php5/\#LoadModule php5/' /etc/httpd/conf/httpd.conf
		fi

		if [ "${HAVE_FCGID}" = "yes" ]; then
			if [ -e ${PHPMODULES} ]; then
				COUNT="`grep -m1 -c 'fcgid_module' ${PHPMODULES}`"
				if [ ${COUNT} -eq 0 ]; then
					perl -pi -e 's|^LoadModule	fcgid_module|#LoadModule	fcgid_module|' /etc/httpd/conf/httpd.conf
					echo "LoadModule fcgid_module /usr/lib/apache/mod_fcgid.so" >> ${PHPMODULES}
				fi
				COUNT="`grep -m1 -c 'httpd-fcgid.conf' ${PHPMODULES}`"
				if [ ${COUNT} -eq 0 ]; then
					echo "Include /etc/httpd/conf/extra/httpd-fcgid.conf" >> ${PHPMODULES}
				fi
			fi
			
			if [ ! -d /usr/local/safe-bin ]; then
				mkdir -p /usr/local/safe-bin
				chmod 511 /usr/local/safe-bin
				chown apache:apache /usr/local/safe-bin
			fi

			for php_shortrelease in `echo ${PHP1_SHORTRELEASE_SET}`; do {
				EVAL_CHECK_VAR=HAVE_FCGID${php_shortrelease}
				if [ "$(eval_var ${EVAL_CHECK_VAR})" = "yes" ]; then
					cp -f ${CWD}/configure/fastcgi/fcgid${php_shortrelease}.sh /usr/local/safe-bin/fcgid${php_shortrelease}.sh
					if [ -e ${CWD}/custom/fastcgi/fcgid${php_shortrelease}.sh ]; then
						cp -f ${CWD}/custom/fastcgi/fcgid${php_shortrelease}.sh /usr/local/safe-bin/fcgid${php_shortrelease}.sh
					fi
					chown apache:apache /usr/local/safe-bin/fcgid${php_shortrelease}.sh
					chmod 555 /usr/local/safe-bin/fcgid${php_shortrelease}.sh
				fi
			};
			done;
		fi
		
		if [ "${HAVE_SUPHP_CGI}" = "yes" ]; then
			if [ -e ${PHPMODULES} ]; then
				COUNT="`grep -m1 -c 'suphp_module' ${PHPMODULES}`"
				if [ ${COUNT} -eq 0 ]; then
					echo "LoadModule	suphp_module		/usr/lib/apache/mod_suphp.so" >> ${PHPMODULES}
				fi
			fi
		fi
		
		if [ "${NEWCONFIGS}" = "1" ]; then
			perl -pi -e 's/^LoadModule mod_php/\#LoadModule mod_php/' /etc/httpd/conf/httpd.conf
			perl -pi -e 's/^LoadModule php/\#LoadModule php/' /etc/httpd/conf/httpd.conf
			perl -pi -e 's/^LoadModule suphp/\#LoadModule suphp/' /etc/httpd/conf/httpd.conf
		fi
		
		WEBMAILLINK=`get_webmail_link`
		perl -pi -e "s#Alias /webmail \"/var/www/html/roundcube/\"#Alias /webmail \"/var/www/html/${WEBMAILLINK}/\"#" /etc/httpd/conf/extra/httpd-alias.conf

		doPhpConf;
		if [ "${CLOUDLINUX_OPT}" = "no" ] || [ "${PHP1_MODE_OPT}" != "lsphp" ]; then
			doModLsapi 0;
		fi
		
		create_httpd_nginx;
		
		if [ "${WEBSERVER_OPT}" = "apache" ] || [ "${WEBSERVER_OPT}" = "nginx_apache" ]; then
			echo "Restarting apache."
			control_service httpd restart
		elif [ "${WEBSERVER_OPT}" = "litespeed" ]; then
			echo "Restarting litespeed."
			if [ "${SYSTEMD}" = "yes" ]; then
				#No systemd for litespeed yet
				${INITDDIR}/litespeed restart
			else
				${INITDDIR}/litespeed restart
			fi
		fi
	fi
	if [ "${WEBSERVER_OPT}" = "nginx" ] || [ "${WEBSERVER_OPT}" = "nginx_apache" ]; then
	
		#copy the new configs
		cp -rf ${NGINXCONFDIR}/* ${NGINXCONF}

		for php_shortrelease in `echo ${PHP1_SHORTRELEASE_SET}`; do {
			perl -pi -e "s|/usr/local/php${php_shortrelease}/sockets/webapps.sock|/usr/local/php${PHP1_SHORTRELEASE}/sockets/webapps.sock|" ${NGINXCONF}/nginx.conf
		};
		done;
		
		do_rewrite_nginx_webapps
		ensure_server_ca
		
		#rewrite ips.conf
		echo "action=rewrite&value=nginx" >> ${TASK_QUEUE}
		echo "action=rewrite&value=ips" >> ${TASK_QUEUE}

		run_dataskq

		#add all the Include lines if they do not exist
		if [ "`grep -m1 -c 'Include' ${NGINXCONF}/directadmin-vhosts.conf`" = "0" ] || [ ! -e ${NGINXCONF}/directadmin-vhosts.conf ]; then
			doVhosts;
		fi
	
		if [ ! -e ${NGINXCONF}/directadmin-settings.conf ]; then
			touch ${NGINXCONF}/directadmin-settings.conf
		fi
		
		if [ ! -e ${NGINXCONF}/directadmin-ips.conf ]; then
			touch ${NGINXCONF}/directadmin-ips.conf
		fi
	
		if [ ! -e ${NGINXCONF}/nginx-includes.conf ]; then
			touch ${NGINXCONF}/nginx-includes.conf
		fi
		
		if [ "${NGINXCUSTOMCONFDIR}" != "0" ]; then
			cp -rf ${NGINXCUSTOMCONFDIR}/* ${NGINXCONF}/
		fi
		
		chmod 710 ${NGINXCONF}
		
		if [ "${IPV6}" = "0" ]; then
			perl -pi -e 's| listen       \[::1\]:| #listen       \[::1\]:|' ${NGINXCONF}/nginx-vhosts.conf
			perl -pi -e 's| listen       \[::1\]:| #listen       \[::1\]:|' ${NGINXCONF}/nginx.conf
		else
			perl -pi -e 's| #listen       \[::1\]:| listen       \[::1\]:|' ${NGINXCONF}/nginx-vhosts.conf
			perl -pi -e 's| #listen       \[::1\]:| listen       \[::1\]:|' ${NGINXCONF}/nginx.conf
		fi
		
		perl -pi -e "s#worker_processes  1;#worker_processes  ${CPU_CORES};#" ${NGINXCONF}/nginx.conf
		
		tokenize_IP;
		tokenize_ports;
		
		doPhpConf;

		echo "Restarting nginx."
		control_service nginx restart
	fi
	
	if [ "${WEBSERVER_OPT}" = "nginx_apache" ]; then
		setVal nginx 0 ${DACONF_TEMPLATE_FILE}
		setVal nginx 0 ${DACONF_FILE}
		setVal nginx_proxy 1 ${DACONF_TEMPLATE_FILE}
		setVal nginx_proxy 1 ${DACONF_FILE}
	fi
	
	doRestartDA
	
	removeLockfile;
}

####################################################

doCron() {
	cd ${CWD}

        if [ "$OS" = "FreeBSD" ]; then
                CRONFILE=$WORKDIR/cronfile
        else
                CRONFILE=/etc/cron.${CRON_FREQUENCY_OPT}/custombuild
        
		#remove bits which may exist.
		rm -f /etc/cron.daily/custombuild
		rm -f /etc/cron.weekly/custombuild
		rm -f /etc/cron.monthly/custombuild
        fi

        if [ "${CRON_OPT}" != "yes" ]; then
                echo "You cannot run cronjob, because you do not have it set in options.conf file.";
                rm -f ${CRONFILE}

                if [ "$OS" = "FreeBSD" ]; then
                        COUNT=`grep -m1 -c $CRONFILE /etc/crontab`;
                        if [ "$COUNT" -gt 0 ]; then
                                grep -v $CRONFILE /etc/crontab > /etc/crontab.tmp
                                if [ ! -s /etc/crontab.tmp ]; then
                                        echo "/etc/crontab.tmp doesn't exist or is size 0. Aborting";
                                        exit 3;
                                fi

                                mv -f /etc/crontab.tmp /etc/crontab
                                chmod 644 /etc/crontab
                        fi
                fi
                exit 1;
        fi
        
        if [ "$OS" = "FreeBSD" ]; then
                if [ ! -e /etc/crontab ]; then
                        echo "You cannot run cronjob, because you do not have /etc/crontab.";
                fi
        elif [ ! -d /etc/cron.${CRON_FREQUENCY_OPT} ]; then
                echo "You cannot run cronjob, because you do not have /etc/cron.${CRON_FREQUENCY_OPT} directory.";
                exit 1;
        fi
        
        #ensure mail exists.
        if [ "${NOTIFICATIONS_OPT}" = "yes" ]; then
        	if [ ! -x /bin/mail ] && [ ! -x /usr/bin/mail ]; then
        		echo "Cannot find either /bin/mail or /usr/bin/mail";
        		echo "Please install mailx:";
			if [ ${OS} = "FreeBSD" ]; then
				echo "pkg install mailx";
			elif [ -e ${DEBIAN_VERSION} ]; then
				echo "apt-get install mailx";
			else
				echo "yum install mailx";
			fi
			exit 1;
        	fi
        fi

	echo -n '' > ${CRONFILE}
	echo '#!/bin/sh'	>> ${CRONFILE}
	echo 'cd /usr/local/directadmin/custombuild' >> ${CRONFILE}
	echo './build update >/dev/null 2>&1' >> ${CRONFILE}
	echo "AVAIL_UPDATES=\"\`./build versions_nobold | grep -c -e 'update is available.'\`\"" >> ${CRONFILE}

	echo 'if [ "${AVAIL_UPDATES}" -gt 0 ]; then' >> ${CRONFILE}
	if [ "${NOTIFICATIONS_OPT}" = "yes" ] && [ "${UPDATES_OPT}" = "no" ]; then
		echo "./build versions_nobold | grep 'update is available.' | mail -s \"\${AVAIL_UPDATES} updates available for \`hostname\`\" ${EMAIL_OPT}" >> ${CRONFILE}
	fi
	if [ "${NOTIFICATIONS_OPT}" = "yes" ] && [ "${UPDATES_OPT}" = "yes" ]; then
		echo "./build versions_nobold | grep 'update is available.' | mail -s \"\${AVAIL_UPDATES} updates running for \`hostname\`\" ${EMAIL_OPT}" >> ${CRONFILE}
	fi
	if [ "${UPDATES_OPT}" = "yes" ]; then
		echo './build update_versions' >> ${CRONFILE}
	fi
	if [ "${UPDATES_OPT}" = "no" ] && [ "${DA_AUTOUPDATE_OPT}" = "yes" ]; then
		echo './build update_da' >> ${CRONFILE}
	fi
	if [ "${UPDATES_OPT}" = "no" ] && [ "${WEBAPPS_UPDATES_OPT}" = "yes" ]; then
		echo './build update_webapps' >> ${CRONFILE}
	fi
	echo 'fi' >> ${CRONFILE}
	echo 'exit 0;' >> ${CRONFILE}
	chmod 755 ${CRONFILE}

	#for freebsd, we have to add it to /etc/crontab
	if [ "$OS" = "FreeBSD" ]; then
		COUNT=`grep -c $CRONFILE /etc/crontab`;
		if [ "$COUNT" -ge 1 ]; then
			cp -f /etc/crontab /etc/crontab.back
			STR="perl -pi -e 's#.*${CRONFILE}\n##' /etc/crontab"
			eval $STR
		fi
		if [ "${CRON_FREQUENCY_OPT}" = "daily" ]; then
			echo "02 4 * * * root $CRONFILE" >> /etc/crontab
		elif [ "${CRON_FREQUENCY_OPT}" = "weekly" ]; then
			echo "02 4 * * 0 root $CRONFILE" >> /etc/crontab
		elif [ "${CRON_FREQUENCY_OPT}" = "monthly" ]; then
			echo "02 4  1 * * root $CRONFILE" >> /etc/crontab
		fi                
	fi
	
	echo "Cronjob is set for ${EMAIL_OPT}:"
	echo "Cronjob frequncy: ${CRON_FREQUENCY_OPT}"
	echo "Automatic notifications: ${NOTIFICATIONS_OPT}"
	echo "Automatic updates: ${UPDATES_OPT}"
}

####################################################

updateDovecot() {
	cd ${CWD}
	if [ "${DOVECOT_VER}" != "0" ]; then
		getFile dovecot-${DOVECOT_VER}.tar.gz dovecot
	fi
	getFile dovecot.boot dovecot_boot
	getFile dovecot.boot.freebsd dovecot_boot_freebsd
	getFile dovecot.boot.debian dovecot_boot_debian
	getFile dovecot.conf dovecot_conf
	getFile exim.conf.dovecot.patch eximdovecotpatch
}

####################################################

doUpdateData() {
	cd ${CWD}

	getFile servers.txt servers

	if [ "${CLOUDLINUX_OPT}" = "yes" ]; then
		getFileCL cl-apache-patches.tar.gz cl-apache-patches
		if [ "${WEBSERVER_OPT}" = "apache" ] || [ "${WEBSERVER_OPT}" = "litespeed" ] || [ "${WEBSERVER_OPT}" = "nginx_apache" ]; then
			getFileCL mod_hostinglimits-${MOD_HOSTINGLIMITS_VER}.tar.gz mod_hostinglimits
		fi
		if [ "${WEBSERVER_OPT}" = "apache" ] || [ "${WEBSERVER_OPT}" = "nginx_apache" ]; then
			getFileCL mod_lsapi-${MOD_LSAPI_VER}.tar.gz mod_lsapi
		fi
	fi

	if [ "${NGINX_VER}" != "0" ]; then
		if [ "${WEBSERVER_OPT}" = "nginx" ] || [ "${WEBSERVER_OPT}" = "nginx_apache" ]; then
			getFile nginx-${NGINX_VER}.tar.gz nginx
			getFile nginx.boot nginx_boot
			getFile nginx.boot.freebsd nginx_boot_freebsd
			getFile nginx.boot.debian nginx_boot_debian
		fi
	fi
	if [ "${APACHE2_VER}" != "0" ]; then
		if [ "${WEBSERVER_OPT}" = "apache" ] || [ "${WEBSERVER_OPT}" = "nginx_apache" ]; then
			getFile httpd-${APACHE2_VER}.tar.gz apache${APACHE_VER_OPT}
			getFile apr-${APR_VER}.tar.gz apr
			getFile apr-util-${APR_UTIL_VER}.tar.gz apr-util
			getFile httpd_2 httpd_2_boot
			getFile httpd_2_freebsd httpd_2_boot_freebsd
			getFile httpd_2_debian httpd_2_boot_debian
		fi
	fi
	
	if [ "${WEBSERVER_OPT}" = "litespeed" ]; then
		getFileLSWS ${LITESPEED_NAME}.tar.gz ${LITESPEED_VER_NAME}
	fi

	if [ "${HAVE_FCGID}" = "yes" ]; then
		if [ "${MOD_FCGID_VER}" != "0" ]; then
			getFile mod_fcgid-${MOD_FCGID_VER}.tar.gz mod_fcgid
		fi
		getFile fcgid.sh fcgid_sh
	fi

	if [ "${CURL_VER}" != "0" ]; then
		getFile curl-${CURL_VER}.tar.gz curl
	fi
	
	if [ "${PCRE_VER}" != "0" ]; then
		if [ "$NEW_PCRE_OPT" = "yes" ]; then
			getFile pcre-${PCRE_VER}.tar.gz pcre_current
		else
			getFile pcre-${PCRE_VER}.tar.gz pcre
		fi
	fi

	if [ "${MCRYPT_VER}" != "0" ]; then
		getFile libmcrypt-${MCRYPT_VER}.tar.gz mcrypt
	fi
	if [ "${MHASH_VER}" != "0" ]; then
		getFile mhash-${MHASH_VER}.tar.gz mhash
	fi
	if [ "${FREETYPE_VER}" != "0" ]; then
		getFile freetype-${FREETYPE_VER}.tar.gz freetype
	fi
	if [ "${ICONV_VER}" != "0" ]; then
		getFile libiconv-${ICONV_VER}.tar.gz iconv
	fi
	if [ "${LIBXML2_VER}" != "0" ]; then
		getFile libxml2-${LIBXML2_VER}.tar.gz libxml2-current
	fi
	if [ "${LIBXSLT_VER}" != "0" ]; then
		getFile libxslt-${LIBXSLT_VER}.tar.gz libxslt
	fi
	if [ "${ICU_VER}" != "0" ]; then
		getFile icu4c-${ICU_VER}-src.tgz icu4c
	fi
#	getFile libevent-${LIBEVENT_VER}.tar.gz libevent

	if [ "${SPAMASSASSIN_OPT}" = "yes" ]; then
		if [ "${SPAMASSASSIN_VER}" != "0" ]; then
			getFile Mail-SpamAssassin-${SPAMASSASSIN_VER}.tar.gz spamassassin
		fi
	fi
	
	if [ "${CLAMAV_OPT}" = "yes" ]; then
		if [ "${CLAMAV_VER}" != "0" ]; then
			getFile clamav-${CLAMAV_VER}.tar.gz clamav
		fi
	fi
	
# Mailman is not yet supported
#	if [ "${MAILMAN_OPT}" = "yes" ]; then
#		getFile mailman-${MAILMAN_VER}.tgz mailman
#	fi
	if [ "${WEBALIZER_VER}" != "0" ]; then
		getFile ${WEBALIZER_FILE} webalizer
	fi
	if [ "${FTPD_OPT}" = "proftpd" ]; then
		if [ "${PROFTPD_VER}" != "0" ]; then
			getFile proftpd-${PROFTPD_VER}.tar.gz proftpd
		fi
		getFile proftpd proftpd_boot
		getFile proftpd_freebsd proftpd_boot_freebsd
		getFile proftpd_debian proftpd_boot_debian
	fi
	if [ "${FTPD_OPT}" = "pureftpd" ]; then
		if [ "${PUREFTPD_VER}" != "0" ]; then
			getFile pure-ftpd-${PUREFTPD_VER}.tar.gz pureftpd
		fi
		getFile pure-ftpd pure-ftpd_boot
		getFile pure-ftpd_freebsd pure-ftpd_boot_freebsd
		getFile pure-ftpd_debian pure-ftpd_boot_ebian
	fi
	
	if [ "${ZEND_OPT}" = "yes" ] && [ "${OS}" != "FreeBSD" ]; then
		if [ "${PHP1_RELEASE_OPT}" = "5.3" ] || [ "${PHP2_RELEASE_OPT}" = "5.3" ]; then
			getFile ${ZENDFILE_GUARD53} ${ZENDNAME_PHP53_MD5}
		fi
		if [ "${PHP1_RELEASE_OPT}" = "5.4" ] || [ "${PHP2_RELEASE_OPT}" = "5.4" ]; then
			getFile ${ZENDFILE_GUARD54} ${ZENDNAME_PHP54_MD5}
		fi
	fi
	
	if [ "${PHP1_RELEASE_VER}" != "0" ]; then
		getFile php-${PHP1_RELEASE_VER}.tar.gz php${PHP1_SHORTRELEASE}
	fi
	
	if [ "${PHP2_RELEASE_OPT}" != "no" ]; then
		if [ "${PHP2_RELEASE_VER}" != "0" ]; then
			getFile php-${PHP2_RELEASE_VER}.tar.gz php${PHP2_SHORTRELEASE}
		fi
	fi

	if [ "${SUPHP_VER}" != "0" ]; then
		getFile suphp-${SUPHP_VER}.tar.gz suphp_current
	fi

	if [ "${EXIM_OPT}" = "yes" ]; then
		if [ "${EXIM_VER}" != "0" ]; then
			getFile exim-${EXIM_VER}.tar.gz exim
		fi
		getFile exim exim_boot
		getFile exim_freebsd exim_boot_freebsd
		getFile exim_debian exim_boot_debian
	fi
	if [ "${DOVECOT_OPT}" = "yes" ]; then
		updateDovecot;
	fi
	if [ "${AUTOCONF_VER}" != "0" ]; then
		getFile autoconf-${AUTOCONF_VER}.tar.gz autoconf
	fi
	if [ "${AUTOMAKE_VER}" != "0" ]; then
		getFile automake-${AUTOMAKE_VER}.tar.gz automake
	fi
	if [ "${M4_VER}" != "0" ]; then
		getFile m4-${M4_VER}.tar.gz m4
	fi
	if [ "${LIBTOOL_VER}" != "0" ]; then
		getFile libtool-${LIBTOOL_VER}.tar.gz libtool
	fi
	
	if [ "${IONCUBE_OPT}" = "yes" ]; then
		getFile ${IONCUBEFILE} ${IONCUBENAME}
	fi
	
	if [ "${SUHOSIN_OPT}" = "yes" ]; then
		if [ "${SUHOSIN_VER}" != "0" ]; then
			getFile suhosin-${SUHOSIN_VER}.tgz suhosin
		fi
	fi
}

####################################################

doLibJpeg() {

        cd ${CWD};
        getFile ${JPEGFILE}
        tar xzf ${JPEGFILE} --no-same-owner
        cd ${JPEGDIR}

	./configure

        while
        echo "Trying to make libjpeg..."
        do
        {
                make CFLAGS=-fpic libjpeg.a

                if [ $? -ne 0 ]
                then
			if [ ${USER_INPUT} -eq 1 ]; then
	                        echo -n -e "\n*** The make has failed, would you like to try to make again? (y,n): ";
        	                read yesno;
                	        echo "";
                        else
                                if [ "${INPUT_VALUE}" = "d" ]; then
                                        yesno=n
                                else
                                        yesno=${INPUT_VALUE}
                                fi
                        fi

                        if [ "${yesno}" = "n" ]
                        then
                                do_exit 0;
                        fi
                else
                        break;
                fi
        }
        done

	make install-lib
}

####################################################

doLibPng() {
	quitIfLocked doLibPng
	
        cd ${CWD};

	getFile libpng-${PNG_VER}.tar.gz libpng_current

        tar xzf libpng-${PNG_VER}.tar.gz --no-same-owner
        cd libpng-${PNG_VER}

	   ./configure --prefix=/usr/local

        while
        echo "Trying to make libpng"
        do
        {
                make

                if [ $? -ne 0 ]
                then
			if [ ${USER_INPUT} -eq 1 ]; then
	                        printf "\n*** The make has failed, would you like to try to make again? (y,n): \n";
        	                read yesno;
                	        echo "";
                        else
                                if [ "${INPUT_VALUE}" = "d" ]; then
                                        yesno=n
                                else
                                        yesno=${INPUT_VALUE}
                                fi
                        fi

                        if [ "${yesno}" = "n" ]
                        then
                                do_exit 0;
                        fi
                else
                        break;
                fi
        }
        done

	mkdir -p /usr/local/include/libpng >/dev/null 2>&1

        make install
	removeLockfile
	cagefsctl_update;
}

####################################################

convert() {
	#delete old modules
	#backup httpd.conf
	#copy httpd.conf ssl.conf
	#insert all Include lines
	#tokenize the |IP|
	
	cd ${CWD}
	
	rm -rf /usr/lib/apache/*
	if [ "`grep -m1 -c 'Port 80' /etc/httpd/conf/httpd.conf`" = "1" ]; then
		mv -f ${HTTPDCONF} ${HTTPDCONF}.1.3.backup
		if [ ! -e ${APCONFDIR}/httpd.conf ]; then
			do_exit 1 "cannot find httpd.conf in ${APCONFDIR} directory";
		fi
		if [ ! -e ${APCONFDIR}/extra/httpd-ssl.conf ]; then
			do_exit 1 "cannot find ssl.conf in the ${NAME} directory";
		fi

		cp -rf ${APCONFDIR} ${HTTPDDIR}
		cp -rf ${HTTPDCONF}.1.3.backup/ssl.key ${HTTPDCONF}
		cp -rf ${HTTPDCONF}.1.3.backup/ssl.crt ${HTTPDCONF}

		cp -f ${APCONFDIR}/httpd.conf ${HTTPD_CONF}
		cp -f ${APCONFDIR}/extra/httpd-mpm.conf ${HTTPDCONF}/extra/httpd-mpm.conf
		
		if [ "${APCUSTOMCONFDIR}" != "0" ]; then
			cp -rf ${APCUSTOMCONFDIR} ${HTTPDDIR}
		fi

		#tokenize the IP and ports
		tokenize_IP
		tokenize_ports

		#add all the Include lines
		doVhosts;

		cd ${CWD}

		#check directadmin.conf file
		if [ "`grep -m1 -c 'apacheconf=/etc/httpd/conf/httpd.conf' ${DACONF_FILE}`" = "1" ]; then
			perl -pi -e 's#apacheconf=/etc/httpd/conf/httpd.conf#apacheconf=/etc/httpd/conf/extra/directadmin-vhosts.conf#' ${DACONF_FILE}
			doRestartDA;
		fi
		if [ "`grep -m1 -c 'apacheconf=/etc/httpd/conf/httpd.conf' ${DACONF_TEMPLATE_FILE}`" = "1" ]; then
			perl -pi -e 's#apacheconf=/etc/httpd/conf/httpd.conf#apacheconf=/etc/httpd/conf/extra/directadmin-vhosts.conf#' ${DACONF_TEMPLATE_FILE}
		fi

		if [ "${OS}" = "FreeBSD" ]; then
			cp -f httpd_2_freebsd /usr/local/etc/rc.d/httpd
			chmod 755 /usr/local/etc/rc.d/httpd
		else
			if [ "${SYSTEMD}" = "yes" ]; then
				if [ -e ${CB_CUST_SYSTEMD}/httpd.service ]; then
					cp -f ${CB_CUST_SYSTEMD}/httpd.service ${SYSTEMDDIR}/httpd.service
				else
					cp -f ${CB_SYSTEMD}/httpd.service ${SYSTEMDDIR}/httpd.service
				fi
				chmod 644 ${SYSTEMDDIR}/httpd.service
				systemctl daemon-reload
				systemctl enable httpd.service
			else
				if [ -e /etc/debian_version ]; then
					cp -f httpd_2_debian /etc/init.d/httpd
				else
					cp -f httpd_2 /etc/init.d/httpd
				fi

				chmod 755 /etc/init.d/httpd
				/sbin/chkconfig httpd on
			fi
		fi

		perl -pi -e 's/`grep -m1 apache_ver= ${DACONF_FILE}`/apache_ver=2.0/' ${DACONF_FILE}
		perl -pi -e 's/`grep -m1 apache_ver= ${DACONF_TEMPLATE_FILE}`/apache_ver=2.0/' ${DACONF_TEMPLATE_FILE}
		doRestartDA;
		echo "action=rewrite&value=ips" >> ${TASK_QUEUE}
		echo "action=rewrite&value=httpd" >> ${TASK_QUEUE}
		echo "action=directadmin&value=reload" >> ${TASK_QUEUE}
		run_dataskq
	else
		echo "$HTTPD_CONF seems to already be converted";
	fi
}

####################################################

doApache2() {
	if [ "${WEBSERVER_OPT}" != "apache" ] && [ "${WEBSERVER_OPT}" != "litespeed" ] && [ "${WEBSERVER_OPT}" != "nginx_apache" ]; then
		echo "You cannot install Apache, because you do not have it set in options.conf file.";
		exit 1;
	fi
	
	if [ "${SYSTEMD}" = "yes" ]; then
		if [ ! -e /usr/include/systemd/sd-daemon.h ]; then
			if [ -e ${DEBIAN_VERSION} ]; then
				#This one might be needed for the next release of Debian/Ubuntu with systemd support
				echo "";
			else
				yum -y install systemd-devel
			fi
		fi
	fi
	
	getFile httpd-${APACHE2_VER}.tar.gz apache${APACHE_VER_OPT}
	if [ "${APACHE_VER_OPT}" = "2.4" ]; then
		getFile apr-${APR_VER}.tar.gz apr
		getFile apr-util-${APR_UTIL_VER}.tar.gz apr-util
		getFile patches/mod_suexec_directory.patch mod_suexec_directory
		getFile patches/suexec-safe.patch apache_suexec_safe
		getFile patches/apache2.4.10_scoreboard.patch apache_2410_scoreboard_patch
		if [ "${APACHE2_VER}" = "2.4.9" ]; then
			getFile patches/proxyhandler.patch proxy_handler
			getFile patches/apache_2.4.9_cert.patch.r1 apache_249_cert
		fi
	fi
	
	getFile httpd_2 httpd_2_boot
	getFile httpd_2_freebsd httpd_2_boot_freebsd
	getFile httpd_2_debian httpd_2_boot_debian
	quitIfLocked doApache2
	
	if [ "${OS}" = "FreeBSD" ] && [ -e /sbin/kldload ]; then
		if [ ! -e /boot/loader.conf ]; then
			touch /boot/loader.conf
			chmod 444 /boot/loader.conf
		fi
		COUNT="`grep -c -m1 '^accf_http_load="YES"$' /boot/loader.conf`"
		if [ "${COUNT}" = "0" ]; then
			/sbin/kldload accf_http
			echo 'accf_http_load="YES"' >> /boot/loader.conf
		fi
		COUNT="`grep -c -m1 '^accf_data_load="YES"$' /boot/loader.conf`"
		if [ "${COUNT}" = "0" ]; then
			/sbin/kldload accf_data
			echo 'accf_data_load="YES"' >> /boot/loader.conf
		fi
	fi
	if [ "${MOD_RUID2_OPT}" = "yes" ]; then
		if [ ! -e /lib/libcap.so ] && [ ! -e /lib64/libcap.so ] && [ ! -e /lib/x86_64-linux-gnu/libcap.so ] && [ ! -e /lib/i386-linux-gnu/libcap.so ]; then
			echo "Cannot find libcap.so.  Please install libcap";
			if [ -e /etc/debian_version ]; then
				echo "apt-get install libcap-dev";
			else
				echo "yum -y install libcap-devel";
			fi
			removeLockfile
			return;
		fi
	fi
	
	if [ ! -e /usr/bin/bzip2 ] && [ ! -e /bin/bzip2 ]; then
		echo "Cannot find bzip2. Please install it.";
		if [ -e /etc/debian_version ]; then
			echo "apt-get install bzip2";
		else
			echo "yum -y install bzip2";
		fi
		return;
	fi
	
	#if [ "${DACONF_APACHE_VER}" = "1.3" ]; then
	if [ -e /etc/httpd/conf/httpd.conf ]; then
		if [ "`grep -m1 -c 'ServerType standalone' /etc/httpd/conf/httpd.conf`" -ne 0 ]; then
			convert;
		fi
	fi

	ADMNHTTP=/usr/local/directadmin/data/users/admin/httpd.conf
	if [ ! -e ${ADMNHTTP} ]; then
		echo -n "" > ${ADMNHTTP}
		chown diradmin:admin ${ADMNHTTP}
		chmod 640 ${ADMNHTTP}
	fi

	set64;

	if [ ! -e /usr/local/bin/pcre-config ]; then
		removeLockfile
		doPCRE;
		
	fi

	addUserGroup apache apache
	backupHttp;
	cd ${CWD};
	FILE=${CWD}/httpd-${APACHE2_VER}.tar.gz

	checkFile ${FILE};

	echo "Extracting ${FILE}...";
	tar xzf ${FILE} --no-same-owner
	
	if [ "${APACHE_VER_OPT}" = "2.4" ]; then
		FILE2=${CWD}/apr-${APR_VER}.tar.gz
		checkFile ${FILE2};
		echo "Extracting ${FILE2}...";
		tar xzf ${FILE2} --no-same-owner -C ${CWD}/httpd-${APACHE2_VER}/srclib
		if [ -d ${CWD}/httpd-${APACHE2_VER}/srclib/apr ]; then
			rm -rf ${CWD}/httpd-${APACHE2_VER}/srclib/apr
		fi
		mv -f ${CWD}/httpd-${APACHE2_VER}/srclib/apr-${APR_VER} ${CWD}/httpd-${APACHE2_VER}/srclib/apr
		
		FILE3=${CWD}/apr-util-${APR_UTIL_VER}.tar.gz
		checkFile ${FILE3};
		echo "Extracting ${FILE3}...";
		tar xzf ${FILE3} --no-same-owner -C ${CWD}/httpd-${APACHE2_VER}/srclib
		if [ -d ${CWD}/httpd-${APACHE2_VER}/srclib/apr-util ]; then
			rm -rf ${CWD}/httpd-${APACHE2_VER}/srclib/apr-util
		fi
		mv -f ${CWD}/httpd-${APACHE2_VER}/srclib/apr-util-${APR_UTIL_VER} ${CWD}/httpd-${APACHE2_VER}/srclib/apr-util
	fi

	if [ "$HARDEN_SYMLINKS_PATCH_OPT" = "yes" ]; then
		if [ "${APACHE_VER_OPT}" = "2.4" ]; then
			PATCH_NAME=harden-symlinks-2.4.patch
			getFile ${PATCH_NAME} ${PATCH_NAME}
		else
			PATCH_NAME=harden-symlinks.patch.${APACHE2_VER}
			getFile ${PATCH_NAME} harden-symlinks-patch
		fi
		
		if [ -s ${PATCH_NAME} ]; then
			echo "Patching apache for hardened symlinks patch...";
			if [ "${APACHE_VER_OPT}" = "2.4" ]; then
				cd httpd-${APACHE2_VER}
				patch -p0 < ../${PATCH_NAME}
				cd ..
			else	
				patch -p0 < ${PATCH_NAME}
			fi
		else
			echo "Cannot find ${PATCH_NAME} to for hardened symlinks patch.";
		fi
	fi

	if [ "${CLOUDLINUX_OPT}" = "yes" ]; then
		getFileCL cl-apache-patches.tar.gz cl-apache-patches
		if [ ! -e /usr/include/lve/lve-ctl.h ]; then
			yum -y install liblve-devel
		fi
	fi
	
	cd httpd-${APACHE2_VER}

	if [ "${APACHE_VER_OPT}" = "2.4" ] && [ "${SYSTEMD}" = "yes" ]; then
		echo "Enabling mod_systemd..."
		if [ -e ../configure/systemd/dependencies/httpd-2.4.3-mod_systemd.patch ]; then
			patch -p1 < ../configure/systemd/dependencies/httpd-2.4.3-mod_systemd.patch
		fi
	fi

	if [ "${APACHE2_VER}" = "2.4.9" ]; then
		echo "Patching to support Proxy Handlers"
		if [ -e ../patches/proxyhandler.patch ]; then
			patch -p1 < ../patches/proxyhandler.patch
		fi
		
		echo "Patching to fix SSL bug #56410"
		if [ -e ../patches/apache_2.4.9_cert.patch.r1 ]; then
			patch -p0 < ../patches/apache_2.4.9_cert.patch.r1
		fi
	fi

	if [ "${CLOUDLINUX_OPT}" = "no" ]; then
		echo "Patching apache to suexec safedir path...";
		if [ ! -s ../patches/suexec-safe.patch ]; then
			echo "Error with patches/suexec-safe.patch. File is missing or empty";
		else
			patch -p1 < ../patches/suexec-safe.patch
		fi
	fi

	if [ "${APACHE2_VER}" = "2.4.10" ]; then
		echo "Patching scoreboard.c, to fix mod_status bug #55886"
		patch -p1 < ../patches/apache2.4.10_scoreboard.patch
	fi
	
	if [ "${CLOUDLINUX_OPT}" = "yes" ]; then
		patch -p1 < ../apr-2.4-httpd.1.patch
		patch -p1 < ../suexec_safe_bin.patch
	fi

	echo "Patching apache to allow SuexecUserGroup in Directory context...";
	if [ ! -s ../patches/mod_suexec_directory.patch ]; then
		echo "Error with patches/mod_suexec_directory.patch. File is missing or empty";
	else
		patch -p1 < ../patches/mod_suexec_directory.patch
	fi

	setFDSETSIZE

	if [ "${WEBSERVER_OPT}" != "litespeed" ]; then
		if [ "${WEBSERVER_OPT}" = "apache" ] || [ "${WEBSERVER_OPT}" = "nginx_apache" ] || [ ! -e /usr/sbin/httpd ]; then
			#configure
			echo "Configuring httpd-${APACHE2_VER}";
			rm -f configure
			./buildconf --force
			${CWD}/${APACHE2_CONFIGURE};
			if [ $? -ne 0 ]
			then
				printf "\n*** There was an error while trying to configure Apache 2. Check the ${APACHE2_CONFIGURE} file\n";
				do_exit 1;
			fi
			echo "Done Configuration.";
		fi
	fi

	echo "increasing FD_SETSIZE in os/tpf/os.h ..";
	if [ -e ./os/tpf/os.h ]; then
			#perl -pi -e 's/FD_SETSIZE.*2048/FD_SETSIZE 32768/' ./os/tpf/os.h
			perl -pi -e 's/\#define FD_SETSIZE.*2048/\#ifdef FD_SETSIZE\n\#undef FD_SETSIZE\n\#endif\n\#define FD_SETSIZE 32768/' ./os/tpf/os.h
	fi

	if [ -e ./srclib/apr/include/apr.hnw ]; then
			perl -pi -e 's/FD_SETSIZE.*1024/FD_SETSIZE 32768/' ./srclib/apr/include/apr.hnw
	fi

	if [ -e ./srclib/apr/poll/unix/select.c ]; then
			perl -pi -e 's/FD_SETSIZE.*1024/FD_SETSIZE 32768/' ./srclib/apr/poll/unix/select.c
	fi

	if [ "${WEBSERVER_OPT}" != "litespeed" ]; then
		if [ "${WEBSERVER_OPT}" = "apache" ] || [ "${WEBSERVER_OPT}" = "nginx_apache" ] || [ ! -e /usr/sbin/httpd ]; then
			cd httpd-${APACHE2_VER};
			while
			echo "Trying to make Apache 2..."
			do
			{
				C_INCLUDE_PATH=/usr/kerberos/include make -j ${CPU_CORES}

				if [ $? -ne 0 ]
				then
					if [ ${USER_INPUT} -eq 1 ]; then
						printf "\n*** The make has failed, would you like to try to make again? (y,n): \n";
						read yesno;
						echo "";
					else
						if [ "${INPUT_VALUE}" = "d" ]; then
							yesno=n
						else
							yesno=${INPUT_VALUE}
						fi
					fi

					if [ "${yesno}" = "n" ]
					then
						do_exit 0;
					fi
				else
					break
				fi
			}
			done
			echo "Make complete";
		fi
	fi
	
	checkRPMS;

	#setup the directadmin.conf
	if [ "${CLOUDLINUX_OPT}" = "yes" ]; then
		setVal cloud_cache 1 ${DACONF_TEMPLATE_FILE}
		setVal cloud_cache 1 ${DACONF_FILE}
		echo "action=cache&value=showallusers" >> ${TASK_QUEUE}
		run_dataskq d
	elif [ "${CLOUDLINUX_OPT}" = "no" ]; then
		setVal cloud_cache 0 ${DACONF_TEMPLATE_FILE}
		setVal cloud_cache 0 ${DACONF_FILE}
	fi

	setVal nginx 0 ${DACONF_TEMPLATE_FILE}
	setVal nginx 0 ${DACONF_FILE}
	if [ "${WEBSERVER_OPT}" = "nginx_apache" ]; then
		setVal nginx_proxy 1 ${DACONF_TEMPLATE_FILE}
		setVal nginx_proxy 1 ${DACONF_FILE}
		setVal litespeed 0 ${DACONF_TEMPLATE_FILE}
		setVal litespeed 0 ${DACONF_FILE}
		set_service litespeed delete
		killall litespeed >/dev/null 2>&1
		killall -9 litespeed >/dev/null 2>&1
		doRestartDA;
	elif [ "${WEBSERVER_OPT}" = "apache" ]; then
		setVal nginx_proxy 0 ${DACONF_TEMPLATE_FILE}
		setVal nginx_proxy 0 ${DACONF_FILE}
		setVal litespeed 0 ${DACONF_TEMPLATE_FILE}
		setVal litespeed 0 ${DACONF_FILE}
		killall nginx >/dev/null 2>&1
		killall litespeed >/dev/null 2>&1
		doRestartDA;
		set_service nginx delete
		set_service litespeed delete
		killall -9 nginx >/dev/null 2>&1
		killall -9 litespeed >/dev/null 2>&1
	fi
	
	if [ "${WEBSERVER_OPT}" != "litespeed" ]; then
		if [ "${WEBSERVER_OPT}" = "apache" ] || [ "${WEBSERVER_OPT}" = "nginx_apache" ] || [ ! -e /usr/sbin/httpd ]; then
			set_service httpd ON
			
			rm -f /usr/sbin/apxs
			
			echo "Installing Apache...";
			make install
		fi
	else
		set_service httpd delete
		set_service nginx delete
	fi
	
	if [ ! -e /etc/mime.types ]
	then
		cp docs/conf/mime.types /etc/mime.types
	fi
	
	ln -sf /var/www/build /etc/httpd/build

	chown webapps:apache /var/www
	chmod 551 /var/www
	
	removeLockfile
	cd ${CWD}

	restoreHttp;

	#fix for downgrades to let $1$ passwords version of apr-utils (1.4.1) work, if 1.5.1 was installed previously.
	if [ "${APACHE_VER_OPT}" = "2.4" ] && [ "${APR_UTIL_VER}" = "1.4.1" ] && [ "${WEBSERVER_OPT}" != "litespeed" ]; then
		if [ "${WEBSERVER_OPT}" = "apache" ] || [ "${WEBSERVER_OPT}" = "nginx_apache" ] || [ ! -e /usr/sbin/httpd ]; then
			APR_51_LIB=${HTTPDDIR}/lib/libaprutil-1.so.0.5.1
			APR_41_LIB=${HTTPDDIR}/lib/libaprutil-1.so.0.4.1
			APR_LIB_LINK=${HTTPDDIR}/lib/libaprutil-1.so.0
			if [ -e "${APR_51_LIB}" ] && [ -e "${APR_41_LIB}" ]; then
				rm -f ${APR_LIB_LINK}
				rm -f ${APR_51_LIB}
				ln -s libaprutil-1.so.0.4.1 ${APR_LIB_LINK}
			fi
		fi
	fi

	if [ "${WEBSERVER_OPT}" != "litespeed" ]; then
		if [ "${WEBSERVER_OPT}" = "apache" ] || [ "${WEBSERVER_OPT}" = "nginx_apache" ] || [ ! -e /usr/sbin/httpd ]; then
			#ensure /usr/sbin/apxs
			if [ ! -s /usr/sbin/apxs ] && [ -s /usr/bin/apxs ]; then
				ln -s /usr/bin/apxs /usr/sbin/apxs
			fi
			
			if [ "${SYSTEMD}" = "yes" ]; then
				if [ -e ${INITDDIR}/httpd ]; then
					echo "Removing ${INITDDIR}/httpd..."
					rm -f ${INITDDIR}/httpd
				fi
				echo "Enabling httpd in systemd..."
				if [ -e ${CB_CUST_SYSTEMD}/httpd.service ]; then
					cp -f ${CB_CUST_SYSTEMD}/httpd.service ${SYSTEMDDIR}/httpd.service
				else
					cp -f ${CB_SYSTEMD}/httpd.service ${SYSTEMDDIR}/httpd.service
				fi
				chmod 644 ${SYSTEMDDIR}/httpd.service
				systemctl daemon-reload
				systemctl enable httpd.service
			else
				if [ ${OS} = "FreeBSD" ]
				then
					cp -f ${CWD}/httpd_2_freebsd /usr/local/etc/rc.d/httpd
					chmod 755 /usr/local/etc/rc.d/httpd
				elif [ -e /etc/debian_version ]; then
					cp -f ${CWD}/httpd_2_debian /etc/init.d/httpd
					chmod 755 /etc/init.d/httpd
					update-rc.d httpd defaults
				else
					cp -f ${CWD}/httpd_2 /etc/rc.d/init.d/httpd
					chmod 755 /etc/rc.d/init.d/httpd
					/sbin/chkconfig httpd on
				fi
			fi
		fi
	fi


	#check directadmin.conf file
	if [ "`grep -m1 -c 'apacheconf=/etc/httpd/conf/httpd.conf' ${DACONF_TEMPLATE_FILE}`" = "1" ]; then
		perl -pi -e 's#apacheconf=/etc/httpd/conf/httpd.conf#apacheconf=/etc/httpd/conf/extra/directadmin-vhosts.conf#' ${DACONF_TEMPLATE_FILE}
	fi

	if [ "`grep -m1 -c 'apacheconf=/etc/httpd/conf/httpd.conf' ${DACONF_FILE}`" = "1" ]; then
		if [ "`grep -m1 -c 'apacheconf=/etc/httpd/conf/httpd.conf' ${DACONF_FILE}`" = "1" ]; then
			perl -pi -e 's#apacheconf=/etc/httpd/conf/httpd.conf#apacheconf=/etc/httpd/conf/extra/directadmin-vhosts.conf#' ${DACONF_FILE}
			doRestartDA
		fi

		mv -f ${HTTPDCONF} ${HTTPDCONF}.${APACHE_VER_OPT}.backup

		cp -rf ${APCONFDIR} ${HTTPDDIR}
		
		if [ "${APCUSTOMCONFDIR}" != "0" ]; then
			cp -rf ${APCUSTOMCONFDIR} ${HTTPDDIR}
		fi
		cp -rf ${HTTPDCONF}.${APACHE_VER_OPT}.backup/ssl.key ${HTTPDCONF}
		cp -rf ${HTTPDCONF}.${APACHE_VER_OPT}.backup/ssl.crt ${HTTPDCONF}
		doRestartDA;
	fi

	#copy the new configs if needed
	if [ "`grep -m1 -c 'Include' ${HTTPDCONF}/extra/directadmin-vhosts.conf`" = "0" ] || [ ! -e ${HTTPDCONF}/extra/directadmin-vhosts.conf ]; then
		cp -rf ${APCONFDIR} ${HTTPDDIR}

		HDC=httpd-directories-old.conf
		
		ln -sf $HDC ${HTTPDCONF}/extra/httpd-directories.conf
		
		doApacheHostConf;
		
		if [ "${APCUSTOMCONFDIR}" != "0" ]; then
			cp -rf ${APCUSTOMCONFDIR} ${HTTPDDIR}
		fi
	fi
	
	create_httpd_nginx;

	#hide frontpage from the interface to avoid confusion
	hideFrontpage

	#ensure we have the correct apache_ver
	if [ "`grep -m1 -c apache_ver=2.0 ${DACONF_TEMPLATE_FILE}`" -eq "0" ]; then
		echo "apache_ver=2.0" >> ${DACONF_TEMPLATE_FILE}
		echo "action=rewrite&value=httpd" >> ${TASK_QUEUE}
		doRestartDA;
	elif [ "`grep -m1 -c apache_ver=2.0 ${DACONF_TEMPLATE_FILE}`" -ne "0" ]; then
		perl -pi -e 's/`grep -m1 apache_ver= ${DACONF_TEMPLATE_FILE}`/apache_ver=2.0/' ${DACONF_TEMPLATE_FILE}
	fi
	if [ "`grep -m1 -c apache_ver=2.0 ${DACONF_FILE}`" -eq "0" ]; then
		echo "apache_ver=2.0" >> ${DACONF_FILE}
		doRestartDA;
		echo "action=rewrite&value=httpd" >> ${TASK_QUEUE}
	elif [ "`grep -m1 -c apache_ver=2.0 ${DACONF_FILE}`" -ne "0" ]; then
		perl -pi -e 's/`grep -m1 apache_ver= ${DACONF_FILE}`/apache_ver=2.0/' ${DACONF_FILE}
		doRestartDA;
		echo "action=rewrite&value=httpd" >> ${TASK_QUEUE}
	fi

	fpmChecks;
	dovecotChecks;
	
	if [ "${HAVE_FPM_CGI}" = "yes" ]; then
		perl -pi -e 's/nginx/apache/' /usr/local/directadmin/data/templates/php-fpm.conf
	fi

	ensure_server_ca
	
	do_rewrite_httpd_alias
	
	#rewrite ips.conf if needed
	echo "action=rewrite&value=ips" >> ${TASK_QUEUE}
	echo "action=rewrite&value=httpd" >> ${TASK_QUEUE}
	
	run_dataskq

	#tokenize the IP and ports if needed
	tokenize_IP
	tokenize_ports

	#add all the Include lines if they do not exist
	if [ "`grep -m1 -c 'Include' ${HTTPDCONF}/extra/directadmin-vhosts.conf`" = "0" ] || [ ! -e ${HTTPDCONF}/extra/directadmin-vhosts.conf ]; then
		doVhosts;
		cd ${CWD}/httpd-${APACHE2_VER}
	fi

	if [ ! -s /etc/httpd/conf/ssl.key/server.key ] || [ ! -s /etc/httpd/conf/ssl.crt/server.crt ]; then
		cd ${WORKDIR}
		mkdir -p /etc/httpd/conf/ssl.key
		mkdir -p /etc/httpd/conf/ssl.crt
		#install the cert/key
		/usr/bin/openssl req -x509 -newkey rsa:2048 -keyout /etc/httpd/conf/ssl.key/server.key -out /etc/httpd/conf/ssl.crt/server.crt -days 9999 -nodes -config ./${APCERTCONF}

		chmod 600 ${HTTPDCONF}/ssl.crt/server.crt
		chmod 600 ${HTTPDCONF}/ssl.key/server.key		

		cd ${CWD}
	fi

	doApacheCheck;

	mkdir -p ${WWWDIR}

	if [ ! -e ${WWWDIR}/index.html ]
	then
		if [ -e ${WWWDIR}/index.html.en ]
		then
			cp -f ${WWWDIR}/index.html.en ${WWWDIR}/index.html
		else
			echo "<html>Apache is functioning normally</html>" > ${WWWDIR}/index.html
		fi
	fi
	if [ ! -e /etc/logrotate.d/apache ] && [ ${OS} != "FreeBSD" ]
	then
		${WGET} ${WGET_CONNECT_OPTIONS} ${WEBPATH}/apache.logrotate -O /etc/logrotate.d/apache
	fi

	if [ ! -d /usr/local/safe-bin ]; then
		mkdir -p /usr/local/safe-bin
		chmod 511 /usr/local/safe-bin
		chown apache:apache /usr/local/safe-bin
	fi
	
	# Make sure apr is linked correctly
	if [ -e /usr/bin/apr-1-config ]; then
		ln -sf /usr/bin/apr-1-config /usr/bin/apr-config
	fi

	PHPMODULES=${HTTPDCONF}/extra/httpd-phpmodules.conf
	
	if [ -e ${PHPMODULES} ]; then
	#	COUNT2="`grep -c 'mpm_event_module' ${PHPMODULES}`"
	#	COUNT3="`grep -c 'mpm_prefork_module' ${PHPMODULES}`"
		COUNT="`grep -m1 -c 'systemd_module' ${PHPMODULES}`"
		if [ "${SYSTEMD}" = "yes" ] && [ -e /usr/lib/apache/mod_systemd.so ] && [ ${COUNT} -eq 0 ]; then
			perl -pi -e 's|^LoadModule systemd_module|#LoadModule systemd_module|' /etc/httpd/conf/httpd.conf
			echo "LoadModule	systemd_module		/usr/lib/apache/mod_systemd.so" >> ${PHPMODULES}
		fi
		if [ "${MOD_RUID2_OPT}" = "yes" ] && [ ! -e /usr/lib/apache/mod_ruid2.so ] && [ "${WEBSERVER_OPT}" != "litespeed" ]; then
				doModRuid2;
		fi
		COUNT="`grep -m1 -c 'ruid2_module' ${PHPMODULES}`"
		if [ "${MOD_RUID2_OPT}" = "yes" ] && [ ${COUNT} -eq 0 ]; then
			perl -pi -e 's|^LoadModule ruid2_module|#LoadModule ruid2_module|' /etc/httpd/conf/httpd.conf
			echo "LoadModule	ruid2_module		/usr/lib/apache/mod_ruid2.so" >> ${PHPMODULES}
			echo "Mutex sem" >> ${PHPMODULES}
		fi
		COUNT="`grep -m1 -c '/usr/lib/apache/mod_mpm_' ${PHPMODULES}`"
		if [ ${COUNT} -eq 0 ]; then
			#Use event MPM for php-fpm and prefork for mod_php
			if [ "${APACHE_MPM_OPT}" = "auto" ]; then
				if [ "${HAVE_CLI}" = "no" ]; then
					# Add to httpd-phpmodules.conf
					echo "LoadModule mpm_event_module /usr/lib/apache/mod_mpm_event.so" >> ${PHPMODULES}
				else
					# Add to httpd-phpmodules.conf
					echo "LoadModule mpm_prefork_module /usr/lib/apache/mod_mpm_prefork.so" >> ${PHPMODULES}
				fi
			elif [ "${APACHE_MPM_OPT}" = "event" ]; then
				echo "LoadModule mpm_event_module /usr/lib/apache/mod_mpm_event.so" >> ${PHPMODULES}
			elif [ "${APACHE_MPM_OPT}" = "worker" ]; then
				echo "LoadModule mpm_worker_module /usr/lib/apache/mod_mpm_worker.so" >> ${PHPMODULES}
			else
				echo "LoadModule mpm_prefork_module /usr/lib/apache/mod_mpm_prefork.so" >> ${PHPMODULES}
			fi
		fi
		if [ "${HTSCANNER_OPT}" = "yes" ]; then
			if [ "${WEBSERVER_OPT}" = "apache" ]  || [ "${WEBSERVER_OPT}" = "nginx_apache" ]; then
				if [ "${HAVE_FCGID}" = "yes" ] || [ "${HAVE_FPM_CGI}" = "yes" ] || [ "${HAVE_SUPHP_CGI}" = "yes" ]; then 
					COUNT="`grep -m1 -c 'htscanner_module' ${PHPMODULES}`"
					if [ ${COUNT} -eq 0 ]; then
						perl -pi -e 's|^LoadModule htscanner_module|#LoadModule htscanner_module|' /etc/httpd/conf/httpd.conf
						echo "LoadModule htscanner_module /usr/lib/apache/mod_htscanner2.so" >> ${PHPMODULES}
					elif [ ${COUNT} -gt 0 ]; then
						perl -pi -e 's|^LoadModule htscanner_module|#LoadModule htscanner_module|' /etc/httpd/conf/httpd.conf
						perl -pi -e 's|^LoadModule	htscanner_module|^#LoadModule	htscanner_module' ${PHPMODULES}
					fi
					doModHtscanner;
				fi
			fi
		fi

		COUNT="`grep -m1 -c 'suphp_module' ${PHPMODULES}`"
		if [ "${HAVE_SUPHP_CGI}" = "yes" ]; then
			if [ ${COUNT} -eq 0 ]; then
				perl -pi -e 's|^LoadModule suphp_module|#LoadModule suphp_module|' /etc/httpd/conf/httpd.conf
				echo "LoadModule	suphp_module		/usr/lib/apache/mod_suphp.so" >> ${PHPMODULES}
			fi
		fi
		
		if [ "${HAVE_FCGID}" = "yes" ]; then
			if [ ! -s /usr/lib/apache/mod_fcgid.so ]; then
					doModFCGID;
			fi
			COUNT="`grep -m1 -c 'fcgid_module' ${PHPMODULES}`"
			if [ "${COUNT}" -eq 0 ]; then
				perl -pi -e 's|^LoadModule	mod_fcgid|#LoadModule	mod_fcgid|' /etc/httpd/conf/httpd.conf
				echo "LoadModule	fcgid_module		/usr/lib/apache/mod_fcgid.so" >> ${PHPMODULES}
			fi
			COUNT="`grep -m1 -c 'httpd-fcgid.conf' ${PHPMODULES}`"
			if [ ${COUNT} -eq 0 ]; then
				echo "Include /etc/httpd/conf/extra/httpd-fcgid.conf" >> ${PHPMODULES}
			fi
		fi	
		
		if [ "${HAVE_FCGID}" = "yes" ] || [ "${HAVE_FPM_CGI}" = "yes" ] || [ "${HAVE_SUPHP_CGI}" = "yes" ]; then
			if [ "${WEBSERVER_OPT}" = "apache" ] || [ "${WEBSERVER_OPT}" = "nginx_apache" ]; then
				if [ "${HTSCANNER_OPT}" = "yes" ] && [ ! -e /usr/lib/apache/mod_htscanner2.so ]; then
					doModHtscanner;
				fi
			fi
		fi
	fi

	# Make sure there is no SSLMutex in /etc/httpd/conf/extra/httpd-ssl.conf
	# Make sure there is no LockFile in /etc/httpd/conf/extra/httpd-mpm.conf
	if [ "${APACHE_VER_OPT}" = "2.4" ]; then
		perl -pi -e 's/^SSLMutex/#SSLMutex/' /etc/httpd/conf/extra/httpd-ssl.conf
		perl -pi -e 's/^LockFile/#LockFile/' /etc/httpd/conf/extra/httpd-mpm.conf
	fi
	
	doModHostingLimits 0;
	doModLsapi 0;
	
	cagefsctl_update;
	
	if [ "${WEBSERVER_OPT}" = "apache" ] || [ "${WEBSERVER_OPT}" = "nginx_apache" ]; then
		echo "Restarting apache."
		control_service httpd restart
	elif [ "${WEBSERVER_OPT}" = "litespeed" ] && [ -e ${INITDDIR}/litespeed ]; then
		echo "Restarting litespeed."
		if [ "${SYSTEMD}" = "yes" ]; then
			#No systemd for litespeed yet
			${INITDDIR}/litespeed restart
		else
			${INITDDIR}/litespeed restart
		fi
	fi

	removeLockfile
}

####################################################

doLiteSpeed() {
	if [ "${WEBSERVER_OPT}" != "litespeed" ]; then
		echo "You cannot install LiteSpeed, because you do not have it set in options.conf file.";
		exit 1;
	fi
	
	doApache2
	
	getFileLSWS ${LITESPEED_NAME}.tar.gz ${LITESPEED_VER_NAME}
	
	quitIfLocked doLiteSpeed

	if [ ! -d /var/www/html ]; then
		mkdir -p /var/www/html
	fi
	
	set64;

	addUserGroup apache apache

	chown apache:apache /var/www
	chmod 551 /var/www
	
	cd ${CWD};
	FILE=${CWD}/${LITESPEED_NAME}.tar.gz

	checkFile ${FILE};

	echo "Extracting ${FILE}...";
	tar xzf ${FILE} --no-same-owner

	cd lsws-${LITESPEED_VER}
	
	if [ ! -d "${LSWS_HOME}" ]; then
		mkdir -p "${LSWS_HOME}"
		chmod apache:apache ${LSWS_HOME}
		mkdir -p "${LSWS_HOME}/conf"
		chmod apache:apache ${LSWS_HOME}/conf
	fi
	
	if [ ! -e ${LITESPEED_SERIAL_NO} ]; then
		echo "LiteSpeed serial number ${LITESPEED_SERIAL_NO} not found. Using a trial key."
		if [ ! -e ${LITESPEED_TRIAL_KEY} ]; then
			${WGET} ${WGET_CONNECT_OPTIONS} -O ${LITESPEED_TRIAL_KEY} http://license.litespeedtech.com/da/trial.key
		fi
		if [ ! -e ${LITESPEED_TRIAL_KEY} ]; then
			do_exit 1 "LiteSpeed trial key ${LITESPEED_TRIAL_KEY} is also not found. Exiting."
		else
			cp -f ${LITESPEED_TRIAL_KEY} ./trial.key
			if [ ! -e ${LSWS_HOME}/conf/trial.key ]; then
				cp -f ${LITESPEED_TRIAL_KEY} ${LSWS_HOME}/conf/trial.key
			fi
		fi
	else
		cp -f ${LITESPEED_SERIAL_NO} ./serial.no
		if [ ! -e ${LSWS_HOME}/conf/serial.no ]; then
			cp -f ${LITESPEED_SERIAL_NO} ${LSWS_HOME}/conf/serial.no
		fi
	fi
	
	if [ -e /usr/local/lsws/bin/lshttpd ]; then
		EXPIRED=`/usr/local/lsws/bin/lshttpd -V | grep -m1 -c expired`
		if [ ${EXPIRED} -gt 0 ]; then
			echo "Cannot install LiteSpeed, because the license is expired."
			return;
		fi
	fi
	
	#configure
	echo "Installing LiteSpeed ${LITESPEED_VER}...";
	
	rm -rf ./add-ons/cpanel/lsws_whm_plugin
	source ./functions.sh
	init;
	export LSWS_HOME=${LSWS_HOME}
	export LSINSTALL_DIR=`pwd`
	export PHP_SUEXEC=2
	export AP_PORT_OFFSET=0
	export ADMIN_USER=admin
	export ADMIN_PASS="`perl -le'print map+(A..Z,a..z,0..9)[rand 62],0..9'`";
	if [ -e /usr/local/directadmin/data/users/admin/user.conf ]; then
		export ADMIN_EMAIL=`grep -m1 '^email=' /usr/local/directadmin/data/users/admin/user.conf | cut -d= -f2`
	fi
	export INSTALL_TYPE="reinstall"
	export PHP_SUFFIX=php
	export SETUP_PHP=0
	export ADMIN_PORT=7080
	export DEFAULT_PORT=80
	export HOST_PANEL="directadmin"
	export WS_USER=apache
	export WS_GROUP=apache
	export DIR_OWN="apache:apache"
	export CONF_OWN="apache:apache"
    
	echo ""
	echo "Installing LiteSpeed web server, please wait... "
	echo ""

	if [ ! -s ${LSWS_HOME}/admin/conf/htpasswd ]; then
		ADMIN_PHP=${LSINSTALL_DIR}/admin/fcgi-bin/admin_php5
		if [ ! -e ${ADMIN_PHP} ]; then
			ADMIN_PHP=${LSINSTALL_DIR}/admin/fcgi-bin/admin_php
		fi
		ENCRYPT_PASS=`${ADMIN_PHP} -q ${LSINSTALL_DIR}/admin/misc/htpasswd.php ${ADMIN_PASS}`
		echo "${ADMIN_USER}:${ENCRYPT_PASS}" > "${LSINSTALL_DIR}/admin/conf/htpasswd"
		SHOWPASSWORD=1
	else
		SHOWPASSWORD=0
	fi
	
	configRuby
	installation
	if [ ! -s ${LSWS_HOME}/admin/conf/htpasswd ]; then
		admin_login
	fi
	chmod g+x /var/log/httpd/
	chgrp apache /var/log/httpd/
	chown apache:apache /var/log/httpd/domains
	buildApConfigFiles
	installation
	
	echo ""
	$LSWS_HOME/admin/misc/rc-inst.sh
	
	setVal nginx_proxy 0 ${DACONF_TEMPLATE_FILE}
	setVal nginx_proxy 0 ${DACONF_FILE}
	setVal nginx 0 ${DACONF_TEMPLATE_FILE}
	setVal nginx 0 ${DACONF_FILE}
	setVal litespeed 1 ${DACONF_TEMPLATE_FILE}
	setVal litespeed 1 ${DACONF_FILE}
	killall httpd >/dev/null 2>&1
	killall nginx >/dev/null 2>&1
	doRestartDA;
	set_service httpd delete
	set_service nginx delete
	killall -9 httpd >/dev/null 2>&1
	killall -9 nginx >/dev/null 2>&1
	
	if [ -e ${INITDDIR}/lsws ] && [ ! -e ${INITDDIR}/litespeed ]; then
		ln -s ${INITDDIR}/lsws ${INITDDIR}/litespeed
	fi
	
	set_service litespeed ON
	
	cagefsctl_update;
	
	echo "Restarting litespeed."
	if [ "${SYSTEMD}" = "yes" ]; then
		#No systemd for litespeed yet
		${INITDDIR}/litespeed restart
	else
		${INITDDIR}/litespeed restart
	fi

	SERVER_HOSTNAME=`hostname`
	echo "Installation of LiteSpeed ${LITESPEED_VER} is now complete.";
	echo "Admin panel address: http://${SERVER_HOSTNAME}:7080. Please make sure that port 7080 is open in firewall."
	if [ "${SHOWPASSWORD}" = "1" ]; then
		echo "Admin password: ${ADMIN_PASS}"
	fi
	removeLockfile
}

####################################################

doNginx() {
	if [ "${WEBSERVER_OPT}" != "nginx" ] && [ "${WEBSERVER_OPT}" != "nginx_apache" ]; then
		echo "You cannot install Nginx, because you do not have it set in options.conf file.";
		exit 1;
	fi
	
	getFile nginx-${NGINX_VER}.tar.gz nginx

	getFile nginx.boot nginx_boot
	getFile nginx.boot.freebsd nginx_boot_freebsd
	getFile nginx.boot.debian nginx_boot_debian
	quitIfLocked doNginx

	ADMNNGINX=/usr/local/directadmin/data/users/admin/nginx.conf
	if [ ! -e ${ADMNNGINX} ]; then
		echo -n "" > ${ADMNNGINX}
		chown diradmin:admin ${ADMNNGINX}
		chmod 640 ${ADMNNGINX}
	fi
	
	if [ ! -d /var/www/html ]; then
		mkdir -p /var/www/html
	fi
	
	set64;

	addUserGroup nginx nginx
	addNginxToAccess;

	chown webapps:nginx /var/www
	chmod 551 /var/www
	
	cd ${CWD};
	FILE=${CWD}/nginx-${NGINX_VER}.tar.gz

	checkFile ${FILE};

	echo "Extracting ${FILE}...";
	tar xzf ${FILE} --no-same-owner

	cd nginx-${NGINX_VER}

	setFDSETSIZE

	#copy the new configs
	if [ ! -d ${NGINXCONF} ]; then
		mkdir ${NGINXCONF}
		cp -rf ${NGINXCONFDIR}/* ${NGINXCONF}
	fi
	
	if [ ! -e ${NGINXCONF}/directadmin-settings.conf ]; then
		touch ${NGINXCONF}/directadmin-settings.conf
	fi
	
	if [ ! -e ${NGINXCONF}/directadmin-ips.conf ]; then
		touch ${NGINXCONF}/directadmin-ips.conf
	fi
	
	if [ ! -e ${NGINXCONF}/nginx-includes.conf ]; then
		touch ${NGINXCONF}/nginx-includes.conf
	fi
		
	#configure
	echo "Configuring nginx-${NGINX_VER}";
	${CWD}/${NGINX_CONFIGURE};
        if [ $? -ne 0 ]
        then
                printf "\n*** There was an error while trying to configure Nginx. Check the ${NGINX_CONFIGURE} file\n";
                do_exit 1;
        fi
	echo "Done Configuration.";

	echo "increasing FD_SETSIZE in os/tpf/os.h ..";
	if [ -e ./os/tpf/os.h ]; then
			#perl -pi -e 's/FD_SETSIZE.*2048/FD_SETSIZE 32768/' ./os/tpf/os.h
			perl -pi -e 's/\#define FD_SETSIZE.*2048/\#ifdef FD_SETSIZE\n\#undef FD_SETSIZE\n\#endif\n\#define FD_SETSIZE 32768/' ./os/tpf/os.h
	fi

	cd nginx-${NGINX_VER};
	
	while
	echo "Trying to make Nginx..."
	do
	{
		C_INCLUDE_PATH=/usr/kerberos/include make -j ${CPU_CORES}

		if [ $? -ne 0 ]
		then
			if [ ${USER_INPUT} -eq 1 ]; then
				printf "\n*** The make has failed, would you like to try to make again? (y,n): \n";
				read yesno;
				echo "";
                        else
                                if [ "${INPUT_VALUE}" = "d" ]; then
                                        yesno=n
                                else
                                        yesno=${INPUT_VALUE}
                                fi
                        fi

			if [ "${yesno}" = "n" ]
			then
				do_exit 0;
			fi
		else
			break
		fi
	}
	done
	echo "Make complete";

	checkRPMS;

	echo "Installing Nginx...";
	control_service nginx stop
	# A fix for "cp: cannot create regular file `/usr/sbin/nginx': Text file busy"
	sleep 2
	killall -9 nginx >/dev/null 2>&1
	
	make install

	cd ${CWD}

	if [ "${SYSTEMD}" = "yes" ]; then
		if [ -e ${INITDDIR}/nginx ]; then
			echo "Removing ${INITDDIR}/nginx..."
			rm -f ${INITDDIR}/nginx
		fi
		echo "Enabling nginx in systemd..."
		if [ -e ${CB_CUST_SYSTEMD}/nginx.service ]; then
			cp -f ${CB_CUST_SYSTEMD}/nginx.service ${SYSTEMDDIR}/nginx.service
		else
			cp -f ${CB_SYSTEMD}/nginx.service ${SYSTEMDDIR}/nginx.service
		fi
		chmod 644 ${SYSTEMDDIR}/nginx.service
		systemctl daemon-reload
		systemctl enable nginx.service
	else
		if [ ${OS} = "FreeBSD" ]
		then
			cp -f ${CWD}/nginx.boot.freebsd /usr/local/etc/rc.d/nginx
			chmod 755 /usr/local/etc/rc.d/nginx
		elif [ -e /etc/debian_version ]; then
			cp -f ${CWD}/nginx.boot.debian /etc/init.d/nginx
			chmod 755 /etc/init.d/nginx
			update-rc.d nginx defaults
		else
			cp -f ${CWD}/nginx.boot /etc/rc.d/init.d/nginx
			chmod 755 /etc/rc.d/init.d/nginx
			/sbin/chkconfig nginx on
		fi
	fi

	for php_shortrelease in `echo ${PHP1_SHORTRELEASE_SET}`; do {
		perl -pi -e "s|/usr/local/php${php_shortrelease}/sockets/webapps.sock|/usr/local/php${PHP1_SHORTRELEASE}/sockets/webapps.sock|" ${NGINXCONF}/nginx.conf;
	};
	done;

	tokenize_IP;
	tokenize_ports;
	
	if [ "${IPV6}" = "0" ]; then
		perl -pi -e 's| listen       \[::1\]:| #listen       \[::1\]:|' ${NGINXCONF}/nginx-vhosts.conf
		perl -pi -e 's| listen       \[::1\]:| #listen       \[::1\]:|' ${NGINXCONF}/nginx.conf
	else
		perl -pi -e 's| #listen       \[::1\]:| listen       \[::1\]:|' ${NGINXCONF}/nginx-vhosts.conf
		perl -pi -e 's| #listen       \[::1\]:| listen       \[::1\]:|' ${NGINXCONF}/nginx.conf
	fi
	
	fpmChecks;
	dovecotChecks;
	do_rewrite_nginx_webapps;
	
	#rewrite ips.conf if needed
	echo "action=rewrite&value=ips" >> ${TASK_QUEUE}

	echo "action=rewrite&value=nginx" >> ${TASK_QUEUE}
	run_dataskq

	#add all the Include lines if they do not exist
	if [ "`grep -m1 -c 'Include' ${NGINXCONF}/directadmin-vhosts.conf`" = "0" ] || [ ! -e ${NGINXCONF}/directadmin-vhosts.conf ]; then
		doVhosts;
	fi

	if [ ! -s ${NGINXCONF}/ssl.key/server.key ] || [ ! -s ${NGINXCONF}/ssl.crt/server.crt ]; then
		cd ${WORKDIR}
		mkdir -p ${NGINXCONF}/ssl.key
		mkdir -p ${NGINXCONF}/ssl.crt
		
		if [ -s ${HTTPDCONF}/ssl.key/server.key ] && [ -s ${HTTPDCONF}/ssl.crt/server.crt ]; then
			cp -pf ${HTTPDCONF}/ssl.key/server.key ${NGINXCONF}/ssl.key
			cp -pf ${HTTPDCONF}/ssl.crt/server.crt ${NGINXCONF}/ssl.crt/server.crt
		else
			#install the cert/key
			/usr/bin/openssl req -x509 -newkey rsa:2048 -keyout ${NGINXCONF}/ssl.key/server.key -out ${NGINXCONF}/ssl.crt/server.crt -days 9999 -nodes -config ./${APCERTCONF}	
		fi

		chmod 600 ${NGINXCONF}/ssl.crt/server.crt
		chmod 600 ${NGINXCONF}/ssl.key/server.key	
			
		cd ${CWD}
	fi
	
	ensure_server_ca

	if [ "${NGINXCUSTOMCONFDIR}" != "0" ]; then
		cp -rf ${NGINXCUSTOMCONFDIR}/* ${NGINXCONF}/
	fi
	
	perl -pi -e "s#worker_processes  1;#worker_processes  ${CPU_CORES};#" ${NGINXCONF}/nginx.conf
		
	tokenize_IP;
	tokenize_ports;
	
	mkdir -p ${WWWDIR}

	if [ ! -e ${WWWDIR}/index.html ]
	then
		echo "<html>Nginx is functioning normally</html>" > ${WWWDIR}/index.html
	fi
	if [ ! -e /etc/logrotate.d/nginx ] && [ ${OS} != "FreeBSD" ]
	then
		${WGET} ${WGET_CONNECT_OPTIONS} ${WEBPATH}/nginx.logrotate -O /etc/logrotate.d/nginx
	fi
	
	if [ ! -d /var/log/nginx/domains ]; then
		mkdir -p /var/log/nginx/domains
	fi
	
	#setup the directadmin.conf
	if [ "${CLOUDLINUX_OPT}" = "yes" ]; then
		setVal cloud_cache 1 ${DACONF_TEMPLATE_FILE}
		setVal cloud_cache 1 ${DACONF_FILE}
		echo "action=cache&value=showallusers" >> ${TASK_QUEUE}
		run_dataskq d
	elif [ "${CLOUDLINUX_OPT}" = "no" ]; then
		setVal cloud_cache 0 ${DACONF_TEMPLATE_FILE}
		setVal cloud_cache 0 ${DACONF_FILE}
	fi
	
	if [ "${WEBSERVER_OPT}" = "nginx_apache" ]; then
		setVal nginx_proxy 1 ${DACONF_TEMPLATE_FILE}
		setVal nginx_proxy 1 ${DACONF_FILE}
		setVal nginx 0 ${DACONF_TEMPLATE_FILE}
		setVal nginx 0 ${DACONF_FILE}
		setVal litespeed 0 ${DACONF_TEMPLATE_FILE}
		setVal litespeed 0 ${DACONF_FILE}
		killall litespeed >/dev/null 2>&1
		doRestartDA;
		set_service litespeed delete
		killall -9 litespeed >/dev/null 2>&1
	else
		setVal nginx_proxy 0 ${DACONF_TEMPLATE_FILE}
		setVal nginx_proxy 0 ${DACONF_FILE}
		setVal nginx 1 ${DACONF_TEMPLATE_FILE}
		setVal nginx 1 ${DACONF_FILE}
		setVal litespeed 0 ${DACONF_TEMPLATE_FILE}
		setVal litespeed 0 ${DACONF_FILE}
		
		killall httpd >/dev/null 2>&1
		killall litespeed >/dev/null 2>&1
		doRestartDA;
		set_service httpd delete
		set_service litespeed delete
		killall -9 httpd >/dev/null 2>&1
		killall -9 litespeed >/dev/null 2>&1
	fi
	
	set_service nginx ON
	
	cagefsctl_update;
	
	echo "Restarting nginx."
	
	control_service nginx restart
	
	removeLockfile
}

####################################################

convertToDovecot() {
	updateDovecot;

	if [ "${DOVECOT_OPT}" != "yes" ]; then
		echo "You cannot convert to Dovecot, because you do not have it set in options.conf file.";
		exit 1;
	fi

        #patch exim.conf
	if [ -e /etc/exim.conf ] && [ "`grep -m1 -c maildir_format /etc/exim.conf`" -eq 0 ]; then
		echo "To Dovecot: Patching /etc/exim.conf to maildir";
		patch -d/ -p0 < ${CWD}/exim.conf.dovecot.patch
	fi

	COUNT=0
	if [ -e ${DACONF_FILE} ]; then
		COUNT="`grep -m1 -c -e '^dovecot=1' ${DACONF_FILE}`"
        fi
        if [ "${COUNT}" = "0" ] && [ -e ${DACONF_FILE} ]; then
		echo "Adding dovecot=1 to the ${DACONF_FILE} file...";
                echo "dovecot=1" >> ${DACONF_FILE}
                set_service dovecot ON
		doRestartDA
        fi

	COUNT_TEMPLATE="`grep -m1 -c -e '^dovecot=1' ${DACONF_TEMPLATE_FILE}`"
	if [ "${COUNT_TEMPLATE}" = "0" ] && [ -e ${DACONF_TEMPLATE_FILE} ]; then
		echo "Adding dovecot=1 to the ${DACONF_TEMPLATE_FILE} (template) file ...";
                echo "dovecot=1" >> ${DACONF_TEMPLATE_FILE}
		set_service dovecot ON
	fi

        #uninstall old services and restart exim
        if [ "${OS}" = "FreeBSD" ]; then
                /usr/local/etc/rc.d/directadmin restart
                /usr/local/etc/rc.d/exim restart
                perl -pi -e 's/^imap/#imap/' /etc/inetd.conf
                killall -HUP inetd
                /usr/local/etc/rc.d/vm-pop3d stop
                cat /usr/local/etc/rc.d/boot.sh | grep -v vm-pop3d > /usr/local/etc/rc.d/boot.sh.new
		mv -f /usr/local/etc/rc.d/boot.sh /usr/local/etc/rc.d/boot.sh.old
		mv -f /usr/local/etc/rc.d/boot.sh.new /usr/local/etc/rc.d/boot.sh
		chmod 755 /usr/local/etc/rc.d/boot.sh
	elif [ -e /etc/debian_version ]; then
		control_service exim restart
		control_service directadmin restart
		perl -pi -e 's/^imap/#imap/' /etc/inetd.conf
		killall -HUP inetd
		control_service vm-pop3d stop 2> /dev/null
		chmod 0 /etc/init.d/vm-pop3d 2> /dev/null
        else
                control_service exim restart
                control_service directadmin restart
                rm -f /etc/xinetd.d/imap
                killall -HUP xinetd
                control_service vm-pop3d stop 2> /dev/null
                /sbin/chkconfig vm-pop3d off 2> /dev/null
        fi

	killall -9 vm-pop3d 2> /dev/null

	set_service vm-pop3d delete

	echo "Adding conversion command to the task.queue ...";
	echo "action=convert&value=todovecot" >> ${TASK_QUEUE}
	echo "Executing the task.queue cotents now, please be patient ...";
	run_dataskq d

	echo "Restarting dovecot."
	control_service dovecot restart

	echo "Restarting exim."
	control_service exim restart
	
	echo "Done.";
}

####################################################

doPigeonhole() {

	if [ "${PIGEONHOLE_VER}" = "no" ]; then
		do_exit 1 "Cannot install pigeonhole, because there is no version available for Dovecot ${DOVECOT_VER}."
	fi
	
	quitIfLocked doPigeonhole
	
        cd ${CWD};

	getFile dovecot-${DOVECOT_REL}-pigeonhole-${PIGEONHOLE_VER}.tar.gz pigeonhole${DOVECOT_SHORTREL}

        tar xzf dovecot-${DOVECOT_REL}-pigeonhole-${PIGEONHOLE_VER}.tar.gz --no-same-owner
        cd dovecot-${DOVECOT_REL}-pigeonhole-${PIGEONHOLE_VER}

	./configure --prefix=/usr
	
        while
        echo "Trying to make pigeonhole ${PIGEONHOLE_VER}"
        do
        {
                make

                if [ $? -ne 0 ]
                then
			if [ ${USER_INPUT} -eq 1 ]; then
	                        printf "\n*** The make has failed, would you like to try to make again? (y,n): \n";
        	                read yesno;
                	        echo "";
                        else
                                if [ "${INPUT_VALUE}" = "d" ]; then
                                        yesno=n
                                else
                                        yesno=${INPUT_VALUE}
                                fi
                        fi

                        if [ "${yesno}" = "n" ]
                        then
                                do_exit 0;
                        fi
                else
                        break;
                fi
        }
        done

        touch /var/log/dovecot-debug.log /var/log/dovecot-lmtp.log /var/log/dovecot-sieve.log /var/log/dovecot-sieve-errors.log /var/log/dovecot-lmtp-errors.log 
        
        chown mail:mail /var/log/dovecot-debug.log /var/log/dovecot-lmtp.log /var/log/dovecot-sieve.log /var/log/dovecot-sieve-errors.log /var/log/dovecot-lmtp-errors.log 
        
        chmod 660 /var/log/dovecot-debug.log /var/log/dovecot-lmtp.log /var/log/dovecot-sieve.log /var/log/dovecot-sieve-errors.log /var/log/dovecot-lmtp-errors.log 
	

        make install
        
	mkdir -p /var/lib/dovecot/sieve >/dev/null 2>&1
	touch /var/lib/dovecot/sieve/default.sieve
	sievec /var/lib/dovecot/sieve/default.sieve
	chown mail:mail /var/lib/dovecot/sieve/default.sieve
	
	getFile patches/dovecot.conf.pigeonhole.patch dovecotpigeonholepatch
	
	COUNT="`grep -m1 -c dovecot_lmtp_udp /etc/exim.conf`"
	if [ "${COUNT}" -eq 0 ] && [ -e ${WORKDIR}/patches/exim.conf.pigeonhole.patch ]; then
		getFile patches/exim.conf.pigeonhole.patch eximpigeonholepatch
		cd /etc
		patch -p0 < ${WORKDIR}/patches/exim.conf.pigeonhole.patch
	fi
	
	perl -pi -e 's#transport = virtual_localdelivery#transport = dovecot_lmtp_udp#' /etc/exim.conf
	
	COUNT="`grep -m1 -c managesieve /etc/dovecot/dovecot.conf`"
	if [ "${COUNT}" -eq 0 ] && [ -e ${WORKDIR}/patches/dovecot.conf.pigeonhole.patch ]; then
		cd /etc/dovecot
		patch -p0 < ${WORKDIR}/patches/dovecot.conf.pigeonhole.patch
	fi
	
	perl -pi -e "s|hostname #req|`hostname` #req|" /etc/dovecot/dovecot.conf
	
	cd ${WORKDIR}

	removeLockfile
	
	echo "Restarting dovecot."
	control_service dovecot restart
	
	echo "Restarting exim."
	control_service exim restart
}

doDovecot() {
	updateDovecot;
	if [ "${DOVECOT_OPT}" != "yes" ]; then
		do_exit 1 "You cannot install Dovecot, because you do not have it set in options.conf file.";
	fi

	quitIfLocked doDovecot
	
	if [ "${DOVECOT_OPT}" = "no" ]; then
		do_exit 1 "Dovecot is not set in options.conf."
	fi

	if [ ! -e ${WORKDIR}/dovecot-${DOVECOT_VER}.tar.gz ]; then
		do_exit 1 "File dovecot-${DOVECOT_VER}.tar.gz does not exist. Try running ${boldon}./build update.${boldoff}"
	fi

	COUNT=0
	if [ -e ${DACONF_FILE} ]; then
		COUNT=`grep -m1 -c -e '^dovecot=1' ${DACONF_FILE}`
	fi
        
        if [ ${COUNT} -eq 0 ] || [ ! -e ${DACONF_FILE} ]; then
		echo "Converting to dovecot (${DOVECOT_VER}) ...";
                convertToDovecot;
        fi

	echo "Installing dovecot ${DOVECOT_VER} ...";

	addUserGroup dovecot dovecot

        cd ${CWD};
        FILE=${CWD}/dovecot-${DOVECOT_VER}.tar.gz
        checkFile ${FILE}
        echo "Extracting ...";
        tar xzf ${FILE} --no-same-owner
        echo "Done.";
        cd dovecot-${DOVECOT_VER}

	echo "Patching syslog with LOG_PID ...";

	perl -pi -e 's/LOG_NDELAY/LOG_NDELAY|LOG_PID/' src/auth/main.c
	perl -pi -e 's/LOG_NDELAY/LOG_NDELAY|LOG_PID/' src/imap/main.c
	perl -pi -e 's/LOG_NDELAY/LOG_NDELAY|LOG_PID/' src/master/main.c
	perl -pi -e 's/LOG_NDELAY/LOG_NDELAY|LOG_PID/' src/pop3/main.c

	perl -pi -e 's/LOG_NDELAY/LOG_NDELAY|LOG_PID/' src/lib-master/master-service.c

	echo "Configuring dovecot ${DOVECOT_VER} ...";

	CONF_FILE=${CWD}/${DOVECOT_CONFIGURE};
	
	${CONF_FILE}
	
	if [ $? -ne 0 ]
	then
		printf "\n*** There was an error while trying to configure dovecot. Please check ${DOVECOT_CONFIGURE} file.\n";
		do_exit 1;
	fi
	echo "Done Configuration.";

        while
        echo "Trying to make dovecot..."
        do
        {
        	if [ "${OS}" = "FreeBSD" ]; then
			gmake CPPFLAGS=-I/usr/kerberos/include -j ${CPU_CORES}
		else
			make CPPFLAGS=-I/usr/kerberos/include -j ${CPU_CORES}
		fi

		#make

                if [ $? -ne 0 ]
                then
                        if [ ${USER_INPUT} -eq 1 ]; then
                                printf "\n*** The make has failed, would you like to try to make again? (y,n): \n";
                                read yesno;
                                echo "";
                        else
                                if [ "${INPUT_VALUE}" = "d" ]; then
                                        yesno=n
                                else
                                        yesno=${INPUT_VALUE}
                                fi
                        fi

                        if [ "${yesno}" = "n" ]
                        then
                                do_exit 0;
                        fi
                else
                        break;
                fi
        }
        done
        echo "Make complete";

	echo "Installing ...";

	make install
	
	removeLockfile
	
	cd ${CWD}
	
	if [ ! -d /etc/dovecot ]; then
		mkdir -p /etc/dovecot
	fi
	
	CONF_VER=0
	INST_CONF=0
	if [ -e /etc/dovecot.conf ]; then
		CONF_VER=`cat /etc/dovecot.conf | head -n1 | awk '{print $3}'`
	else
		INST_CONF=1
	fi

        INST_VER=`echo "$DOVECOT_VER" | cut -d. -f1`
        
        if [ "$INST_VER" = "2" ] && [ ! -e /etc/dovecot/dovecot.conf ]; then
        	INST_CONF=1
        fi
        
        if [ "$INST_VER" = "2" ] && [ "$CONF_VER" != "2.0" ]; then
        	INST_CONF=1
        fi

        if [ "$INST_VER" = "1" ] && [ "$CONF_VER" = "2.0" ]; then
        	INST_CONF=1
        fi

        if [ ! -L /etc/dovecot.conf ]; then
		mv -f /etc/dovecot.conf /etc/dovecot.conf.old
		ln -s /etc/dovecot/dovecot.conf /etc/dovecot.conf
	fi
			
	#install the dovecot.conf        
	if [ "$INST_CONF" -eq 1 ]; then
		if [ "$INST_VER" = "2" ]; then
			getFile dovecot.conf.2.0
			mv -f ${CWD}/dovecot.conf.2.0 /etc/dovecot/dovecot.conf
			if [ ! -L /etc/dovecot.conf ]; then
				mv -f /etc/dovecot.conf /etc/dovecot.conf.1.2
				ln -s /etc/dovecot/dovecot.conf /etc/dovecot.conf
			fi
		else
			getFile dovecot.conf
			mv -f ${CWD}/dovecot.conf /etc/dovecot.conf	
		fi
	fi
	
	if [ "${OS}" = "FreeBSD" ]; then
		DC=/etc/dovecot.conf
		if [ -L /etc/dovecot.conf ]; then
			DC=/etc/dovecot/dovecot.conf
		fi

		perl -pi -e 's/driver = shadow/driver = passwd/' ${DC}
		perl -pi -e 's/passdb shadow/passdb passwd/' ${DC}
	fi
	
	if [ "${PIGEONHOLE_OPT}" = "yes" ]; then
		doPigeonhole;
		perl -pi -e 's#transport = virtual_localdelivery#transport = dovecot_lmtp_udp#' /etc/exim.conf
	else
		COUNT="`grep -c dovecot_lmtp_udp /etc/exim.conf`"
		if [ "${COUNT}" -gt 0 ]; then
			perl -pi -e 's#transport = dovecot_lmtp_udp#transport = virtual_localdelivery#' /etc/exim.conf
			echo "Restarting exim"
			control_service exim restart
		fi
	fi

	if [ "${IPV6}" = "1" ]; then
		perl -pi -e 's|^listen = \*$|#listen = \*|' /etc/dovecot.conf
		perl -pi -e 's|^#listen = \*, ::$|listen = \*, ::|' /etc/dovecot.conf
	else
		perl -pi -e 's|^#listen = \*$|listen = \*|' /etc/dovecot.conf
		perl -pi -e 's|^listen = \*, ::$|#listen = \*, ::|' /etc/dovecot.conf
	fi
	
	#install the boot scripts.

	if [ "${SYSTEMD}" = "yes" ]; then
		if [ -e ${INITDDIR}/dovecot ]; then
			echo "Removing ${INITDDIR}/dovecot..."
			rm -f ${INITDDIR}/dovecot
		fi
		
		# Dovecot's "make install" overwrites these scripts, so we need to re-enable them everytime
		#echo "Enabling dovecot.socket in systemd..."
		if [ -e ${SYSTEMDDIR}/dovecot.socket ]; then
			echo "Disabling dovecot.socket in systemd..."
			systemctl disable dovecot.socket 2> /dev/null
			rm -f ${SYSTEMDDIR}/dovecot.socket
			systemctl daemon-reload
#		else
#			cp -f ${CB_SYSTEMD}/dovecot.socket ${SYSTEMDDIR}/dovecot.socket
		fi
#		chmod 644 ${SYSTEMDDIR}/dovecot.socket
#		systemctl daemon-reload
#		systemctl enable dovecot.socket
		
		# Dovecot's "make install" overwrites these scripts, so we need to re-enable them everytime
		echo "Enabling dovecot in systemd..."
		if [ -e ${CB_CUST_SYSTEMD}/dovecot.service ]; then
			cp -f ${CB_CUST_SYSTEMD}/dovecot.service ${SYSTEMDDIR}/dovecot.service
		else
			cp -f ${CB_SYSTEMD}/dovecot.service ${SYSTEMDDIR}/dovecot.service
		fi
		chmod 644 ${SYSTEMDDIR}/dovecot.service
		systemctl daemon-reload
		systemctl enable dovecot.service
		
		if [ ! -e /etc/exim.cert ] && [ ! -e /etc/exim.key ]; then
			getFile da_exim-cert-config
			/usr/bin/openssl req -x509 -newkey rsa:2048 -keyout /etc/exim.key -out /etc/exim.cert -days 9999 -nodes -config ${WORKDIR}/da_exim-cert-config
		fi
		chmod 600 /etc/exim.cert /etc/exim.key
		chown mail:mail /etc/exim.cert /etc/exim.key
		if [ ! -d ${SYSTEMD_SCRIPTS}/dovecot ]; then
			mkdir -p ${SYSTEMD_SCRIPTS}/dovecot
		fi
		if [ ! -e ${SYSTEMD_SCRIPTS}/dovecot/dovecot_prestartscript ]; then
			if [ -e ${CB_CUST_SYSTEMD}/scripts/dovecot_prestartscript ]; then
				cp -f ${CB_CUST_SYSTEMD}/scripts/dovecot_prestartscript ${SYSTEMD_SCRIPTS}/dovecot/prestartscript
			else
				cp -f ${CB_SYSTEMD}/scripts/dovecot_prestartscript ${SYSTEMD_SCRIPTS}/dovecot/prestartscript
			fi
			chmod 755 ${SYSTEMD_SCRIPTS}/dovecot/prestartscript
		fi
	else
		if [ "${OS}" = "FreeBSD" ]; then
			if [ ! -e /usr/local/etc/rc.d/dovecot ]; then
				cp ${CWD}/dovecot.boot.freebsd /usr/local/etc/rc.d/dovecot
				chmod 755 /usr/local/etc/rc.d/dovecot
				echo "./dovecot \$1" >> /usr/local/etc/rc.d/boot.sh
			fi
		elif [ -e /etc/debian_version ]; then
			if [ ! -e /etc/init.d/dovecot ]; then
				cp ${CWD}/dovecot.boot.debian /etc/init.d/dovecot
				chmod 755 /etc/init.d/dovecot
				update-rc.d dovecot defaults
			fi
			if [ ! -e /etc/exim.cert ] && [ ! -e /etc/exim.key ]; then
				getFile da_exim-cert-config
				/usr/bin/openssl req -x509 -newkey rsa:2048 -keyout /etc/exim.key -out /etc/exim.cert -days 9999 -nodes -config ${WORKDIR}/da_exim-cert-config
				#ln -sf /etc/httpd/conf/ssl.crt/server.crt /etc/exim.cert
				#ln -sf /etc/httpd/conf/ssl.key/server.key /etc/exim.key
			fi
			chmod 600 /etc/exim.cert /etc/exim.key
			chown mail:mail /etc/exim.cert /etc/exim.key
		else
			if [ ! -e /etc/init.d/dovecot ]; then
				cp ${CWD}/dovecot.boot /etc/init.d/dovecot
				chmod 755 /etc/init.d/dovecot
				/sbin/chkconfig dovecot on
			fi
		fi
	fi

	#perl -pi -e 's/mail_extra_groups/mail_access_groups/' /etc/dovecot.conf

	#dovecot 1.1+
	#perl -pi -e 's|default_mail_env|mail_location|' /etc/dovecot.conf
	#perl -pi -e 's|args = /etc/virtual/%d/passwd|args = username_format=%n /etc/virtual/%d/passwd|' /etc/dovecot.conf

	#dovecot 1.2.0+
	#perl -pi -e 's/^umask/#umask/' /etc/dovecot.conf

	cagefsctl_update;
	
	echo "Restarting dovecot."
	if [ "${SYSTEMD}" = "yes" ]; then
		systemctl daemon-reload
	fi
	control_service dovecot restart
}

####################################################

doLibs()
{
	downloadMake Digest
	downloadMake Digest-SHA1
	downloadMake HTML-Parser
	downloadMake Storable
	downloadMake Net-DNS
	downloadMake Net-IP
	downloadMake Net-CIDR
	downloadMake DB_File
	downloadMake Mail-SPF
	downloadMake Sys-Hostname-Long
	downloadMake Net-SSLeay
	downloadMake IO-Socket-SSL
	downloadMake URI
}

dospamassassin() {
	if [ "${SPAMASSASSIN_OPT}" = "no" ]; then
		do_exit 1 "SpamAssassin is not set in options.conf."
	fi

	getFile Mail-SpamAssassin-${SPAMASSASSIN_VER}.tar.gz spamassassin
	${WGET} ${WGET_CONNECT_OPTIONS} -O /etc/exim.spamassassin.conf http://${DOWNLOADSERVER_OPT}/services/exim.spamassassin.conf
	
	quitIfLocked dospamassassin
	
	if [ ! -e ${WORKDIR}/Mail-SpamAssassin-${SPAMASSASSIN_VER}.tar.gz ]; then
		do_exit 1 "File Mail-SpamAssassin-${SPAMASSASSIN_VER}.tar.gz does not exist. Try running ${boldon}./build update.${boldoff}"
	fi

	echo "Installing spamassassin ${SPAMASSASSIN_VER}...";

	cd ${CWD};
	
	#doLibs;

	FILE=${CWD}/Mail-SpamAssassin-${SPAMASSASSIN_VER}.tar.gz
	checkFile ${FILE}
 	echo "Extracting ...";
	tar xzf ${FILE} --no-same-owner
	echo "Done.";
	cd Mail-SpamAssassin-${SPAMASSASSIN_VER}

	echo "Configuring SpamAssassin ${SPAMASSASSIN_VER}...";

	export LANG=C
	perl Makefile.PL PREFIX=/usr CONTACT_ADDRESS="the administrator of that system" RUN_NET_TESTS="no"
	
	if [ $? -ne 0 ]
	then
		printf "\n*** There was an error while trying to configure SpamAssassin.\n";
		do_exit 1;
	fi
	
	echo "Done Configuration.";

        while
        echo "Trying to make SpamAssassin..."
        do
        {
		make

                if [ $? -ne 0 ]
                then                
			echo "";
			echo "If needed, use cpan to install the missing modules, eg:";
			echo "  cpan -i Archive::Tar Digest::SHA Mail::SPF IP::Country Net::Ident IO::Socket::INET6 Compress::Zlib Mail::DKIM LWP::UserAgent HTTP::Date Encode::Detect ExtUtils::MakeMaker";
			echo "";
			echo "Press enter to answer [yes] if it asks you to install dependencies (it will prepend them to the queue)";
			echo "Answer no if it asks: Are you ready for manual configuration? [yes] no";
			echo "";
                
                        if [ ${USER_INPUT} -eq 1 ]; then
                                printf "\n*** The make has failed, would you like to try to make again? (y,n): \n";
                                read yesno;
                                echo "";
                        else
                                if [ "${INPUT_VALUE}" = "d" ]; then
                                        yesno=n
                                else
                                        yesno=${INPUT_VALUE}
                                fi
                        fi

                        if [ "${yesno}" = "n" ]
                        then
                                do_exit 0;
                        fi
                else
                        break;
                fi
        }
        done
        echo "Make complete";

	echo "Installing ...";

	#It's not able to overwrite spamd binary sometimes, if process is still running
	killall spamd >/dev/null 2>&1
	killall -9 spamd >/dev/null 2>&1
	
	make install
	
	if [ "${SYSTEMD}" = "yes" ]; then
		if [ -e ${INITDDIR}/spamassassin ]; then
			echo "Removing ${INITDDIR}/spamassassin..."
			rm -f ${INITDDIR}/spamassassin
		fi
		echo "Enabling spamassassin in systemd..."
		if [ -e ${CB_CUST_SYSTEMD}/spamassassin.service ]; then
			cp -f ${CB_CUST_SYSTEMD}/spamassassin.service ${SYSTEMDDIR}/spamassassin.service
		else
			cp -f ${CB_SYSTEMD}/spamassassin.service ${SYSTEMDDIR}/spamassassin.service
		fi
		chmod 644 ${SYSTEMDDIR}/spamassassin.service
		systemctl daemon-reload
		systemctl enable spamassassin.service
	fi
	removeLockfile
	cd ${CWD}

	## we need to change how it's started.
	if [ -e ${INITDDIR}/exim ]; then
		perl -pi -e 's#/usr/bin/spamd -d -a -c -m 5#/usr/bin/spamd -d -c -m 15#' ${INITDDIR}/exim
	fi

#	if [ ! -e /etc/exim.spamassassin.conf ]; then
#		cp -f exim.spamassassin.conf /etc/exim.spamassassin.conf
#	fi
	
	perl -pi -e 's|#.include_if_exists /etc/exim.spamassassin.conf|.include_if_exists /etc/exim.spamassassin.conf|' /etc/exim.conf
	
	echo "Running sa-update."
	if [ -e /usr/bin/sa-update ]; then
		/usr/bin/sa-update --nogpg
	else
		echo "Cannot find /usr/bin/sa-update after install. Check for errors above.";
	fi

	cagefsctl_update;
	
	echo "Starting SpamAssassin."
	if [ "${SYSTEMD}" = "yes" ]; then
		systemctl restart spamassassin.service
	else
		/usr/bin/spamd -d -c -m 15
	fi

	echo "Restarting exim."
	control_service exim restart
	
	ldconfig
}

####################################################

create_symlinks_for_binaries(){
	if [ -e $1 ] && [ -e $2 ] && [ ! -h $2 ]; then
			echo "Symlinking $1 to $2..."
			mv -f $2 $2_backup
			ln -sf $1 $2
	fi
}
                                 
doclamav() {
	if [ "${CLAMAV_OPT}" = "no" ]; then
		do_exit 1 "ClamAV is not set in options.conf."
	fi

	getFile clamav-${CLAMAV_VER}.tar.gz clamav
	getFile clamd
	getFile clamd_freebsd
	getFile clamd_debian
	getFile freshclam
	getFile freshclam_freebsd
	getFile freshclam_debian
	
	if [ "${CLAMAV_EXIM_OPT}" = "yes" ]; then
		${WGET} ${WGET_CONNECT_OPTIONS} -O /etc/exim.clamav.load.conf http://${DOWNLOADSERVER_OPT}/services/exim.clamav.load.conf
		${WGET} ${WGET_CONNECT_OPTIONS} -O /etc/exim.clamav.conf http://${DOWNLOADSERVER_OPT}/services/exim.clamav.conf
	fi
	
	quitIfLocked doclamav

	if [ ! -e ${WORKDIR}/clamav-${CLAMAV_VER}.tar.gz ]; then
		do_exit 1 "File clamav-${CLAMAV_VER}.tar.gz does not exist. Try running ${boldon}./build update.${boldoff}"
	fi

	echo "Installing clamav ${CLAMAV_VER} ...";
	
	CLAMD_CONF=1
	if [ ! -e /etc/clamd.conf ]; then
		CLAMD_CONF=0
	fi
	
	FRESHCLAM_CONF=1
	if [ ! -e /etc/freshclam.conf ]; then
		FRESHCLAM_CONF=0
	fi
	
	addUserGroup clamav clamav
	mkdir -p /var/run/clamd
	chown -R clamav.clamav /var/run/clamd
	chmod 700 /var/run/clamd
	
	cd ${CWD};
	FILE=${CWD}/clamav-${CLAMAV_VER}.tar.gz
	checkFile ${FILE}
	echo "Extracting ...";
	tar xzf ${FILE} --no-same-owner
	echo "Done.";
	cd clamav-${CLAMAV_VER}

	if [ "${SYSTEMD}" = "yes" ]; then
		echo "Patching to support systemd"
		if [ -e ../configure/systemd/dependencies/clamd_nofork.patch ]; then
			patch -p1 < ../configure/systemd/dependencies/clamd_nofork.patch
		fi
	fi
	
	echo "Configuring clamav ${CLAMAV_VER} ...";

	${CWD}/${CLAMAV_CONFIGURE}
	if [ $? -ne 0 ]
	then
		printf "\n*** There was an error while trying to configure clamav.\n";
		do_exit 1;
	fi
	echo "Done Configuration.";

        while
        echo "Trying to make clamav..."
        do
        {
		make CPPFLAGS=-I/usr/kerberos/include -j ${CPU_CORES}

		#make

                if [ $? -ne 0 ]
                then
                        if [ ${USER_INPUT} -eq 1 ]; then
                                printf "\n*** The make has failed, do you want to try to make again? (y,n): \n";
                                read yesno;
                                echo "";
                        else
                                if [ "${INPUT_VALUE}" = "d" ]; then
                                        yesno=n
                                else
                                        yesno=${INPUT_VALUE}
                                fi
                        fi

                        if [ "${yesno}" = "n" ]
                        then
                                do_exit 0;
                        fi
                else
                        break;
                fi
        }
        done
        echo "Make complete";

	echo "Installing ...";

	make install
	removeLockfile
	ldconfig
	cd ${CWD}
	if [ ${CLAMD_CONF} -eq 0 ]; then

		if [ ! -s /etc/clamd.conf ] && [ -s /etc/clamd.conf.sample ]; then
			cp -f /etc/clamd.conf.sample /etc/clamd.conf
		fi

		perl -pi -e 's|Example|#Example|' /etc/clamd.conf
		perl -pi -e 's|#PidFile /var/run/clamd.pid|PidFile /var/run/clamd/clamd.pid|' /etc/clamd.conf
		perl -pi -e 's|#TCPSocket 3310|TCPSocket 3310|' /etc/clamd.conf
		perl -pi -e 's|#TCPAddr 127.0.0.1|TCPAddr 127.0.0.1|' /etc/clamd.conf
		perl -pi -e 's|#LocalSocket /tmp/clamd.socket|LocalSocket /tmp/clamd.socket|' /etc/clamd.conf
	fi
	if [ ${FRESHCLAM_CONF} -eq 0 ]; then

		if [ ! -s /etc/freshclam.conf ] && [ -s /etc/freshclam.conf.sample ]; then
			cp -f /etc/freshclam.conf.sample /etc/freshclam.conf
		fi

		perl -pi -e 's|Example|#Example|' /etc/freshclam.conf
		perl -pi -e 's|#LogSyslog yes|LogSyslog yes|' /etc/freshclam.conf
		perl -pi -e 's|#PidFile /var/run/freshclam.pid|PidFile /var/run/clamd/freshclam.pid|' /etc/freshclam.conf
		perl -pi -e 's|#Checks 24|#Checks 24|' /etc/freshclam.conf
		perl -pi -e 's|#NotifyClamd /path/to/clamd.conf|#NotifyClamd /etc/clamd.conf|' /etc/freshclam.conf
	fi

#Commented out for ClamAV
#	if [ ! -e /etc/exim.clamav.load.conf ]; then
#		cp -f exim.clamav.load.conf /etc/exim.clamav.load.conf
#	fi
#	if [ ! -e /etc/exim.clamav.conf ]; then
#		cp -f exim.clamav.conf /etc/exim.clamav.conf
#	fi
	if [ "${CLAMAV_EXIM_OPT}" = "yes" ]; then
		perl -pi -e 's|#.include_if_exists /etc/exim.clamav.load.conf|.include_if_exists /etc/exim.clamav.load.conf|' /etc/exim.conf
		perl -pi -e 's|#.include_if_exists /etc/exim.clamav.conf|.include_if_exists /etc/exim.clamav.conf|' /etc/exim.conf
	fi
	
	if [ "${SYSTEMD}" = "yes" ]; then
		if [ -e ${INITDDIR}/clamd ]; then
			echo "Removing ${INITDDIR}/clamd..."
			rm -f ${INITDDIR}/clamd
		fi
		if [ -e ${INITDDIR}/freshclam ]; then
			echo "Removing ${INITDDIR}/freshclam..."
			rm -f ${INITDDIR}/freshclam
		fi
		echo "Enabling clamd in systemd..."
		if [ -e ${CB_CUST_SYSTEMD}/clamd.service ]; then
			cp -f ${CB_CUST_SYSTEMD}/clamd.service ${SYSTEMDDIR}/clamd.service
		else
			cp -f ${CB_SYSTEMD}/clamd.service ${SYSTEMDDIR}/clamd.service
		fi
		chmod 644 ${SYSTEMDDIR}/clamd.service
		systemctl daemon-reload
		systemctl enable clamd.service

		echo "Enabling freshclam in systemd..."
		if [ -e ${CB_CUST_SYSTEMD}/freshclam.service ]; then
			cp -f ${CB_CUST_SYSTEMD}/freshclam.service ${SYSTEMDDIR}/freshclam.service
		else
			cp -f ${CB_SYSTEMD}/freshclam.service ${SYSTEMDDIR}/freshclam.service
		fi
		chmod 644 ${SYSTEMDDIR}/freshclam.service
		systemctl daemon-reload
		systemctl enable freshclam.service
	else
		#install the boot scripts.
		if [ ! -e ${INITDDIR}/clamd ]; then
			if [ "${OS}" = "FreeBSD" ]; then
				cp ${CWD}/clamd_freebsd ${INITDDIR}/clamd
				chmod 755 ${INITDDIR}/clamd
			elif [ -e /etc/debian_version ]; then
				cp ${CWD}/clamd_debian ${INITDDIR}/clamd
				chmod 755 ${INITDDIR}/clamd
				update-rc.d clamd defaults
			else
				cp ${CWD}/clamd ${INITDDIR}/clamd
				chmod 755 ${INITDDIR}/clamd
				/sbin/chkconfig clamd on
			fi
		fi
		
		if [ ! -e ${INITDDIR}/freshclam ]; then
			if [ "${OS}" = "FreeBSD" ]; then
				cp ${CWD}/freshclam_freebsd ${INITDDIR}/freshclam
				chmod 755 ${INITDDIR}/freshclam
			elif [ -e /etc/debian_version ]; then
				cp ${CWD}/freshclam_debian ${INITDDIR}/freshclam
				chmod 755 ${INITDDIR}/freshclam
				update-rc.d freshclam defaults
			else
				cp ${CWD}/freshclam ${INITDDIR}/freshclam
				chmod 755 ${INITDDIR}/freshclam
				/sbin/chkconfig freshclam on
			fi
		fi
		
		perl -pi -e 's#/usr/sbin/clamd#/usr/local/sbin/clamd#' ${INITDDIR}/clamd
		perl -pi -e 's#/usr/bin/freshclam#/usr/local/bin/freshclam#' ${INITDDIR}/freshclam
	fi
	
	if [ "${OS}" != "FreeBSD" ]; then
		if [ ! -d /var/run/clamd ]; then
			mkdir /var/run/clamd
		fi
	fi

	#Ensure ClamAV Database
	USC=/usr/local/share/clamav
	if [ ! -d $USC ]; then
		mkdir -p $USC
		chown clamav:clamav $USC
	fi

	if [ ! -s $USC/daily.cld ]; then
		/usr/local/bin/freshclam -v
	fi

	#Symlink /usr/bin binaries to /usr/local/bin
	create_symlinks_for_binaries /usr/local/bin/clamav-config /usr/bin/clamav-config;
	create_symlinks_for_binaries /usr/local/bin/clambc /usr/bin/clambc;
	create_symlinks_for_binaries /usr/local/bin/clamconf /usr/bin/clamconf;
	create_symlinks_for_binaries /usr/local/bin/clamdscan /usr/bin/clamdscan;
	create_symlinks_for_binaries /usr/local/bin/clamscan /usr/bin/clamscan;
	create_symlinks_for_binaries /usr/local/bin/freshclam /usr/bin/freshclam;
	create_symlinks_for_binaries /usr/local/sbin/clamd /usr/sbin/clamd;
               
	set_service clamd ON
	set_service freshclam ON
	
	cagefsctl_update;
	
	echo "Restarting freshclam."
	control_service freshclam restart
	
	echo "Restarting clamd."
	control_service clamd restart
	
	if [ "${CLAMAV_EXIM_OPT}" = "yes" ]; then
		echo "Restarting exim."
		control_service exim restart
	fi
	
	echo "Done ClamAV.";
	
}

####################################################
# Mailman is not yet supported
#domailman() {
#	if [ "${MAILMAN_OPT}" = "no" ]; then
#		do_exit 1 "Mailman is not set in options.conf."
#	fi
#
#	getFile mailman-${MAILMAN_VER}.tgz mailman
#	getFile mailman
#	getFile mailman_freebsd
#	getFile mailman_debian
#
#	quitIfLocked mailman
#	touch ${WORKDIR}/.custombuild
#
#	if [ ! -s ${WORKDIR}/mailman-${MAILMAN_VER}.tgz ]; then
#		do_exit 1 "File mailman-${MAILMAN_VER}.tgz does not exist. Try running ${boldon}./build update.${boldoff}"
#	fi
#
#	echo "Installing mailman ${MAILMAN_VER} ...";
#	
#	MM_CFG=1
#	if [ ! -e /usr/local/mailman/Mailman/mm_cfg.py ]; then
#		MM_CFG=0
#	fi
#	
#	#Mailman requirements
#	addUserGroup mailman mailman
#	mkdir -p /usr/local/mailman
#	chown mailman:mailman /usr/local/mailman
#	chmod 02775 /usr/local/mailman
#	
#    cd ${CWD};
#    FILE=${CWD}/mailman-${MAILMAN_VER}.tgz
#    checkFile ${FILE}
#    echo "Extracting ...";
#    tar xzf ${FILE} --no-same-owner
#    echo "Done.";
#    cd mailman-${MAILMAN_VER}
#
#	echo "Configuring Mailman ${MAILMAN_VER} ...";
#
#	./configure --with-cgi-gid=apache
#	if [ $? -ne 0 ]
#	then
#		echo -e "\n*** There was an error while trying to configure mailman.\n";
#		do_exit 1;
#	fi
#	echo "Done Configuration.";
#
#        while
#        echo "Trying to make mailman..."
#        do
#        {
#		make CPPFLAGS=-I/usr/kerberos/include -j ${CPU_CORES}
#
#		#make
#
#                if [ $? -ne 0 ]
#                then
#                        if [ ${USER_INPUT} -eq 1 ]; then
#                                echo -e "\n*** The make has failed, do you want to try to make again? (y,n): ";
#                                read yesno;
#                                echo "";
#                        else
#                                if [ "${INPUT_VALUE}" = "d" ]; then
#                                        yesno=n
#                                else
#                                        yesno=${INPUT_VALUE}
#                                fi
#                        fi
#
#                        if [ "${yesno}" = "n" ]
#                        then
#                                do_exit 0;
#                        fi
#                else
#                        break;
#                fi
#        }
#        done
#        echo "Make complete";
#
#	echo "Installing ...";
#
#	make install
#	removeLockfile
#	ldconfig
#	cd ${CWD}
#
#	#install the boot scripts.
#	if [ ! -e ${INITDDIR}/mailmanctl ]; then
#		if [ "${OS}" = "FreeBSD" ]; then
#			cp ${CWD}/mailmanctl_freebsd ${INITDDIR}/mailmanctl
#			chmod 755 ${INITDDIR}/mailmanctl
#		elif [ -e /etc/debian_version ]; then
#			cp ${CWD}/mailmanctl_debian ${INITDDIR}/mailmanctl
#			chmod 755 ${INITDDIR}/mailmanctl
#			update-rc.d mailmanctl defaults
#		else
#			cp ${CWD}/mailmanctl ${INITDDIR}/mailmanctl
#			chmod 755 ${INITDDIR}/mailmanctl
#			/sbin/chkconfig mailmanctl on
#		fi
#	fi
#
#	# It's up to you how to use the file (DA should manage it)
#	#	if [ ${MM_CFG} -eq 0 ]; then
#	#    echo 'DEFAULT_EMAIL_HOST = \'mail.domain.com\'' >> ${MM_CFG}
#	#    echo 'DEFAULT_URL_HOST = \'www.domain.com\'' >> ${MM_CFG}
#	#    echo 'IMAGE_LOGOS = \'/mailman_images/\'' >> ${MM_CFG}
#	#    echo 'add_virtualhost(DEFAULT_URL_HOST, DEFAULT_EMAIL_HOST)' >> ${MM_CFG}
#	#    echo 'VIRTUAL_HOSTS = {\'www.example.com\': \'example.com\',' >> ${MM_CFG}
#	#    echo '                 \'www.example2.com\': \'example2.com\'}' >> ${MM_CFG}
#	#	echo '#Syntax is {virt ":" real "," virt ":" real}' >> ${MM_CFG}
#	#	fi
#
#	#Changes for suexec (fixing "error: directory is writable by others")
#	chmod 755 /usr/local/mailman/cgi-bin
#	chmod u-s,g-s /usr/local/mailman/cgi-bin/*
#	chmod 777 /usr/local/mailman/logs
#	chown -R mailman:mailman /usr/local/mailman
#
#	RANDOM_PASS="`perl -le'print map+(A..Z,a..z,0..9)[rand 62],0..7'`";
#	DA_HOSTNAME=`hostname`
#	
#	#Create a mailman list
#	/usr/local/mailman/bin/newlist -q -e ${DA_HOSTNAME} mailman mailman@${DA_HOSTNAME} ${RANDOM_PASS}
#	echo "Password of the mailman mailing list: ${RANDOM_PASS}"
#	#Apply template to the sitelist
#	/usr/local/mailman/bin/config_list -i /usr/local/mailman/data/sitelist.cfg mailman
#	
#	#Add mailman mailing list to /etc/aliases (required by mailman)
#	COUNT_MAILMAN=`grep -c mailman /etc/aliases`
#	if [ ${COUNT_MAILMAN} -eq 0 ]; then
#		echo '## mailman mailing list' >> /etc/aliases
#		echo 'mailman:              "|/usr/local/mailman/mail/mailman post mailman"' >> /etc/aliases
#		echo 'mailman-admin:        "|/usr/local/mailman/mail/mailman admin mailman"' >> /etc/aliases
#		echo 'mailman-bounces:      "|/usr/local/mailman/mail/mailman bounces mailman"' >> /etc/aliases
#		echo 'mailman-confirm:      "|/usr/local/mailman/mail/mailman confirm mailman"' >> /etc/aliases
#		echo 'mailman-join:         "|/usr/local/mailman/mail/mailman join mailman"' >> /etc/aliases
#		echo 'mailman-leave:        "|/usr/local/mailman/mail/mailman leave mailman"' >> /etc/aliases
#		echo 'mailman-owner:        "|/usr/local/mailman/mail/mailman owner mailman"' >> /etc/aliases
#		echo 'mailman-request:      "|/usr/local/mailman/mail/mailman request mailman"' >> /etc/aliases
#		echo 'mailman-subscribe:    "|/usr/local/mailman/mail/mailman subscribe mailman"' >> /etc/aliases
#		echo 'mailman-unsubscribe:  "|/usr/local/mailman/mail/mailman unsubscribe mailman"' >> /etc/aliases
#	fi
#
## Needs an exception in DA binary to function, because the process is python, which is calling mailmanctl	
##	set_service mailmanctl ON
#	
#	echo "Restarting Exim."
#	${INITDDIR}/exim restart
#	
#	echo "Restarting Mailman."
#	${INITDDIR}/mailman restart
#
#	echo "Done Mailman.";
#	
#}

####################################################

doPhp(){
	if [ ! -e /usr/local/lib/libxml2.so ] && [ ! -e /usr/lib/libxslt.so ]; then
		doLibxml2;
	fi

	if [ ! -e /usr/local/lib/libxslt.so ] && [ ! -e /usr/lib/libxslt.so ]; then
		doLibxslt;
	fi
		
	if [ "${WEBSERVER_OPT}" = "apache" ] || [ "${WEBSERVER_OPT}" = "litespeed" ] || [ "${WEBSERVER_OPT}" = "nginx_apache" ]; then
		if [ ! -d /etc/httpd/conf/extra ]; then
			checkLibz;
			doApache2;
		fi
	fi
	if [ "${WEBSERVER_OPT}" = "nginx" ] || [ "${WEBSERVER_OPT}" = "nginx_apache" ]; then
		if [ ! -d ${NGINXCONF} ]; then
			checkLibz;
			doNginx;
		fi
	fi
	
	if [ "${HAVE_SUPHP_CGI}" = "yes" ]; then
		if [ ! -s ${SUPHP_SO} ]; then
			doSuPhp;
		fi
	fi
		
	#just double check the location of libmysqlclient.so
	if [ -e /usr/lib64 ]; then
		if [ ! -e /usr/lib64/mysql/libmysqlclient.so ] && [ -e /usr/lib64/libmysqlclient.so ]; then
			ln -s ../libmysqlclient.so /usr/lib64/mysql/libmysqlclient.so
		fi
	fi	

        #if [ -e /etc/fedora-release ]; then
        if [ -e /usr/lib/libmysqlclient.so ] && [ ! -e /usr/lib/mysql/libmysqlclient.so ]; then
                ln -s /usr/lib/libmysqlclient.so /usr/lib/mysql/libmysqlclient.so
        fi
        #fi
	
	if [ "${WEBSERVER_OPT}" = "apache" ] || [ "${WEBSERVER_OPT}" = "litespeed" ] || [ "${WEBSERVER_OPT}" = "nginx_apache" ]; then
		doApacheCheck;
	fi
	
	if [ "${OS}" = "FreeBSD" ]; then
		if [ ${MAINVER} -ge 10 ]; then
			if [ ! -e /usr/local/lib/libicui18n.so ]; then
				removeLockfile;
				doICU;
			fi
		else
			if [ ! -d /usr/local/icu/lib ]; then
				removeLockfile;
				doICU;
			fi
		fi
	else
		if [ ! -d /usr/local/icu/lib ]; then
			removeLockfile;
			doICU;
		fi
	fi
	
	PHPMODULES=${HTTPDCONF}/extra/httpd-phpmodules.conf
	if [ "${HAVE_CLI}" = "yes" ] && [ -e ${PHPMODULES} ]; then
		if [ "${WEBSERVER_OPT}" = "apache" ] || [ "${WEBSERVER_OPT}" = "nginx_apache" ]; then
			COUNT=`grep -m1 -c 'LoadModule mpm_event_module /usr/lib/apache/mod_mpm_event.so' ${PHPMODULES}`
			if [ "${COUNT}" -gt 0 ]; then
				echo "Switching Apache Event MPM to Prefork, because of mod_php used..."
				perl -pi -e 's#LoadModule mpm_event_module /usr/lib/apache/mod_mpm_event.so#LoadModule mpm_prefork_module /usr/lib/apache/mod_mpm_prefork.so#' ${PHPMODULES}
				control_service httpd restart
			fi
			COUNT=`grep -m1 -c 'LoadModule mpm_worker_module /usr/lib/apache/mod_mpm_worker.so' ${PHPMODULES}`
			if [ "${COUNT}" -gt 0 ]; then
				echo "Switching Apache Worker MPM to Prefork, because of mod_php used..."
				perl -pi -e 's#LoadModule mpm_worker_module /usr/lib/apache/mod_mpm_worker.so#LoadModule mpm_prefork_module /usr/lib/apache/mod_mpm_prefork.so#' ${PHPMODULES}
				control_service httpd restart
			fi
		fi
	fi
	
	doPhp_build ${PHP1_RELEASE_OPT} ${PHP1_MODE_OPT}
	if [ "${PHP2_RELEASE_OPT}" != "no" ]; then
		doPhp_build ${PHP2_RELEASE_OPT} ${PHP2_MODE_OPT}
	fi
	
	if [ "${WEBSERVER_OPT}" = "apache" ] || [ "${WEBSERVER_OPT}" = "litespeed" ] || [ "${WEBSERVER_OPT}" = "nginx_apache" ]; then
		echo -n "" > ${PHPMODULES}
		if [ -e ${PHPMODULES} ]; then
			COUNT="`grep -m1 -c 'systemd_module' ${PHPMODULES}`"
			if [ "${SYSTEMD}" = "yes" ] && [ -e /usr/lib/apache/mod_systemd.so ] && [ ${COUNT} -eq 0 ]; then
				perl -pi -e 's|^LoadModule systemd_module|#LoadModule systemd_module|' /etc/httpd/conf/httpd.conf
				echo "LoadModule	systemd_module		/usr/lib/apache/mod_systemd.so" >> ${PHPMODULES}
			fi
			COUNT="`grep -m1 -c 'suphp_module' ${PHPMODULES}`"
			if [ "${HAVE_SUPHP_CGI}" = "yes" ] && [ ${COUNT} -eq 0 ]; then
				perl -pi -e 's|^LoadModule suphp_module|#LoadModule suphp_module|' /etc/httpd/conf/httpd.conf
				echo "LoadModule	suphp_module		/usr/lib/apache/mod_suphp.so" >> ${PHPMODULES}
			fi
			COUNT="`grep -m1 -c 'ruid2_module' ${PHPMODULES}`"
			if [ "${MOD_RUID2_OPT}" = "yes" ] && [ ! -e /usr/lib/apache/mod_ruid2.so ] && [ "${WEBSERVER_OPT}" != "litespeed" ]; then
					doModRuid2;
			fi
			if [ "${MOD_RUID2_OPT}" = "yes" ] && [ ${COUNT} -eq 0 ] && [ "${WEBSERVER_OPT}" != "litespeed" ]; then
				perl -pi -e 's|^LoadModule ruid2_module|#LoadModule ruid2_module|' /etc/httpd/conf/httpd.conf
				echo "LoadModule	ruid2_module		/usr/lib/apache/mod_ruid2.so" >> ${PHPMODULES}
				echo "Mutex sem" >> ${PHPMODULES}
			fi
			
			if [ "${HAVE_CLI}" = "no" ] && [ "${PHP1_MODE_OPT}" != "lsphp" ]; then
				COUNT="`grep -m1 -c 'htscanner_module' ${PHPMODULES}`"
				if [ "${HTSCANNER_OPT}" = "yes" ] && [ ${COUNT} -eq 0 ]; then
					perl -pi -e 's|^LoadModule htscanner_module|#LoadModule htscanner_module|' /etc/httpd/conf/httpd.conf
					echo "LoadModule	htscanner_module		/usr/lib/apache/mod_htscanner2.so" >> ${PHPMODULES}
				fi
			elif [ "${HAVE_CLI}" = "yes" ]; then
				COUNT="`grep -m1 -c 'htscanner_module' ${PHPMODULES}`"
				if [ "${HTSCANNER_OPT}" = "yes" ] && [ ${COUNT} -gt 0 ]; then
					perl -pi -e 's|^LoadModule htscanner_module|#LoadModule htscanner_module|' /etc/httpd/conf/httpd.conf
					perl -pi -e 's|^LoadModule htscanner_module|^#LoadModule htscanner_module' ${PHPMODULES}
				fi
			fi
		fi
		COUNT="`grep -m1 -c '/usr/lib/apache/mod_mpm_' ${PHPMODULES}`"
		if [ ${COUNT} -eq 0 ]; then
			if [ "${APACHE_MPM_OPT}" = "auto" ]; then
				#Use event MPM for CGI (FPM) and prefork for cli (mod_php)
				if [ "${HAVE_CLI}" = "no" ]; then
					# Add to httpd-phpmodules.conf
					echo "LoadModule mpm_event_module /usr/lib/apache/mod_mpm_event.so" >> ${PHPMODULES}
				else
					# Add to httpd-phpmodules.conf
					echo "LoadModule mpm_prefork_module /usr/lib/apache/mod_mpm_prefork.so" >> ${PHPMODULES}
				fi
			elif [ "${APACHE_MPM_OPT}" = "event" ]; then
				echo "LoadModule mpm_event_module /usr/lib/apache/mod_mpm_event.so" >> ${PHPMODULES}
			elif [ "${APACHE_MPM_OPT}" = "worker" ]; then
				echo "LoadModule mpm_worker_module /usr/lib/apache/mod_mpm_worker.so" >> ${PHPMODULES}
			else
				echo "LoadModule mpm_prefork_module /usr/lib/apache/mod_mpm_prefork.so" >> ${PHPMODULES}
			fi
		fi
	fi
	
	if [ "${HAVE_CLI}" = "yes" ]; then
		# Change httpd.conf info
		perl -pi -e 's/^LoadModule php4/\#LoadModule php4/' /etc/httpd/conf/httpd.conf
		# Add to httpd-phpmodules.conf
		echo "LoadModule	php5_module		/usr/lib/apache/libphp5.so" >> ${PHPMODULES}
	fi
	
	if [ "${HAVE_FPM_CGI}" = "yes" ]; then	
		if [ ! -s /etc/logrotate.d/php-fpm ] && [ ${OS} != "FreeBSD" ]
		then
			${WGET} ${WGET_CONNECT_OPTIONS} ${WEBPATH}/php-fpm.logrotate -O /etc/logrotate.d/php-fpm
		fi
	fi
	
	if [ "${HAVE_FCGID}" = "yes" ]; then
		if [ -e ${PHPMODULES} ]; then
			if [ ! -s /usr/lib/apache/mod_fcgid.so ]; then
					doModFCGID;
			fi
			COUNT="`grep -m1 -c 'fcgid_module' ${PHPMODULES}`"
			if [ "${COUNT}" -eq 0 ]; then
				perl -pi -e 's|^LoadModule	mod_fcgid|#LoadModule	mod_fcgid|' /etc/httpd/conf/httpd.conf
				echo "LoadModule	fcgid_module		/usr/lib/apache/mod_fcgid.so" >> ${PHPMODULES}
			fi
			COUNT="`grep -m1 -c 'httpd-fcgid.conf' ${PHPMODULES}`"
			if [ ${COUNT} -eq 0 ]; then
				echo "Include /etc/httpd/conf/extra/httpd-fcgid.conf" >> ${PHPMODULES}
			fi
		fi
	fi
	
	if [ "${WEBSERVER_OPT}" = "apache" ] || [ "${WEBSERVER_OPT}" = "nginx_apache" ]; then
		if [ "${HAVE_FCGID}" = "yes" ] || [ "${HAVE_FPM_CGI}" = "yes" ] || [ "${HAVE_SUPHP_CGI}" = "yes" ]; then
			if [ "${HTSCANNER_OPT}" = "yes" ] && [ ! -e /usr/lib/apache/mod_htscanner2.so ]; then
				doModHtscanner;
			fi
		fi
		if [ "${NEWCONFIGS}" = "1" ]; then
			perl -pi -e 's/^LoadModule mod_php/\#LoadModule mod_php/' /etc/httpd/conf/httpd.conf
			perl -pi -e 's/^LoadModule php/\#LoadModule php/' /etc/httpd/conf/httpd.conf
		fi
	fi
	
	doPhpConf;
	
	fpmChecks;
		
	if [ "${WEBSERVER_OPT}" = "apache" ] || [ "${WEBSERVER_OPT}" = "litespeed" ] || [ "${WEBSERVER_OPT}" = "nginx_apache" ]; then
		echo "Rewriting all users httpd.conf files, please wait...";
		echo "action=rewrite&value=httpd" >> ${TASK_QUEUE}
	elif [ "${WEBSERVER_OPT}" = "nginx" ]; then
		echo "Rewriting all users nginx.conf files, please wait...";
		echo "action=rewrite&value=nginx" >> ${TASK_QUEUE}
	fi
	
	run_dataskq d

	cagefsctl_update;
	
	if [ "${PHP1_MODE_OPT}" = "php-fpm" ] || [ "${PHP1_MODE_OPT}" = "suphp" ] || [ "${PHP1_MODE_OPT}" = "fastcgi" ] || [ "${PHP1_MODE_OPT}" = "lsphp" ]; then
		ln -sf /usr/local/php${PHP1_SHORTRELEASE}/bin/php${PHP1_SHORTRELEASE} /usr/local/bin/php
		if [ "${PHP1_MODE_OPT}" = "php-fpm" ]; then
			echo "Restarting php-fpm${PHP1_SHORTRELEASE}."
			control_service php-fpm${PHP1_SHORTRELEASE} restart
		fi
	fi
	if [ "${PHP2_MODE_OPT}" = "php-fpm" ] && [ "${PHP2_RELEASE_OPT}" != "no" ]; then
		echo "Restarting php-fpm${PHP2_SHORTRELEASE}."
		control_service php-fpm${PHP2_SHORTRELEASE} restart
	fi

	if [ -s /usr/local/bin/php ] && [ ! -e /bin/php ]; then
		ln -s /usr/local/bin/php /bin/php
	fi
	
	if [ "${WEBSERVER_OPT}" = "apache" ] || [ "${WEBSERVER_OPT}" = "nginx_apache" ]; then
		echo "Restarting apache."
		control_service httpd restart
	fi
	if [ "${WEBSERVER_OPT}" = "nginx" ] || [ "${WEBSERVER_OPT}" = "nginx_apache" ]; then
		echo "Restarting nginx."
		control_service nginx restart
	fi
	if [ "${WEBSERVER_OPT}" = "litespeed" ]; then
		echo "Restarting litespeed."
		#Not yet ready for systemd
		${INITDDIR}/litespeed restart
	fi
}

####################################################

secure_php(){
	secure_phpini ${PHP_INI};
	for php_shortrelease in `echo ${PHP1_SHORTRELEASE_SET}`; do {
		EVAL_PHP_INI_VAR=PHP_INI_FPM${php_shortrelease}
		secure_phpini $(eval_var ${EVAL_PHP_INI_VAR});
	};
	done;
	echo "PHP has been secured."
	RESTART_APACHE="1"
	if [ "${PHP1_MODE_OPT}" = "php-fpm" ]; then
		echo "Restarting php-fpm${PHP1_SHORTRELEASE}."
		control_service php-fpm${PHP1_SHORTRELEASE} restart
		RESTART_APACHE="0"
	fi
	if [ "${PHP2_MODE_OPT}" = "php-fpm" ] && [ "${PHP2_RELEASE_OPT}" != "no" ]; then
		echo "Restarting php-fpm${PHP2_SHORTRELEASE}."
		control_service php-fpm${PHP2_SHORTRELEASE} restart
	fi
	if [ "${RESTART_APACHE}" = "1" ]; then
		control_service httpd restart
	fi
	
}

####################################################

doProftpd(){
	if [ "${FTPD_OPT}" != "proftpd" ]; then
		echo "You cannot install ProFTPD, because you do not have it set in options.conf file.";
		exit 1;
	fi

	getFile proftpd-${PROFTPD_VER}.tar.gz proftpd
	getFile proftpd proftpd_boot
	getFile proftpd_freebsd proftpd_boot_freebsd
	getFile proftpd_debian proftpd_boot_debian

	quitIfLocked doProftpd
	
	# Setting a new temp dir (in case /tmp is noexec,nosuid)
	if [ "${OS}" = "FreeBSD" ]; then
		TDIR=/root/.pkg.tmp
		mkdir -p $TDIR
		setenv PKG_TMPDIR $TDIR
	fi
	cd ${CWD};
	FILE=${CWD}/proftpd-${PROFTPD_VER}.tar.gz
	checkFile ${FILE};
	echo "Extracting ${FILE}...";

	tar xzf ${FILE} --no-same-owner
	chown -R root:${ROOT_GRP} proftpd-${PROFTPD_VER}
	cd proftpd-${PROFTPD_VER}

	# Backup ProFTPD config
	rm -f /etc/proftpd.conf.old
	cp /etc/proftpd.conf /etc/proftpd.conf.old

	#swap prefix for freebsd
	if [ "$OS" = "FreeBSD" ]; then
		perl -pi -e "s#prefix=/usr #prefix=$PROFTPD_PREFIX #" ${CWD}/${PROFTPD_CONFIGURE}

		if [ "${PROFTPD_CONFIGURE}" = "configure/proftpd/configure.proftpd" ]; then
			perl -pi -e 's/enable-nls/disable-nls/' ${CWD}/${PROFTPD_CONFIGURE}
		fi

	fi

	echo "Configuring proftpd-${PROFTPD_VER}...";
	${CWD}/${PROFTPD_CONFIGURE}

	echo "Done. Making proftpd-${PROFTPD_VER}...";
	while
	echo "Trying to make ProFTPD..."
	do
	{
                if [ "${OS}" = "FreeBSD" ]; then
                        /usr/local/bin/gmake -j ${CPU_CORES}
                else
			make -j ${CPU_CORES}
		fi

		if [ $? -ne 0 ]
		then
			if [ ${USER_INPUT} -eq 1 ]; then
				printf "\n*** The make has failed, would you like to try to make again? (y,n): \n";
				read yesno;
				echo "";
			 else
                                if [ "${INPUT_VALUE}" = "d" ]; then
					yesno=n
                                else
                                        yesno=${INPUT_VALUE}
                                fi
                         fi

			 if [ "${yesno}" = "n" ]
			 then
				do_exit 0;
			 fi
		else
			break;
		fi
	}
	done
	echo "Make complete";

	echo "Installing proftpd-${PROFTPD_VER}...";
	make install
	
	if [ "${SYSTEMD}" = "yes" ]; then
		if [ -e ${INITDDIR}/proftpd ]; then
			echo "Removing ${INITDDIR}/proftpd..."
			rm -f ${INITDDIR}/proftpd
		fi
		echo "Enabling proftpd in systemd..."
		if [ -e ${CB_CUST_SYSTEMD}/proftpd.service ]; then
			cp -f ${CB_CUST_SYSTEMD}/proftpd.service ${SYSTEMDDIR}/proftpd.service
		else
			cp -f ${CB_SYSTEMD}/proftpd.service ${SYSTEMDDIR}/proftpd.service
		fi
		chmod 644 ${SYSTEMDDIR}/proftpd.service
		systemctl daemon-reload

		if [ -e ${SYSTEMDDIR}/proftpd.service ]; then
			systemctl enable proftpd.service
			if [ -e ${SYSTEMDDIR}/pure-ftpd.service ]; then
				systemctl stop pure-ftpd.service
				systemctl disable pure-ftpd.service
				rm -f ${SYSTEMDDIR}/pure-ftpd.service
				systemctl daemon-reload
			fi
		fi
		mkdir -p /run/proftpd
	else
		if [ ! -e ${INITDDIR}/proftpd ]; then
			if [ "${OS}" = "FreeBSD" ]; then
				cp ${CWD}/proftpd_freebsd ${INITDDIR}/proftpd
				chmod 755 ${INITDDIR}/proftpd
			elif [ -e /etc/debian_version ]; then
				cp ${CWD}/proftpd_debian ${INITDDIR}/proftpd
				chmod 755 ${INITDDIR}/proftpd
			else
				mkdir -p /var/run/proftpd
				cp ${CWD}/proftpd ${INITDDIR}/proftpd
				chmod 755 ${INITDDIR}/proftpd
			fi
		fi
		
		if [ -e ${INITDDIR}/proftpd ]; then
			if [ "${OS}" = "FreeBSD" ]; then
				if [ -e ${INITDDIR}/pure-ftpd ]; then
					rm -f ${INITDDIR}/pure-ftpd
				fi
			elif [ -e /etc/debian_version ]; then
				update-rc.d proftpd defaults
				if [ -e ${INITDDIR}/pure-ftpd ]; then
					update-rc.d -f pure-ftpd remove
				fi
			else
				/sbin/chkconfig proftpd on
				if [ -e ${INITDDIR}/pure-ftpd ]; then
					/sbin/chkconfig pure-ftpd off
				fi
			fi	
		fi
	fi
	
	killall -9 pure-ftpd >/dev/null 2>&1
	
	echo "Done proftpd.";
	removeLockfile

	# Removing the temp dir
	if [ "${OS}" = "FreeBSD" ]; then
		rm -rf $TDIR
		unsetenv PKG_TMPDIR
	fi

	# Linking configs
	rm -f /usr/local/etc/proftpd.conf
	ln -sf /etc/proftpd.conf /usr/local/etc/proftpd.conf

	perl -pi -e 's/DisplayFirstChdir/DisplayChdir/' /etc/proftpd.conf

	#setup the directadmin.conf
	setVal pureftp 0 ${DACONF_TEMPLATE_FILE}
	setVal pureftp 0 ${DACONF_FILE}
	
	set_service pure-ftpd delete
	set_service proftpd ON
	
	killall pure-ftpd >/dev/null 2>&1
	
	if [ "${PROFTPD_UPLOADSCAN_OPT}" = "yes" ] && [ "${CLAMAV_OPT}" = "yes" ]; then
		if [ ! -e /usr/local/bin/clamdscan ]; then
			removeLockfile;
			doclamav;
		fi
		if [ ! -e /usr/local/bin/clamdscan ]; then
			do_exit 1 "Cannot enable upload scan in ProFTPd because there is no ClamAV (/usr/local/bin/clamdscan) on the system."
		fi
		echo "Enabling ProFTPd ClamAV module for upload scanning"
		getFile mod_clamav.c mod_clamav_c
		getFile mod_clamav.h mod_clamav_h
		COUNT=`grep -m1 -c '^Include /etc/proftpd.clamav.conf' /etc/proftpd.conf`
		if [ ${COUNT} -eq 0 ]; then
			perl -pi -e 's#</Global>#</Global>\n\nInclude /etc/proftpd.clamav.conf#' /etc/proftpd.conf
		fi
		/usr/bin/prxs -c -i -d mod_clamav.c
		echo -n '' > /etc/proftpd.clamav.conf
		echo '<IfModule mod_dso.c>' >> /etc/proftpd.clamav.conf
		echo 'LoadModule mod_clamav.c' >> /etc/proftpd.clamav.conf
		echo '</IfModule>' >> /etc/proftpd.clamav.conf
		echo '<IfModule mod_clamav.c>' >> /etc/proftpd.clamav.conf
		echo 'ClamAV on' >> /etc/proftpd.clamav.conf
		echo 'ClamServer 127.0.0.1' >> /etc/proftpd.clamav.conf
		echo 'ClamPort 3310' >> /etc/proftpd.clamav.conf
		echo 'ClamMaxSize 5 Mb' >> /etc/proftpd.clamav.conf
		echo '</IfModule>' >> /etc/proftpd.clamav.conf
	elif [ "${PROFTPD_UPLOADSCAN_OPT}" = "no" ]; then
		echo '' > /etc/proftpd.clamav.conf
	fi
	
	cagefsctl_update;
	
	cd ${CWD}
	echo "Restarting ProFTPd."
	control_service proftpd restart
}

####################################################

doPureftpd(){
	if [ "${FTPD_OPT}" != "pureftpd" ]; then
		echo "You cannot install Pure-FTPd, because you do not have it set in options.conf file.";
		exit 1;
	fi

	getFile pure-ftpd-${PUREFTPD_VER}.tar.gz pureftpd
	getFile pure-ftpd pure-ftpd_boot
	getFile pure-ftpd_freebsd pure-ftpd_boot_freebsd
	getFile pure-ftpd_debian pure-ftpd_boot_debian

	quitIfLocked doPureftpd

	cd ${CWD};
	FILE=${CWD}/pure-ftpd-${PUREFTPD_VER}.tar.gz
	checkFile ${FILE};
	echo "Extracting ${FILE}...";

	tar xzf ${FILE} --no-same-owner
	chown -R root:${ROOT_GRP} pure-ftpd-${PUREFTPD_VER}
	cd pure-ftpd-${PUREFTPD_VER}

	echo "Configuring pure-ftpd-${PUREFTPD_VER}...";
	${CWD}/${PUREFTPD_CONFIGURE}

	echo "Done. Making pure-ftpd-${PUREFTPD_VER}...";
	while
	echo "Trying to make Pure-FTPd..."
	do
	{
                if [ "${OS}" = "FreeBSD" ]; then
                        /usr/local/bin/gmake -j ${CPU_CORES}
                else
			make -j ${CPU_CORES}
		fi

		if [ $? -ne 0 ]
		then
			if [ ${USER_INPUT} -eq 1 ]; then
				printf "\n*** The make has failed, would you like to try to make again? (y,n): \n";
				read yesno;
				echo "";
			 else
                                if [ "${INPUT_VALUE}" = "d" ]; then
					yesno=n
                                else
                                        yesno=${INPUT_VALUE}
                                fi
                         fi

			 if [ "${yesno}" = "n" ]
			 then
				do_exit 0;
			 fi
		else
			break;
		fi
	}
	done
	echo "Make complete";

	echo "Installing pure-ftpd-${PUREFTPD_VER}...";
	make install
	
	if [ ! -e /etc/pure-ftpd.pem ] && [ "${WEBSERVER_OPT}" = "nginx" ]; then
		if [ -e /etc/nginx/ssl.crt/server.crt ] && [ -e /etc/nginx/ssl.key/server.key ]; then
			cat /etc/nginx/ssl.crt/server.crt > /etc/pure-ftpd.pem
			cat /etc/nginx/ssl.key/server.key >> /etc/pure-ftpd.pem
		fi
	fi

	if [ ! -e /etc/pure-ftpd.pem ]; then
		if [ -e /etc/httpd/conf/ssl.crt/server.crt ] && [ -e /etc/httpd/conf/ssl.key/server.key ]; then
			cat /etc/httpd/conf/ssl.crt/server.crt > /etc/pure-ftpd.pem
			cat /etc/httpd/conf/ssl.key/server.key >> /etc/pure-ftpd.pem
		fi
	fi

	if [ ! -e /etc/pure-ftpd.pem ]; then
		if [ -e /etc/exim.crt ] && [ -e /etc/exim.key ]; then
			cat /etc/exim.crt > /etc/pure-ftpd.pem
			cat /etc/exim.key >> /etc/pure-ftpd.pem
		fi
	fi
	
	chmod 600 /etc/pure-ftpd.pem
	
	START_SCRIPT_UPLOADSCAN=1;
	PATH_TO_UPLOADSCAN=/usr/local/bin/pureftpd_uploadscan.sh
	
	if [ "${PUREFTPD_UPLOADSCAN_OPT}" = "yes" ] && [ "${CLAMAV_OPT}" = "yes" ]; then
		if [ ! -e /usr/local/bin/clamdscan ]; then
			removeLockfile;
			doclamav;
		fi
		if [ ! -e /usr/local/bin/clamdscan ]; then
			do_exit 1 "Cannot enable upload scan in Pure-FTPd because there is no ClamAV (/usr/local/bin/clamdscan) on the system."
		fi
		echo "Enabling PureFTPd upload scanning script..."
		cp -f ${PUREFTPD_UPLOADSCAN_SCRIPT} ${PATH_TO_UPLOADSCAN}
		chmod 711 ${PATH_TO_UPLOADSCAN}
		if [ "${SYSTEMD}" = "yes" ]; then
			START_SCRIPT_UPLOADSCAN=1
		else
			START_SCRIPT_UPLOADSCAN=`grep -m1 -c "${PATH_TO_UPLOADSCAN}" ${INITDDIR}/pure-ftpd`
		fi
	elif [ "${PUREFTPD_UPLOADSCAN_OPT}" = "no" ]; then
		rm -f ${PATH_TO_UPLOADSCAN}
	fi
	
	if [ "${SYSTEMD}" = "yes" ]; then
		if [ -e ${INITDDIR}/pure-ftpd ]; then
			echo "Removing ${INITDDIR}/pure-ftpd..."
			rm -f ${INITDDIR}/pure-ftpd
		fi
		echo "Enabling pure-ftpd in systemd..."
		if [ -e ${CB_CUST_SYSTEMD}/pure-ftpd.service ]; then
			cp -f ${CB_CUST_SYSTEMD}/pure-ftpd.service ${SYSTEMDDIR}/pure-ftpd.service
		else
			cp -f ${CB_SYSTEMD}/pure-ftpd.service ${SYSTEMDDIR}/pure-ftpd.service
		fi
		chmod 644 ${SYSTEMDDIR}/pure-ftpd.service
		systemctl daemon-reload

		if [ -e ${SYSTEMDDIR}/pure-ftpd.service ]; then
			systemctl enable pure-ftpd.service
			if [ -e ${SYSTEMDDIR}/proftpd.service ]; then
				systemctl stop proftpd.service
				systemctl disable proftpd.service
				rm -f ${SYSTEMDDIR}/proftpd.service
				systemctl daemon-reload
			fi
		fi
		if [ ! -d /usr/libexec ]; then
			mkdir -p /usr/libexec
		fi
		if [ ! -e /usr/libexec/pureftpd_startscript ]; then
			if [ -e ${CB_CUST_SYSTEMD}/scripts/pureftpd_startscript ]; then
				cp -f ${CB_CUST_SYSTEMD}/scripts/pureftpd_startscript /usr/libexec/pureftpd_startscript
			else
				cp -f ${CB_SYSTEMD}/scripts/pureftpd_startscript /usr/libexec/pureftpd_startscript
			fi
			chmod 755 /usr/libexec/pureftpd_startscript
		fi
	else
		if [ ! -e ${INITDDIR}/pure-ftpd ] || [ ${START_SCRIPT_UPLOADSCAN} -eq 0 ]; then
			if [ "${OS}" = "FreeBSD" ]; then
				cp ${CWD}/pure-ftpd_freebsd ${INITDDIR}/pure-ftpd
				chmod 755 ${INITDDIR}/pure-ftpd
			elif [ -e /etc/debian_version ]; then
				cp ${CWD}/pure-ftpd_debian ${INITDDIR}/pure-ftpd
				chmod 755 ${INITDDIR}/pure-ftpd
			else
				cp ${CWD}/pure-ftpd ${INITDDIR}/pure-ftpd
				chmod 755 ${INITDDIR}/pure-ftpd
			fi
		fi
		
		if [ -e ${INITDDIR}/pure-ftpd ]; then
			if [ "${OS}" = "FreeBSD" ]; then
				if [ -e ${INITDDIR}/proftpd ]; then
					rm -f ${INITDDIR}/proftpd
				fi
			elif [ -e /etc/debian_version ]; then
				update-rc.d pure-ftpd defaults
				if [ -e ${INITDDIR}/proftpd ]; then
					update-rc.d -f proftpd remove
				fi
			else
				/sbin/chkconfig pure-ftpd on
				if [ -e ${INITDDIR}/proftpd ]; then
					/sbin/chkconfig proftpd off
				fi
			fi
		fi
	fi
	
	killall -9 proftpd >/dev/null 2>&1
	
	echo "Done pure-ftpd.";
	removeLockfile

	#setup the directadmin.conf
	setVal pureftp 1 ${DACONF_TEMPLATE_FILE}
	setVal pureftp 1 ${DACONF_FILE}

	killall proftpd >/dev/null 2>&1
	
	doRestartDA;
	
	set_service proftpd delete
	set_service pure-ftpd ON
	
	killall proftpd >/dev/null 2>&1
	
	pure-pw mkdb /etc/pureftpd.pdb -f /etc/proftpd.passwd

	if [ ! -e /etc/logrotate.d/pure-ftpd ] && [ ${OS} != "FreeBSD" ]
        then
		${WGET} ${WGET_CONNECT_OPTIONS} ${WEBPATH}/pure-ftpd.logrotate -O /etc/logrotate.d/pure-ftpd
	fi
	
	cagefsctl_update;
	
	cd ${CWD}
	echo "Restarting Pure-FTPd."
	control_service pure-ftpd restart
}

####################################################

doUpdateDA()
{
    echo "${boldon}Updating DirectAdmin${boldoff}"
    echo "action=update&value=program" >> ${TASK_QUEUE}
    run_dataskq
}

####################################################

doVersions() {
	cd ${CWD}

	VERSIONS=$1

	if [ "${VERSIONS}" = "json" ]; then
		echo "{";
	fi
	
	if [ -e /usr/local/directadmin/directadmin ] && [ "${DIRECTADMIN_VER}" != "0" ]; then
			DIRECTADMINV="`/usr/local/directadmin/directadmin v | awk '{ print $3 }' | cut -d. -f2,3,4`"
			if [ "${VERSIONS}" = "1" ]; then
				echo "Latest version of DirectAdmin: ${DIRECTADMIN_VER}"
				echo "Installed version of DirectAdmin: ${DIRECTADMINV}"
				echo ""
			fi
			if [ "${DIRECTADMIN_VER}" != "${DIRECTADMINV}" ]; then
				if [ "${VERSIONS}" = "0" ] || [ "${VERSIONS}" = "3" ]; then
					doUpdateDA;
				elif [ "${VERSIONS}" = "1" ]; then
					echo "${boldon}DirectAdmin ${DIRECTADMINV} to ${DIRECTADMIN_VER} update is available.${boldoff}"
					echo ""
				elif [ "${VERSIONS}" = "json" ]; then
					printf "\t\"update_da\": {\n"
					printf "\t\t\"name\": \"DirectAdmin\",\n"
					printf "\t\t\"current\": \"${DIRECTADMINV}\",\n"
					printf "\t\t\"offered\": \"${DIRECTADMIN_VER}\"\n"
					printf "\t},\n"
				fi
			fi
	fi
	
	if [ "${WEBSERVER_OPT}" = "litespeed" ] && [ "${LITESPEED_VER}" != "0" ]; then
		if [ -e /usr/local/lsws/bin/lshttpd ]; then
			LITESPEEDV="`/usr/local/lsws/bin/lshttpd -v | cut -d/ -f2 | awk '{print $1}'`"
			if [ "${VERSIONS}" = "1" ]; then
				echo "Latest version of LiteSpeed: ${LITESPEED_VER}"
				echo "Installed version of LiteSpeed: ${LITESPEEDV}"
				echo ""
			fi
			if [ "${LITESPEED_VER}" != "${LITESPEEDV}" ]; then
				if [ "${VERSIONS}" = "0" ]; then
					echo "${boldon}Updating LiteSpeed${boldoff}"
					doLiteSpeed;
				elif [ "${VERSIONS}" = "1" ]; then
					echo "${boldon}LiteSpeed ${LITESPEEDV} to ${LITESPEED_VER} update is available.${boldoff}"
					echo ""
				elif [ "${VERSIONS}" = "json" ]; then
					printf "\t\"litespeed\": {\n"
					printf "\t\t\"name\": \"LiteSpeed\",\n"
					printf "\t\t\"current\": \"${LITESPEEDV}\",\n"
					printf "\t\t\"offered\": \"${LITESPEED_VER}\"\n"
					printf "\t},\n"
				fi
			fi
		fi
	fi
	
	if [ "${APACHE2_VER}" != "0" ]; then
		if [ "${WEBSERVER_OPT}" = "apache" ] || [ "${WEBSERVER_OPT}" = "nginx_apache" ]; then
			if [ -e /usr/sbin/httpd ]; then
				APACHEV="`/usr/sbin/httpd -v | grep -m1 'Server version:' | awk '{ print $3 }' | cut -d/ -f2`"
				if [ "${VERSIONS}" = "1" ]; then
					echo "Latest version of Apache: ${APACHE2_VER}"
					echo "Installed version of Apache: ${APACHEV}"
					echo ""
				fi
				if [ "${APACHE2_VER}" != "${APACHEV}" ]; then
					if [ "${VERSIONS}" = "0" ]; then
						echo "${boldon}Updating Apache${boldoff}"
						doApache2;
					elif [ "${VERSIONS}" = "1" ]; then
						echo "${boldon}Apache ${APACHEV} to ${APACHE2_VER} update is available.${boldoff}"
						echo ""
					elif [ "${VERSIONS}" = "json" ]; then
						printf "\t\"apache\": {\n"
						printf "\t\t\"name\": \"Apache\",\n"
						printf "\t\t\"current\": \"${APACHEV}\",\n"
						printf "\t\t\"offered\": \"${APACHE2_VER}\"\n"
						printf "\t},\n"
					fi
				fi
			fi
		fi
	fi
	
	if [ "${NGINX_VER}" != "0" ]; then
		if [ "${WEBSERVER_OPT}" = "nginx" ] || [ "${WEBSERVER_OPT}" = "nginx_apache" ]; then
			if [ -e /usr/sbin/nginx ]; then
				NGINXV="`/usr/sbin/nginx -v 2>&1 | grep -m1 'nginx version:' | cut -d'/' -f2`"
				if [ "${VERSIONS}" = "1" ]; then
					echo "Latest version of Nginx: ${NGINX_VER}"
					echo "Installed version of Nginx: ${NGINXV}"
					echo ""
				fi
				if [ "${NGINX_VER}" != "${NGINXV}" ]; then
					if [ "${VERSIONS}" = "0" ]; then
						echo "${boldon}Updating Nginx${boldoff}"
						doNginx;
					elif [ "${VERSIONS}" = "1" ]; then
						echo "${boldon}Nginx ${NGINXV} to ${NGINX_VER} update is available.${boldoff}"
						echo ""
					elif [ "${VERSIONS}" = "json" ]; then
						printf "\t\"nginx\": {\n"
						printf "\t\t\"name\": \"Nginx\",\n"
						printf "\t\t\"current\": \"${NGINXV}\",\n"
						printf "\t\t\"offered\": \"${NGINX_VER}\"\n"
						printf "\t},\n"
					fi
				fi
			fi
		fi
	fi


	if [ "${FTPD_OPT}" = "proftpd" ] && [ "${PROFTPD_VER}" != "0" ]; then
		if [ -e $PROFTPD_PREFIX/sbin/proftpd ]; then
			PROFTPDV="`$PROFTPD_PREFIX/sbin/proftpd -v 2>&1 | awk '{ print $3 }'`"
                        if [ "$PROFTPDV" = "Version" ]; then
                                PROFTPDV="`$PROFTPD_PREFIX/sbin/proftpd -v 2>&1 | awk '{ print $4 }'`"
                        fi
			if [ "${VERSIONS}" = "1" ]; then
				echo "Latest version of ProFTPD: ${PROFTPD_VER}"
				echo "Installed version of ProFTPD: ${PROFTPDV}"
				echo ""
			fi
			if [ "${PROFTPD_VER}" != "${PROFTPDV}" ]; then
				if [ "${VERSIONS}" = "0" ]; then
					echo "${boldon}Updating ProFTPD${boldoff}"
					doProftpd;
				elif [ "${VERSIONS}" = "1" ]; then
					echo "${boldon}ProFTPD ${PROFTPDV} to ${PROFTPD_VER} update is available.${boldoff}"
					echo ""
				elif [ "${VERSIONS}" = "json" ]; then
					printf "\t\"proftpd\": {\n"
					printf "\t\t\"name\": \"ProFTPd\",\n"
					printf "\t\t\"current\": \"${PROFTPDV}\",\n"
					printf "\t\t\"offered\": \"${PROFTPD_VER}\"\n"
					printf "\t},\n"
				fi
			fi
		fi
	fi

	if [ "${FTPD_OPT}" = "pureftpd" ] && [ "${PUREFTPD_VER}" != "0" ]; then
		if [ -e /usr/sbin/pure-ftpd ]; then
			PUREFTPDV="`/usr/sbin/pure-ftpd -h | grep -m1 pure-ftpd | awk '{print $2}' | cut -dv -f2`"
			if [ "${VERSIONS}" = "1" ]; then
				echo "Latest version of Pure-FTPD: ${PUREFTPD_VER}"
				echo "Installed version of Pure-FTPd: ${PUREFTPDV}"
				echo ""
			fi
			if [ "${PUREFTPD_VER}" != "${PUREFTPDV}" ]; then
				if [ "${VERSIONS}" = "0" ]; then
					echo "${boldon}Updating Pure-FTPd${boldoff}"
					doPureftpd;
				elif [ "${VERSIONS}" = "1" ]; then
					echo "${boldon}Pure-FTPD ${PUREFTPDV} to ${PUREFTPD_VER} update is available.${boldoff}"
					echo ""
				elif [ "${VERSIONS}" = "json" ]; then
					printf "\t\"pureftpd\": {\n"
					printf "\t\t\"name\": \"Pure-FTPd\",\n"
					printf "\t\t\"current\": \"${PUREFTPDV}\",\n"
					printf "\t\t\"offered\": \"${PUREFTPD_VER}\"\n"
					printf "\t},\n"
				fi
			fi
		fi
	fi
	
	if [ "${AUTOCONF_OPT}" = "yes" ] && [ "${AUTOCONF_VER}" != "0" ]; then
		if [ -e /usr/local/bin/autoconf ]; then
			AUTOCONFV="`/usr/local/bin/autoconf --version | grep -m1 '(GNU Autoconf)' | awk '{ print $4 }'`"
			if [ "${VERSIONS}" = "1" ]; then
				echo "Latest version of autoconf: ${AUTOCONF_VER}"
				echo "Installed version of autoconf: ${AUTOCONFV}"
				echo ""
			fi
			if [ "${AUTOCONF_VER}" != "${AUTOCONFV}" ]; then
				if [ "${VERSIONS}" = "0" ]; then
					echo "${boldon}Updating autoconf${boldoff}"
					doAutoconf;
				elif [ "${VERSIONS}" = "1" ]; then
					echo "${boldon}Autoconf ${AUTOCONFV} to ${AUTOCONF_VER} update is available.${boldoff}"
					echo ""
				elif [ "${VERSIONS}" = "json" ]; then
					printf "\t\"autoconf\": {\n"
					printf "\t\t\"name\": \"Autoconf\",\n"
					printf "\t\t\"current\": \"${AUTOCONFV}\",\n"
					printf "\t\t\"offered\": \"${AUTOCONF_VER}\"\n"
					printf "\t},\n"
				fi
			fi
		fi
	fi
	
	if [ "${AUTOMAKE_OPT}" = "yes" ] && [ "${AUTOMAKE_VER}" != "0" ]; then
		if [ -e /usr/local/bin/automake ]; then
			AUTOMAKEV="`/usr/local/bin/automake --version | grep -m1 '(GNU automake)' | awk '{ print $4 }'`"
			if [ "${VERSIONS}" = "1" ]; then
				echo "Latest version of automake: ${AUTOMAKE_VER}"
				echo "Installed version of automake: ${AUTOMAKEV}"
				echo ""
			fi
			if [ "${AUTOMAKE_VER}" != "${AUTOMAKEV}" ]; then
				if [ "${VERSIONS}" = "0" ]; then
					echo "${boldon}Updating automake${boldoff}"
					doAutomake;
				elif [ "${VERSIONS}" = "1" ]; then
					echo "${boldon}Automake ${AUTOMAKEV} to ${AUTOMAKE_VER} update is available.${boldoff}"
					echo ""
				elif [ "${VERSIONS}" = "json" ]; then
					printf "\t\"automake\": {\n"
					printf "\t\t\"name\": \"Automake\",\n"
					printf "\t\t\"current\": \"${AUTOMAKEV}\",\n"
					printf "\t\t\"offered\": \"${AUTOMAKE_VER}\"\n"
					printf "\t},\n"
				fi
			fi
		fi
	fi

	if [ "${LIBTOOL_OPT}" = "yes" ] && [ "${LIBTOOL_VER}" != "0" ]; then
		if [ -e /usr/local/bin/libtool ]; then
			LIBTOOLV="`/usr/local/bin/libtool --version | grep -m1 '(GNU libtool)' | awk '{ print $4 }'`"
			if [ "${VERSIONS}" = "1" ]; then
				echo "Latest version of libtool: ${LIBTOOL_VER}"
				echo "Installed version of libtool: ${LIBTOOLV}"
				echo ""
			fi
			if [ "${LIBTOOL_VER}" != "${LIBTOOLV}" ]; then
				if [ "${VERSIONS}" = "0" ]; then
					echo "${boldon}Updating libtool${boldoff}"
					doLibtool;
				elif [ "${VERSIONS}" = "1" ]; then
					echo "${boldon}Libtool ${LIBTOOLV} to ${LIBTOOL_VER} update is available.${boldoff}"
					echo ""
				elif [ "${VERSIONS}" = "json" ]; then
					printf "\t\"libtool\": {\n"
					printf "\t\t\"name\": \"Libtool\",\n"
					printf "\t\t\"current\": \"${LIBTOOL_AUTOMAKEV}\",\n"
					printf "\t\t\"offered\": \"${LIBTOOL_VER}\"\n"
					printf "\t},\n"
				fi
			fi
		fi
	fi
	
	if [ -s /usr/local/include/libpng16/png.h ] && [ "${PNG_VER}" != "0" ]; then
		LIBPNGV="`grep -m1 'define PNG_LIBPNG_VER_STRING' /usr/local/include/libpng16/png.h | cut -d'\"' -f2`"
		if [ "${VERSIONS}" = "1" ]; then
			echo "Latest version of libpng: ${PNG_VER}"
			echo "Installed version of libpng: ${LIBPNGV}"
			echo ""
		fi
		if [ "${LIBPNGV}" != "${PNG_VER}" ]; then
			if [ "${VERSIONS}" = "0" ]; then
				echo "${boldon}Updating libpng${boldoff}"
				doLibPng;
			elif [ "${VERSIONS}" = "1" ]; then
				echo "${boldon}Libpng ${LIBPNGV} to ${PNG_VER} update is available.${boldoff}"
				echo ""
			elif [ "${VERSIONS}" = "json" ]; then
				printf "\t\"libpng\": {\n"
				printf "\t\t\"name\": \"Libpng\",\n"
				printf "\t\t\"current\": \"${LIBPNGV}\",\n"
				printf "\t\t\"offered\": \"${PNG_VER}\"\n"
				printf "\t},\n"
			fi
		fi
	fi

	if [ -s ${STRINGS} ]; then
		if [ "${CLOUDLINUX_OPT}" = "yes" ] && [ "${PHP1_MODE_OPT}" = "lsphp" ] && [ "${MOD_LSAPI_VER}" != "0" ]; then
			if [ "${WEBSERVER_OPT}" = "apache" ] || [ "${WEBSERVER_OPT}" = "nginx_apache" ]; then
				if [ -s /usr/lib/apache/mod_lsapi.so ]; then
					MODLSAPIV="`${STRINGS} /usr/lib/apache/mod_lsapi.so | grep -m1 'version' | awk '{print $3}' | cut -d: -f1`"
					if [ "${VERSIONS}" = "1" ]; then
						echo "Latest version of mod_lsapi: ${MODLSAPIV}"
						echo "Installed version of mod_lsapi: ${MOD_LSAPI_VER}"
						echo ""
					fi
					if [ "${MODLSAPIV}" != "${MOD_LSAPI_VER}" ]; then
						if [ "${VERSIONS}" = "0" ]; then
							echo "${boldon}Updating mod_lsapi${boldoff}"
							doModLsapi 1;
						elif [ "${VERSIONS}" = "1" ]; then
							echo "${boldon}mod_lsapi ${MODLSAPIV} to ${MOD_LSAPI_VER} update is available.${boldoff}"
							echo ""
						elif [ "${VERSIONS}" = "json" ]; then
							printf "\t\"mod_lsapi\": {\n"
							printf "\t\t\"name\": \"mod_lsapi\",\n"
							printf "\t\t\"current\": \"${MODLSAPIV}\",\n"
							printf "\t\t\"offered\": \"${MOD_LSAPI_VER}\"\n"
							printf "\t},\n"
						fi
					fi
				fi
			fi
		fi
		
		if [ "${CLOUDLINUX_OPT}" = "yes" ] && [ "${MOD_HOSTINGLIMITS_VER}" != "0" ]; then
			if [ "${WEBSERVER_OPT}" = "apache" ] || [ "${WEBSERVER_OPT}" = "nginx_apache" ]; then
				if [ -s /usr/lib/apache/mod_hostinglimits.so ]; then
					MODHOSTINGLIMITSV="`${STRINGS} /usr/lib/apache/mod_hostinglimits.so | grep -m1 'version' | awk '{print $3}' | cut -d. -f1,2`"
					if [ "${VERSIONS}" = "1" ]; then
						echo "Latest version of mod_hostinglimits: ${MODHOSTINGLIMITSV}"
						echo "Installed version of mod_hostinglimits: ${MOD_HOSTINGLIMITS_VER}"
						echo ""
					fi
					if [ "${MODHOSTINGLIMITSV}" != "${MOD_HOSTINGLIMITS_VER}" ]; then
						if [ "${VERSIONS}" = "0" ]; then
							echo "${boldon}Updating mod_hostinglimits${boldoff}"
							doModHostingLimits 1;
						elif [ "${VERSIONS}" = "1" ]; then
							echo "${boldon}mod_hostinglimits ${MODHOSTINGLIMITSV} to ${MOD_HOSTINGLIMITS_VER} update is available.${boldoff}"
							echo ""
						elif [ "${VERSIONS}" = "json" ]; then
							printf "\t\"mod_hostinglimits\": {\n"
							printf "\t\t\"name\": \"mod_hostinglimits\",\n"
							printf "\t\t\"current\": \"${MODHOSTINGLIMITSV}\",\n"
							printf "\t\t\"offered\": \"${MOD_HOSTINGLIMITS_VER}\"\n"
							printf "\t},\n"
						fi
					fi
				fi
			fi
		fi
		
		if [ "${MOD_RUID2_OPT}" = "yes" ] && [ "${WEBSERVER_OPT}" != "litespeed" ] && [ "${MOD_RUID2_VER}" != "0" ]; then
			if [ -s /usr/lib/apache/mod_ruid2.so ]; then
				MODRUID2V="`${STRINGS} /usr/lib/apache/mod_ruid2.so | grep -m1 'mod_ruid2/' | awk '{print $1}' | cut -d/ -f2`"
				if [ "${VERSIONS}" = "1" ]; then
					echo "Latest version of mod_ruid2: ${MOD_RUID2_VER}"
					echo "Installed version of mod_ruid2: ${MODRUID2V}"
					echo ""
				fi
				if [ "${MODRUID2V}" != "${MOD_RUID2_VER}" ]; then
					if [ "${VERSIONS}" = "0" ]; then
						echo "${boldon}Updating mod_ruid2${boldoff}"
						doModRuid2;
					elif [ "${VERSIONS}" = "1" ]; then
						echo "${boldon}mod_ruid2 ${MODRUID2V} to ${MOD_RUID2_VER} update is available.${boldoff}"
						echo ""
					elif [ "${VERSIONS}" = "json" ]; then
						printf "\t\"mod_ruid2\": {\n"
						printf "\t\t\"name\": \"mod_ruid2\",\n"
						printf "\t\t\"current\": \"${MODRUID2V}\",\n"
						printf "\t\t\"offered\": \"${MOD_RUID2_VER}\"\n"
						printf "\t},\n"
					fi
				fi
			fi
		fi	
	fi
	
	if [ -e /usr/local/icu/include/unicode/uvernum.h ]; then
		ICU4CV="`echo ${ICU_VER} | ${TR} '_' '.'`"
		if [ "${ICU4CV}" != "0" ]; then
			CURRENT_ICU4C="`grep -m1 'define U_ICU_VERSION ' /usr/local/icu/include/unicode/uvernum.h | cut -d'\"' -f2`"
			if [ "${VERSIONS}" = "1" ]; then
				echo "Latest version of ICU4C: ${ICU4CV}"
				echo "Installed version of ICU4C: ${CURRENT_ICU4C}"
				echo ""
			fi
			if [ "${ICU4CV}" != "${CURRENT_ICU4C}" ]; then
				if [ "${VERSIONS}" = "0" ]; then
					echo "${boldon}Updating ICU4C${boldoff}"
					doICU;
				elif [ "${VERSIONS}" = "1" ]; then
					echo "${boldon}ICU4C ${CURRENT_ICU4C} to ${ICU4CV} update is available.${boldoff}"
					echo ""
				elif [ "${VERSIONS}" = "json" ]; then
					printf "\t\"icu\": {\n"
					printf "\t\t\"name\": \"icu4c\",\n"
					printf "\t\t\"current\": \"${CURRENT_ICU4C}\",\n"
					printf "\t\t\"offered\": \"${ICU4CV}\"\n"
					printf "\t},\n"
				fi
			fi
		fi
	fi
		
	if [ -e /usr/local/include/libxslt/xsltconfig.h ] && [ "${LIBXSLT_VER}" != "0" ]; then
		LIBXSLTV="`grep -m1 'define LIBXSLT_DOTTED_VERSION' /usr/local/include/libxslt/xsltconfig.h | cut -d'\"' -f2`"
		if [ "${VERSIONS}" = "1" ]; then
			echo "Latest version of libxslt: ${LIBXSLT_VER}"
			echo "Installed version of libxslt: ${LIBXSLTV}"
			echo ""
		fi
		if [ "${LIBXSLT_VER}" != "${LIBXSLTV}" ]; then
			if [ "${VERSIONS}" = "0" ]; then
				echo "${boldon}Updating libxslt${boldoff}"
				doLibxslt;
			elif [ "${VERSIONS}" = "1" ]; then
				echo "${boldon}libxslt ${LIBXSLTV} to ${LIBXSLT_VER} update is available.${boldoff}"
				echo ""
			elif [ "${VERSIONS}" = "json" ]; then
				printf "\t\"libxslt\": {\n"
				printf "\t\t\"name\": \"libXSLT\",\n"
				printf "\t\t\"current\": \"${LIBXSLTV}\",\n"
				printf "\t\t\"offered\": \"${LIBXSLT_VER}\"\n"
				printf "\t},\n"
			fi
		fi
	fi
	
	if [ -e /usr/local/include/libxml2/libxml/xmlversion.h ] && [ "${LIBXML2_VER}" != "0" ]; then
		LIBXML2V="`grep -m1 'define LIBXML_DOTTED_VERSION' /usr/local/include/libxml2/libxml/xmlversion.h | cut -d'\"' -f2`"
		if [ "${VERSIONS}" = "1" ]; then
			echo "Latest version of libxml2: ${LIBXML2_VER}"
			echo "Installed version of libxml2: ${LIBXML2V}"
			echo ""
		fi
		if [ "${LIBXML2_VER}" != "${LIBXML2V}" ]; then
			if [ "${VERSIONS}" = "0" ]; then
				echo "${boldon}Updating libxml2${boldoff}"
				doLibxml2;
			elif [ "${VERSIONS}" = "1" ]; then
				echo "${boldon}libxml2 ${LIBXML2V} to ${LIBXML2_VER} update is available.${boldoff}"
				echo ""
			elif [ "${VERSIONS}" = "json" ]; then
				printf "\t\"libxml2\": {\n"
				printf "\t\t\"name\": \"libXML2\",\n"
				printf "\t\t\"current\": \"${LIBXML2V}\",\n"
				printf "\t\t\"offered\": \"${LIBXML2_VER}\"\n"
				printf "\t},\n"
			fi
		fi
	fi

	if [ -e /usr/local/bin/iconv ] && [ "${ICONV_VER}" != "0" ]; then
		ICONVV="`/usr/local/bin/iconv --version | head -n1 | awk '{print $4}' | tr -d ')'`"
		if [ "${VERSIONS}" = "1" ]; then
			echo "Latest version of iconv: ${ICONV_VER}"
			echo "Installed version of iconv: ${ICONVV}"
			echo ""
		fi
		if [ "${ICONV_VER}" != "${ICONVV}" ]; then
			if [ "${VERSIONS}" = "0" ]; then
				echo "${boldon}Updating iconv${boldoff}"
				doIconv;
			elif [ "${VERSIONS}" = "1" ]; then
				echo "${boldon}iconv ${ICONVV} to ${ICONV_VER} update is available.${boldoff}"
				echo ""
			elif [ "${VERSIONS}" = "json" ]; then
				printf "\t\"iconv\": {\n"
				printf "\t\t\"name\": \"iconv\",\n"
				printf "\t\t\"current\": \"${ICONVV}\",\n"
				printf "\t\t\"offered\": \"${ICONV_VER}\"\n"
				printf "\t},\n"
			fi
		fi
	fi
	
	if [ -e /usr/local/bin/pigz ] && [ "${PIGZ_VER}" != "0" ]; then
		#Zlib which is used for pigz only
		if [ -e /usr/local/lib_da/include/zlib.h ] && [ "${ZLIB_VER}" != "0" ]; then
			ZLIBV="`grep 'define ZLIB_VERSION' /usr/local/lib_da/include/zlib.h | cut -d'"' -f2`"
			if [ "${VERSIONS}" = "1" ]; then
				echo "Latest version of zlib: ${ZLIB_VER}"
				echo "Installed version of zlib: ${ZLIBV}"
				echo ""
			fi
			if [ "${ZLIB_VER}" != "${ZLIBV}" ]; then
				if [ "${VERSIONS}" = "0" ]; then
					echo "${boldon}Updating Zlib${boldoff}"
					doZlib;
				elif [ "${VERSIONS}" = "1" ]; then
					echo "${boldon}Zlib ${ZLIBV} to ${ZLIB_VER} update is available.${boldoff}"
					echo ""
				elif [ "${VERSIONS}" = "json" ]; then
					printf "\t\"zlib\": {\n"
					printf "\t\t\"name\": \"Zlib\",\n"
					printf "\t\t\"current\": \"${ZLIBV}\",\n"
					printf "\t\t\"offered\": \"${ZLIB_VER}\"\n"
					printf "\t},\n"
				fi
			fi
		fi
		
		#Pigz
		PIGZV="`/usr/local/bin/pigz --version 2>&1 | awk '{print $2}'`"
		if [ "${VERSIONS}" = "1" ]; then
			echo "Latest version of pigz: ${PIGZ_VER}"
			echo "Installed version of pigz: ${PIGZV}"
			echo ""
		fi
		if [ "${PIGZ_VER}" != "${PIGZV}" ]; then
			if [ "${VERSIONS}" = "0" ]; then
				echo "${boldon}Updating pigz${boldoff}"
				doIconv;
			elif [ "${VERSIONS}" = "1" ]; then
				echo "${boldon}pigz ${PIGZV} to ${PIGZ_VER} update is available.${boldoff}"
				echo ""
			elif [ "${VERSIONS}" = "json" ]; then
				printf "\t\"pigz\": {\n"
				printf "\t\t\"name\": \"pigz\",\n"
				printf "\t\t\"current\": \"${PIGZV}\",\n"
				printf "\t\t\"offered\": \"${PIGZ_VER}\"\n"
				printf "\t},\n"
			fi
		fi
	fi
	
	if [ -e /usr/local/bin/m4 ] && [ "${M4_VER}" != "0" ]; then
		M4V="`/usr/local/bin/m4 --version | head -n1 | awk '{print $4}' | tr -d ')'`"
		if [ "${VERSIONS}" = "1" ]; then
			echo "Latest version of m4: ${M4_VER}"
			echo "Installed version of m4: ${M4V}"
			echo ""
		fi
		if [ "${M4_VER}" != "${M4V}" ]; then
			if [ "${VERSIONS}" = "0" ]; then
				echo "${boldon}Updating m4${boldoff}"
				doM4;
			elif [ "${VERSIONS}" = "1" ]; then
				echo "${boldon}m4 ${M4V} to ${M4_VER} update is available.${boldoff}"
				echo ""
			elif [ "${VERSIONS}" = "json" ]; then
				printf "\t\"m4\": {\n"
				printf "\t\t\"name\": \"M4\",\n"
				printf "\t\t\"current\": \"${M4V}\",\n"
				printf "\t\t\"offered\": \"${M4_VER}\"\n"
				printf "\t},\n"
			fi
		fi
	fi
	
	if [ -e /usr/local/bin/pcre-config ] && [ "${PCRE_VER}" != "0" ]; then
		PCREV="`/usr/local/bin/pcre-config --version`"
		if [ "${VERSIONS}" = "1" ]; then
			echo "Latest version of PCRE: ${PCRE_VER}"
			echo "Installed version of PCRE: ${PCREV}"
			echo ""
		fi
		if [ "${PCRE_VER}" != "${PCREV}" ]; then
			if [ "${VERSIONS}" = "0" ]; then
				echo "${boldon}Updating PCRE${boldoff}"
				doPCRE;
			elif [ "${VERSIONS}" = "1" ]; then
				echo "${boldon}PCRE ${PCREV} to ${PCRE_VER} update is available.${boldoff}"
				echo ""
			elif [ "${VERSIONS}" = "json" ]; then
				printf "\t\"pcre\": {\n"
				printf "\t\t\"name\": \"PCRE\",\n"
				printf "\t\t\"current\": \"${PCREV}\",\n"
				printf "\t\t\"offered\": \"${PCRE_VER}\"\n"
				printf "\t},\n"
			fi
		fi
	fi

	if [ "${CURL_OPT}" = "yes" ]; then
		if [ -e /usr/local/bin/curl ] && [ "${CURL_VER}" != "0" ]; then
			CURLV="`/usr/local/bin/curl --version | grep -m1 'libcurl' | awk '{ print $2}'`"
			if [ "${VERSIONS}" = "1" ]; then
				echo "Latest version of curl: ${CURL_VER}"
				echo "Installed version of curl: ${CURLV}"
				echo ""
			fi
			if [ "${CURL_VER}" != "${CURLV}" ]; then
				if [ "${VERSIONS}" = "0" ]; then
					echo "${boldon}Updating cURL${boldoff}"
					doCURL;
				elif [ "${VERSIONS}" = "1" ]; then
					echo "${boldon}cURL ${CURLV} to ${CURL_VER} update is available.${boldoff}"
					echo ""
				elif [ "${VERSIONS}" = "json" ]; then
					printf "\t\"curl\": {\n"
					printf "\t\t\"name\": \"cURL\",\n"
					printf "\t\t\"current\": \"${CURLV}\",\n"
					printf "\t\t\"offered\": \"${CURL_VER}\"\n"
					printf "\t},\n"
				fi
			fi
		fi
	fi

	if [ -e /usr/local/bin/freetype-config ] && [ "${FREETYPE_VER}" != "0" ]; then
		FREETYPEV="`/usr/local/bin/freetype-config --ftversion`"
		if [ "${VERSIONS}" = "1" ]; then
			echo "Latest version of FreeType: ${FREETYPE_VER}"
			echo "Installed version of FreeType: ${FREETYPEV}"
			echo ""
		fi
		if [ "${FREETYPE_VER}" != "${FREETYPEV}" ]; then
			if [ "${VERSIONS}" = "0" ]; then
				echo "${boldon}Updating FreeType${boldoff}"
				doFreeType;
				echo "It is recommended to run \"$0 php n\" after FreeType update."
			elif [ "${VERSIONS}" = "1" ]; then
				echo "${boldon}FreeType ${FREETYPEV} to ${FREETYPE_VER} update is available.${boldoff}"
				echo ""
			elif [ "${VERSIONS}" = "json" ]; then
				printf "\t\"freetype\": {\n"
				printf "\t\t\"name\": \"FreeType\",\n"
				printf "\t\t\"current\": \"${FREETYPEV}\",\n"
				printf "\t\t\"offered\": \"${FREETYPE_VER}\"\n"
				printf "\t},\n"
			fi
		fi
	fi

	if [ "${AWSTATS_OPT}" = "yes" ] && [ "${AWSTATS_VER}" != "0" ]; then
		if [ "${VERSIONS}" = "1" ]; then
			echo "Latest version of AWstats: ${AWSTATS_VER}"
		fi
		AWSTATSV=0
		if [ -e /usr/local/awstats ]; then
			AWSTATSV="`ls -ld /usr/local/awstats | cut -d\> -f2 | cut -d- -f2`"
			if [ "${VERSIONS}" = "1" ]; then
				echo "Installed version of AWstats: ${AWSTATSV}"
				echo ""
			fi
		fi

		if [ "${AWSTATS_VER}" != "${AWSTATSV}" ]; then
			if [ "${VERSIONS}" = "0" ]; then
				echo "${boldon}Updating AWstats.${boldoff}"
				doawstats;
			elif [ "${VERSIONS}" = "1" ]; then
				echo "${boldon}AWstats ${AWSTATSV} to ${AWSTATS_VER} update is available.${boldoff}"
				echo ""
			elif [ "${VERSIONS}" = "json" ]; then
				printf "\t\"awstats\": {\n"
				printf "\t\t\"name\": \"AWstats\",\n"
				printf "\t\t\"current\": \"${AWSTATSV}\",\n"
				printf "\t\t\"offered\": \"${AWSTATS_VER}\"\n"
				printf "\t},\n"
			fi
		fi
	fi
	
	if [ "${DOVECOT_OPT}" = "yes" ] && [ "${DOVECOT_VER}" != "0" ]; then
		if [ -e /usr/sbin/dovecot ]; then
			DOVECOTV="`/usr/sbin/dovecot --version`"
			if [ "${VERSIONS}" = "1" ]; then
				echo "Latest version of dovecot: ${DOVECOT_VER}"
				echo "Installed version of dovecot: ${DOVECOTV}"
				echo ""
			fi
			if [ "${DOVECOT_VER}" != "${DOVECOTV}" ]; then
				if [ "${VERSIONS}" = "0" ]; then
					echo "${boldon}Updating Dovecot${boldoff}"
					doDovecot;
				elif [ "${VERSIONS}" = "1" ]; then
					echo "${boldon}Dovecot ${DOVECOTV} to ${DOVECOT_VER} update is available.${boldoff}"
					echo ""
				elif [ "${VERSIONS}" = "json" ]; then
					printf "\t\"dovecot\": {\n"
					printf "\t\t\"name\": \"Dovecot\",\n"
					printf "\t\t\"current\": \"${DOVECOTV}\",\n"
					printf "\t\t\"offered\": \"${DOVECOT_VER}\"\n"
					printf "\t},\n"
				fi
			fi
		fi
	fi
	
	if [ "${EXIM_OPT}" = "yes" ] && [ "${EXIM_VER}" != "0" ]; then
		if [ -e /usr/sbin/exim ]; then
			EXIMV="`/usr/sbin/exim -bV | grep -m1 'built' | head -n1 | awk '{ print $3 }'`"
			if [ "${VERSIONS}" = "1" ]; then
				echo "Latest version of Exim: ${EXIM_VER}"
				echo "Installed version of Exim: ${EXIMV}"
				echo ""
			fi
			if [ "${EXIM_VER}" != "${EXIMV}" ]; then
				if [ "${VERSIONS}" = "0" ]; then
					echo "${boldon}Updating Exim${boldoff}"
					doExim
				elif [ "${VERSIONS}" = "1" ]; then
					echo "${boldon}Exim ${EXIMV} to ${EXIM_VER} update is available.${boldoff}"
					echo ""
				elif [ "${VERSIONS}" = "json" ]; then
					printf "\t\"exim\": {\n"
					printf "\t\t\"name\": \"Exim\",\n"
					printf "\t\t\"current\": \"${EXIMV}\",\n"
					printf "\t\t\"offered\": \"${EXIM_VER}\"\n"
					printf "\t},\n"
				fi
			fi
		fi
	fi

	if [ "${SPAMASSASSIN_OPT}" = "yes" ] && [ "${SPAMASSASSIN_VER}" != "0" ]; then
		if [ -e /usr/bin/spamd ]; then
			SPAMASSASSINV=`/usr/bin/spamd --version | grep -m1 'version' | awk '{print $4}'`
			if [ "${VERSIONS}" = "1" ]; then
				echo "Latest version of SpamAssassin: ${SPAMASSASSIN_VER}"
				echo "Installed version of SpamAssassin: ${SPAMASSASSINV}"
				echo ""
			fi
			if [ "${SPAMASSASSIN_VER}" != "${SPAMASSASSINV}" ]; then
				if [ "${VERSIONS}" = "0" ]; then
					echo "${boldon}Updating SpamAssassin.${boldoff}"
					dospamassassin;
				elif [ "${VERSIONS}" = "1" ]; then
					echo "${boldon}SpamAssassin ${SPAMASSASSINV} to ${SPAMASSASSIN_VER} update is available.${boldoff}"
					echo ""
				elif [ "${VERSIONS}" = "json" ]; then
					printf "\t\"spamassasin\": {\n"
					printf "\t\t\"name\": \"SpamAssassin\",\n"
					printf "\t\t\"current\": \"${SPAMASSASSINV}\",\n"
					printf "\t\t\"offered\": \"${SPAMASSASSIN_VER}\"\n"
					printf "\t},\n"
				fi
			fi
		fi
	fi
	
	if [ "${CLAMAV_OPT}" = "yes" ] && [ "${CLAMAV_VER}" != "0" ]; then
		CLAMAVV=0
		if [ -e /usr/local/sbin/clamd ]; then
			CLAMAVV=`/usr/local/sbin/clamd --version | cut -d/ -f1 | awk '{print $2}'`
		fi
		if [ "${VERSIONS}" = "1" ]; then
			echo "Latest version of ClamAV: ${CLAMAV_VER}"
			echo "Installed version of ClamAV: ${CLAMAVV}"
			echo ""
		fi
		if [ "${CLAMAV_VER}" != "${CLAMAVV}" ]; then
			if [ "${VERSIONS}" = "0" ]; then
				echo "${boldon}Updating ClamAV.${boldoff}"
				doclamav;
			elif [ "${VERSIONS}" = "1" ]; then
				echo "${boldon}ClamAV ${CLAMAVV} to ${CLAMAV_VER} update is available.${boldoff}"
				echo ""	
			elif [ "${VERSIONS}" = "json" ]; then
				printf "\t\"clamav\": {\n"
				printf "\t\t\"name\": \"ClamAV\",\n"
				printf "\t\t\"current\": \"${CLAMAVV}\",\n"
				printf "\t\t\"offered\": \"${CLAMAV_VER}\"\n"
				printf "\t},\n"
			fi
		fi
	fi

# Mailman is not yet supported
#	if [ "${MAILMAN_OPT}" = "yes" ]; then
#		MAILMANV=0
#		if [ -e /usr/local/mailman/bin/version ]; then
#			MAILMANV=`/usr/local/mailman/bin/version | awk '{print $4}'`
#		fi
#		if [ "${VERSIONS}" = "1" ]; then
#			echo "Latest version of Mailman: ${MAILMAN_VER}"
#			echo "Installed version of Mailman: ${MAILMANV}"
#			echo ""
#		fi
#		if [ "${MAILMAN_VER}" != "${MAILMANV}" ]; then
#			if [ "${VERSIONS}" = "0" ]; then
#				echo "${boldon}Updating Mailman.${boldoff}"
#				domailman;
#			elif [ "${VERSIONS}" = "1" ]; then
#				echo "${boldon}Mailman ${MAILMANV} to ${MAILMAN_VER} update is available.${boldoff}"
#				echo ""
#			fi
#		fi
#	fi

	if [ "${MYSQL_INST_OPT}" != "no" ] && [ -e $MYSQL_BIN ] && [ "${MYSQL_VER}" != "0" ]; then
	#	UPDATED_MYSQL=0
		if [ "${OS_MARIADB}" = "0" ]; then
			MYSQLV="`$MYSQL_BIN --version | awk '{ print $5 }' | cut -d , -f1 | cut -d- -f1`"
			if [ "${VERSIONS}" = "1" ]; then
				echo "Latest version of ${MYSQLNAME}: ${MYSQL_VER}"
				echo "Installed version of ${MYSQLNAME}: ${MYSQLV}"
				echo ""
			fi
			if [ "${MYSQL_VER}" != "${MYSQLV}" ]; then
				if [ "${VERSIONS}" = "0" ]; then
					echo "${boldon}Updating ${MYSQLNAME}.${boldoff}"
					doMySQL;
#					UPDATED_MYSQL=1
				elif [ "${VERSIONS}" = "1" ]; then
					echo "${boldon}${MYSQLNAME} ${MYSQLV} to ${MYSQL_VER} update is available.${boldoff}"
					echo ""
				elif [ "${VERSIONS}" = "json" ]; then
					printf "\t\"mysql\": {\n"
					printf "\t\t\"name\": \"${MYSQLNAME}\",\n"
					printf "\t\t\"current\": \"${MYSQLV}\",\n"
					printf "\t\t\"offered\": \"${MYSQL_VER}\"\n"
					printf "\t},\n"
				fi
			fi
		else
			MYSQLV="`$MYSQL_BIN --version | awk '{ print $5 }' | cut -d , -f1 | cut -d- -f1`"
			if [ "${VERSIONS}" = "1" ]; then
				echo "Latest version of ${MYSQLNAME}: ${MARIADB_VER}"
				echo "Installed version of ${MYSQLNAME}: ${MYSQLV}"
				echo ""
			fi
			if [ "${MARIADB_VER}" != "${MYSQLV}" ]; then
				if [ "${VERSIONS}" = "0" ]; then
					echo "${boldon}Updating ${MYSQLNAME}.${boldoff}"
					doMySQL;
#					UPDATED_MYSQL=1
				elif [ "${VERSIONS}" = "1" ]; then
					echo "${boldon}${MYSQLNAME} ${MYSQLV} to ${MARIADB_VER} update is available.${boldoff}"
					echo ""
				elif [ "${VERSIONS}" = "json" ]; then
					printf "\t\"mysql\": {\n"
					printf "\t\t\"name\": \"${MYSQLNAME}\",\n"
					printf "\t\t\"current\": \"${MYSQLV}\",\n"
					printf "\t\t\"offered\": \"${MARIADB_VER}\"\n"
					printf "\t},\n"
				fi
			fi
		fi
	fi
	
	HAS_CLI=no
	if [ "${PHP1_MODE_OPT}" = "mod_php" ]; then
		HAS_CLI=yes
	elif [ "${PHP2_MODE_OPT}" = "mod_php" ] && [ "${PHP2_RELEASE_OPT}" != "no" ]; then
		HAS_CLI=yes
	fi
	
	HAS_CGI=no
	if [ "${PHP1_MODE_OPT}" = "php-fpm" ]; then
		HAS_CGI=yes
	elif [ "${PHP2_MODE_OPT}" = "php-fpm" ] && [ "${PHP2_RELEASE_OPT}" != "no" ]; then
		HAS_CGI=yes
	fi
	
	if [ "${PHP1_MODE_OPT}" = "suphp" ]; then
		HAS_CGI=yes
	elif [ "${PHP2_MODE_OPT}" = "suphp" ] && [ "${PHP2_RELEASE_OPT}" != "no" ]; then
		HAS_CGI=yes
	fi
	
	if [ "${PHP1_MODE_OPT}" = "fastcgi" ]; then
		HAS_CGI=yes
	elif [ "${PHP2_MODE_OPT}" = "fastcgi" ] && [ "${PHP2_RELEASE_OPT}" != "no" ]; then
		HAS_CGI=yes
	fi
	
	if [ "${PHP1_MODE_OPT}" = "lsphp" ]; then
		HAS_CGI=yes
	elif [ "${PHP2_MODE_OPT}" = "lsphp" ] && [ "${PHP2_RELEASE_OPT}" != "no" ]; then
		HAS_CGI=yes
	fi

	if [ "${HAS_CGI}" = "yes" ]; then
		if [ "${PHP53_VER}" != "0" ]; then
			if [ "${HAVE_FPM53_CGI}" = "yes" ] || [ "${HAVE_SUPHP53_CGI}" = "yes" ] || [ "${HAVE_FCGID53}" = "yes" ] || [ "${HAVE_LSPHP53}" = "yes" ]; then
				if [ "${PHP1_RELEASE_OPT}" = "5.3" ] && [ "${PHP1_MODE_OPT}" != "mod_php" ]; then
					SHOW_VERSION="yes"
				fi
				if [ "${PHP2_RELEASE_OPT}" = "5.3" ] && [ "${PHP2_MODE_OPT}" != "mod_php" ]; then
					SHOW_VERSION="yes"
				fi
				if [ "${SHOW_VERSION}" = "yes" ]; then
					if [ -e /usr/local/php53/bin/php53 ]; then
						PHP53VCGI="`/usr/local/php53/bin/php53 -v | grep -m1 'built' | awk '{ print $2 }'`"
						if [ "${VERSIONS}" = "1" ]; then
							echo "Latest version of PHP 5.3: ${PHP53_VER}"
							echo "Installed version of PHP 5.3: ${PHP53VCGI}"
							echo ""
						fi
						if [ "${PHP53_VER}" != "${PHP53VCGI}" ]; then
							if [ "${HAVE_SUPHP_CGI}" = "yes" ]; then
								BUILD_PHP_COMMAND="php_expert 5.3 suphp";
							elif [ "${HAVE_FPM_CGI}" = "yes" ]; then
								BUILD_PHP_COMMAND="php_expert 5.3 php-fpm";
							elif [ "${HAVE_FCGID}" = "yes" ]; then
								BUILD_PHP_COMMAND="php_expert 5.3 fastcgi";
							elif [ "${HAVE_LSPHP}" = "yes" ]; then
								BUILD_PHP_COMMAND="php_expert 5.3 lsphp";
							fi
							if [ "${VERSIONS}" = "0" ]; then
								echo "${boldon}Updating PHP 5.3${boldoff}"
								./build ${BUILD_PHP_COMMAND}
							elif [ "${VERSIONS}" = "1" ]; then
								echo "${boldon}PHP 5.3: ${PHP53VCGI} to ${PHP53_VER} update is available.${boldoff}"
								echo ""
							elif [ "${VERSIONS}" = "json" ]; then
								printf "\t\"${BUILD_PHP_COMMAND}\": {\n"
								printf "\t\t\"name\": \"PHP 5.3\",\n"
								printf "\t\t\"current\": \"${PHP53VCGI}\",\n"
								printf "\t\t\"offered\": \"${PHP53_VER}\"\n"
								printf "\t},\n"
							fi
						fi
					fi
				fi
			fi
		fi
		
		if [ "${PHP54_VER}" != "0" ]; then
			if [ "${HAVE_FPM54_CGI}" = "yes" ] || [ "${HAVE_SUPHP54_CGI}" = "yes" ] || [ "${HAVE_FCGID54}" = "yes" ] || [ "${HAVE_LSPHP54}" = "yes" ]; then
				if [ "${PHP1_RELEASE_OPT}" = "5.4" ] && [ "${PHP1_MODE_OPT}" != "mod_php" ]; then
					SHOW_VERSION="yes"
				fi
				if [ "${PHP2_RELEASE_OPT}" = "5.4" ] && [ "${PHP2_MODE_OPT}" != "mod_php" ]; then
					SHOW_VERSION="yes"
				fi
				if [ "${SHOW_VERSION}" = "yes" ]; then
					if [ -e /usr/local/php54/bin/php54 ]; then
						PHP54VCGI="`/usr/local/php54/bin/php54 -v | grep -m1 'built' | awk '{ print $2 }'`"
						if [ "${VERSIONS}" = "1" ]; then
							echo "Latest version of PHP 5.4: ${PHP54_VER}"
							echo "Installed version of PHP 5.4: ${PHP54VCGI}"
							echo ""
						fi
						if [ "${PHP54_VER}" != "${PHP54VCGI}" ]; then
							if [ "${HAVE_SUPHP_CGI}" = "yes" ]; then
								BUILD_PHP_COMMAND="php_expert 5.4 suphp";
							elif [ "${HAVE_FPM_CGI}" = "yes" ]; then
								BUILD_PHP_COMMAND="php_expert 5.4 php-fpm";
							elif [ "${HAVE_FCGID}" = "yes" ]; then
								BUILD_PHP_COMMAND="php_expert 5.4 fastcgi";	
							elif [ "${HAVE_LSPHP}" = "yes" ]; then
								BUILD_PHP_COMMAND="php_expert 5.4 lsphp";
							fi
							if [ "${VERSIONS}" = "0" ]; then
								echo "${boldon}Updating PHP 5.4 ${boldoff}"
								./build ${BUILD_PHP_COMMAND}
							elif [ "${VERSIONS}" = "1" ]; then
								echo "${boldon}PHP 5.4: ${PHP54VCGI} to ${PHP54_VER} update is available.${boldoff}"
								echo ""
							elif [ "${VERSIONS}" = "json" ]; then
								printf "\t\"${BUILD_PHP_COMMAND}\": {\n"
								printf "\t\t\"name\": \"PHP 5.4\",\n"
								printf "\t\t\"current\": \"${PHP54VCGI}\",\n"
								printf "\t\t\"offered\": \"${PHP54_VER}\"\n"
								printf "\t},\n"
							fi
						fi
					fi
				fi
			fi
		fi
		
		if [ "${PHP55_VER}" != "0" ]; then
			if [ "${HAVE_FPM55_CGI}" = "yes" ] || [ "${HAVE_SUPHP55_CGI}" = "yes" ] || [ "${HAVE_FCGID55}" = "yes" ] || [ "${HAVE_LSPHP55}" = "yes" ]; then
				if [ "${PHP1_RELEASE_OPT}" = "5.5" ] && [ "${PHP1_MODE_OPT}" != "mod_php" ]; then
					SHOW_VERSION="yes"
				fi
				if [ "${PHP2_RELEASE_OPT}" = "5.5" ] && [ "${PHP2_MODE_OPT}" != "mod_php" ]; then
					SHOW_VERSION="yes"
				fi
				if [ "${SHOW_VERSION}" = "yes" ]; then
					if [ -e /usr/local/php55/bin/php55 ]; then
						PHP55VCGI="`/usr/local/php55/bin/php55 -v | grep -m1 'built' | awk '{ print $2 }'`"
						if [ "${VERSIONS}" = "1" ]; then
							echo "Latest version of PHP 5.5: ${PHP55_VER}"
							echo "Installed version of PHP 5.5: ${PHP55VCGI}"
							echo ""
						fi
						if [ "${PHP55_VER}" != "${PHP55VCGI}" ]; then
							if [ "${HAVE_SUPHP_CGI}" = "yes" ]; then
								BUILD_PHP_COMMAND="php_expert 5.5 suphp";
							elif [ "${HAVE_FPM_CGI}" = "yes" ]; then
								BUILD_PHP_COMMAND="php_expert 5.5 php-fpm";
							elif [ "${HAVE_FCGID}" = "yes" ]; then
								BUILD_PHP_COMMAND="php_expert 5.5 fastcgi";
							elif [ "${HAVE_LSPHP}" = "yes" ]; then
								BUILD_PHP_COMMAND="php_expert 5.5 lsphp";
							fi
							if [ "${VERSIONS}" = "0" ]; then
								echo "${boldon}Updating PHP 5.5 ${boldoff}"
								./build ${BUILD_PHP_COMMAND}
							elif [ "${VERSIONS}" = "1" ]; then
								echo "${boldon}PHP 5.5: ${PHP55VCGI} to ${PHP55_VER} update is available.${boldoff}"
								echo ""
							elif [ "${VERSIONS}" = "json" ]; then
								printf "\t\"${BUILD_PHP_COMMAND}\": {\n"
								printf "\t\t\"name\": \"PHP 5.5\",\n"
								printf "\t\t\"current\": \"${PHP55VCGI}\",\n"
								printf "\t\t\"offered\": \"${PHP55_VER}\"\n"
								printf "\t},\n"
							fi
						fi
					fi
				fi
			fi
		fi
		
		if [ "${PHP56_VER}" != "0" ]; then
			if [ "${HAVE_FPM56_CGI}" = "yes" ] || [ "${HAVE_SUPHP56_CGI}" = "yes" ] || [ "${HAVE_FCGID56}" = "yes" ] || [ "${HAVE_LSPHP56}" = "yes" ]; then
				SHOW_VERSION="no"
				if [ "${PHP1_RELEASE_OPT}" = "5.6" ] && [ "${PHP1_MODE_OPT}" != "mod_php" ]; then
					SHOW_VERSION="yes"
				fi
				if [ "${PHP2_RELEASE_OPT}" = "5.6" ] && [ "${PHP2_MODE_OPT}" != "mod_php" ]; then
					SHOW_VERSION="yes"
				fi
				if [ "${SHOW_VERSION}" = "yes" ]; then
					if [ -e /usr/local/php56/bin/php56 ]; then
						PHP56VCGI="`/usr/local/php56/bin/php56 -v | grep -m1 'built' | awk '{ print $2 }'`"
						if [ "${VERSIONS}" = "1" ]; then
							echo "Latest version of PHP 5.6: ${PHP56_VER}"
							echo "Installed version of PHP 5.6: ${PHP56VCGI}"
							echo ""
						fi
						if [ "${PHP56_VER}" != "${PHP56VCGI}" ]; then
							if [ "${HAVE_SUPHP_CGI}" = "yes" ]; then
								BUILD_PHP_COMMAND="php_expert 5.6 suphp";
							elif [ "${HAVE_FPM_CGI}" = "yes" ]; then
								BUILD_PHP_COMMAND="php_expert 5.6 php-fpm";
							elif [ "${HAVE_FCGID}" = "yes" ]; then
								BUILD_PHP_COMMAND="php_expert 5.6 fastcgi";
							elif [ "${HAVE_LSPHP}" = "yes" ]; then
								BUILD_PHP_COMMAND="php_expert 5.6 lsphp";
							fi
							if [ "${VERSIONS}" = "0" ]; then
								echo "${boldon}Updating PHP 5.6 ${boldoff}"
								./build ${BUILD_PHP_COMMAND}
							elif [ "${VERSIONS}" = "1" ]; then
								echo "${boldon}PHP 5.6: ${PHP56VCGI} to ${PHP56_VER} update is available.${boldoff}"
								echo ""
							elif [ "${VERSIONS}" = "json" ]; then
								printf "\t\"${BUILD_PHP_COMMAND}\": {\n"
								printf "\t\t\"name\": \"PHP 5.6\",\n"
								printf "\t\t\"current\": \"${PHP56VCGI}\",\n"
								printf "\t\t\"offered\": \"${PHP56_VER}\"\n"
								printf "\t},\n"
							fi
						fi
					fi
				fi
			fi
		fi
	fi
	
	if [ "${HAS_CLI}" = "yes" ]; then
		if [ -e /usr/local/bin/php ]; then
			PHPVCLI="`/usr/local/bin/php -v | grep -m1 'built' | awk '{ print $2 }'`"
			if [ "${VERSIONS}" = "1" ]; then
				SHOWINSTALLED="0";
				if [ "${HAVE_CLI53}" = "yes" ] && [ "${PHP53_VER}" != "0" ]; then
					echo "Latest version of PHP (mod_php): ${PHP53_VER}"
					SHOWINSTALLED="1";
				elif [ "${HAVE_CLI54}" = "yes" ] && [ "${PHP54_VER}" != "0" ]; then
					echo "Latest version of PHP (mod_php): ${PHP54_VER}"
					SHOWINSTALLED="1";
				elif [ "${HAVE_CLI55}" = "yes" ] && [ "${PHP55_VER}" != "0" ]; then
					echo "Latest version of PHP (mod_php): ${PHP55_VER}"
					SHOWINSTALLED="1";
				elif [ "${HAVE_CLI56}" = "yes" ] && [ "${PHP56_VER}" != "0" ]; then
					echo "Latest version of PHP (mod_php): ${PHP56_VER}"
					SHOWINSTALLED="1";
				fi
				if [ "${SHOWINSTALLED}" = "1" ]; then
					echo "Installed version of PHP (mod_php): ${PHPVCLI}"
					echo ""
				fi
			fi
			if [ "${HAVE_CLI53}" = "yes" ] && [ "${PHP53_VER}" != "0" ]; then
				if [ "${PHP53_VER}" != "${PHPVCLI}" ]; then
					BUILD_PHP_COMMAND="php_expert 5.3 mod_php"
					if [ "${VERSIONS}" = "0" ]; then
						echo "${boldon}Updating PHP 5.3 (mod_php)${boldoff}"
						./build ${BUILD_PHP_COMMAND}
						if [ "${WEBSERVER_OPT}" = "apache" ]; then
							control_service httpd restart
						elif [ "${WEBSERVER_OPT}" = "litespeed" ]; then
							#No systemd available for litespeed yet
							${INITDDIR}/litespeed restart
						fi
					elif [ "${VERSIONS}" = "1" ]; then
						echo "${boldon}PHP 5.3 (mod_php) ${PHPVCLI} to ${PHP53_VER} update is available.${boldoff}"
						echo ""
					elif [ "${VERSIONS}" = "json" ]; then
						printf "\t\"${BUILD_PHP_COMMAND}\": {\n"
						printf "\t\t\"name\": \"PHP 5.3 (mod_php)\",\n"
						printf "\t\t\"current\": \"${PHPVCLI}\",\n"
						printf "\t\t\"offered\": \"${PHP53_VER}\"\n"
						printf "\t},\n"
					fi
				fi
			elif [ "${HAVE_CLI54}" = "yes" ] && [ "${PHP54_VER}" != "0" ]; then
				if [ "${PHP54_VER}" != "${PHPVCLI}" ]; then
					BUILD_PHP_COMMAND="php_expert 5.4 mod_php"
					if [ "${VERSIONS}" = "0" ]; then
						echo "${boldon}Updating PHP 5.4 (mod_php)${boldoff}"
						./build ${BUILD_PHP_COMMAND}
						if [ "${WEBSERVER_OPT}" = "apache" ]; then
							control_service httpd restart
						elif [ "${WEBSERVER_OPT}" = "litespeed" ]; then
							#No systemd available for litespeed yet
							${INITDDIR}/litespeed restart
						fi
					elif [ "${VERSIONS}" = "1" ]; then
						echo "${boldon}PHP 5.4 (mod_php) ${PHPVCLI} to ${PHP54_VER} update is available.${boldoff}"
						echo ""
					elif [ "${VERSIONS}" = "json" ]; then
						printf "\t\"${BUILD_PHP_COMMAND}\": {\n"
						printf "\t\t\"name\": \"PHP 5.4 (mod_php)\",\n"
						printf "\t\t\"current\": \"${PHPVCLI}\",\n"
						printf "\t\t\"offered\": \"${PHP54_VER}\"\n"
						printf "\t},\n"
					fi
				fi
			elif [ "${HAVE_CLI55}" = "yes" ] && [ "${PHP55_VER}" != "0" ]; then
				if [ "${PHP55_VER}" != "${PHPVCLI}" ]; then
					BUILD_PHP_COMMAND="php_expert 5.5 mod_php"
					if [ "${VERSIONS}" = "0" ]; then
						echo "${boldon}Updating PHP 5.5 (mod_php)${boldoff}"
						./build ${BUILD_PHP_COMMAND}
						if [ "${WEBSERVER_OPT}" = "apache" ]; then
							control_service httpd restart
						elif [ "${WEBSERVER_OPT}" = "litespeed" ]; then
							#No systemd available for litespeed yet
							${INITDDIR}/litespeed restart
						fi
					elif [ "${VERSIONS}" = "1" ]; then
						echo "${boldon}PHP 5.5 (mod_php) ${PHPVCLI} to ${PHP55_VER} update is available.${boldoff}"
						echo ""
					elif [ "${VERSIONS}" = "json" ]; then
						printf "\t\"${BUILD_PHP_COMMAND}\": {\n"
						printf "\t\t\"name\": \"PHP 5.5 (mod_php)\",\n"
						printf "\t\t\"current\": \"${PHPVCLI}\",\n"
						printf "\t\t\"offered\": \"${PHP55_VER}\"\n"
						printf "\t},\n"
					fi
				fi
			elif [ "${HAVE_CLI56}" = "yes" ] && [ "${PHP56_VER}" != "0" ]; then
				if [ "${PHP56_VER}" != "${PHPVCLI}" ]; then
					BUILD_PHP_COMMAND="php_expert 5.6 mod_php"
					if [ "${VERSIONS}" = "0" ]; then
						echo "${boldon}Updating PHP 5.6 (mod_php)${boldoff}"
						./build ${BUILD_PHP_COMMAND}
						if [ "${WEBSERVER_OPT}" = "apache" ]; then
							control_service httpd restart
						elif [ "${WEBSERVER_OPT}" = "litespeed" ]; then
							#No systemd available for litespeed yet
							${INITDDIR}/litespeed restart
						fi
					elif [ "${VERSIONS}" = "1" ]; then
						echo "${boldon}PHP 5.6 (mod_php) ${PHPVCLI} to ${PHP56_VER} update is available.${boldoff}"
						echo ""
					elif [ "${VERSIONS}" = "json" ]; then
						printf "\t\"${BUILD_PHP_COMMAND}\": {\n"
						printf "\t\t\"name\": \"PHP 5.6 (mod_php)\",\n"
						printf "\t\t\"current\": \"${PHPVCLI}\",\n"
						printf "\t\t\"offered\": \"${PHP56_VER}\"\n"
						printf "\t},\n"
					fi
				fi
			fi
		fi
	fi
	if [ "${HAVE_SUPHP_CGI}" = "yes" ] && [ "${SUPHP_VER}" != "0" ]; then
		if [ -e /usr/local/suphp/sbin/suphp ]; then
			SUPHPV="`/usr/local/suphp/sbin/suphp 2>&1 | grep -m1 'suPHP version' | awk '{print $3}'`"
			if [ "${VERSIONS}" = "1" ]; then
				echo "Latest version of suPHP: ${SUPHP_VER}"
				echo "Installed version of suPHP: ${SUPHPV}"
				echo ""
			fi
			if [ "${SUPHP_VER}" != "${SUPHPV}" ]; then
				if [ "${VERSIONS}" = "0" ]; then
					echo "${boldon}Updating suPHP.${boldoff}"
					doSuPhp;
				elif [ "${VERSIONS}" = "1" ]; then
					echo "${boldon}suPHP ${SUPHPV} to ${SUPHP_VER} update is available.${boldoff}"
					echo ""
				elif [ "${VERSIONS}" = "json" ]; then
					printf "\t\"suphp\": {\n"
					printf "\t\t\"name\": \"suPHP\",\n"
					printf "\t\t\"current\": \"${SUPHPV}\",\n"
					printf "\t\t\"offered\": \"${SUPHP_VER}\"\n"
					printf "\t},\n"
				fi
			fi
		fi
	fi
	
	if [ "${ROUNDCUBE_OPT}" = "yes" ] && [ "${ROUNDCUBE_VER}" != "0" ]; then
		if [ "${VERSIONS}" = "1" ]; then
			echo "Latest version of RoundCube webmail: ${ROUNDCUBE_VER}"
		fi
		ROUNDCUBEV=0
		if [ -e ${WWWDIR}/roundcube ]; then
			ROUNDCUBEV="`roundcube_version`"
			if [ "${VERSIONS}" = "1" ]; then
				echo "Installed version of RoundCube webmail: ${ROUNDCUBEV}"
				echo ""
			fi
		fi
		if [ "${ROUNDCUBE_VER}" != "${ROUNDCUBEV}" ]; then
			if [ "${VERSIONS}" = "0" ] || [ "${VERSIONS}" = "2" ]; then
				echo "${boldon}Updating RoundCube webmail.${boldoff}"
				doroundcube;
			elif [ "${VERSIONS}" = "1" ]; then
				echo "${boldon}RoundCube webmail ${ROUNDCUBEV} to ${ROUNDCUBE_VER} update is available.${boldoff}"
				echo ""
			elif [ "${VERSIONS}" = "json" ]; then
				printf "\t\"roundcube\": {\n"
				printf "\t\t\"name\": \"RoundCube\",\n"
				printf "\t\t\"current\": \"${ROUNDCUBEV}\",\n"
				printf "\t\t\"offered\": \"${ROUNDCUBE_VER}\"\n"
				printf "\t},\n"
			fi
		fi
	fi

	if [ "${PHPMYADMIN_OPT}" = "yes" ] && [ "${PHPMYADMIN_VER}" != "0" ]; then
		if [ "${VERSIONS}" = "1" ]; then
			echo "Latest version of phpMyAdmin: ${PHPMYADMIN_VER}"
		fi
		PHPMYADMINV=0
		if [ -e ${WWWDIR}/phpMyAdmin ]; then
			PHPMYADMINV="`ls -ld ${WWWDIR}/phpMyAdmin | cut -d\> -f2 | cut -d- -f2,3,4`"
			if [ "${VERSIONS}" = "1" ]; then
				echo "Installed version of phpMyAdmin: ${PHPMYADMINV}"
				echo ""
			fi
		fi
		if [ "${PHPMYADMIN_VER}" != "${PHPMYADMINV}" ]; then
			if [ "${VERSIONS}" = "0" ] || [ "${VERSIONS}" = "2" ]; then
				echo "${boldon}Updating phpMyAdmin.${boldoff}"
				dophpMyAdmin;
			elif [ "${VERSIONS}" = "1" ]; then
				echo "${boldon}phpMyAdmin ${PHPMYADMINV} to ${PHPMYADMIN_VER} update is available.${boldoff}"
				echo ""
			elif [ "${VERSIONS}" = "json" ]; then
				printf "\t\"phpmyadmin\": {\n"
				printf "\t\t\"name\": \"phpMyAdmin\",\n"
				printf "\t\t\"current\": \"${PHPMYADMINV}\",\n"
				printf "\t\t\"offered\": \"${PHPMYADMIN_VER}\"\n"
				printf "\t},\n"
			fi
		fi
	fi

	if [ "${SQUIRRELMAIL_OPT}" = "yes" ] && [ "${SQUIRRELMAIL_VER}" != "0" ]; then
		if [ "${VERSIONS}" = "1" ]; then
			echo "Latest version of SquirrelMail: ${SQUIRRELMAIL_VER}"
		fi
		SQUIRRELMAILV=0
		if [ -e ${WWWDIR}/squirrelmail ]; then
			SQUIRRELMAILV="`ls -ld ${WWWDIR}/squirrelmail | cut -d\> -f2 | cut -d- -f2,3`"
			if [ "${VERSIONS}" = "1" ]; then
				echo "Installed version of SquirrelMail: ${SQUIRRELMAILV}"
				echo ""
			fi
		fi
		if [ "${SQUIRRELMAIL_VER}" != "${SQUIRRELMAILV}" ]; then
			if [ "${VERSIONS}" = "0" ] || [ "${VERSIONS}" = "2" ]; then
				echo "${boldon}Updating SquirrelMail webmail.${boldoff}"
				doSquirrelmail;
			elif [ "${VERSIONS}" = "1" ]; then
				echo "${boldon}SquirrelMail webmail ${SQUIRRELMAILV} to ${SQUIRRELMAIL_VER} update is available.${boldoff}"
				echo ""
			elif [ "${VERSIONS}" = "json" ]; then
				printf "\t\"squirrelmail\": {\n"
				printf "\t\t\"name\": \"SquirrelMail\",\n"
				printf "\t\t\"current\": \"${SQUIRRELMAILV}\",\n"
				printf "\t\t\"offered\": \"${SQUIRRELMAIL_VER}\"\n"
				printf "\t},\n"
			fi
		fi
	fi
	
	if [ "${VERSIONS}" = "1" ]; then
		echo "If you want to update all the available versions run: ${boldon}$0 update_versions${boldoff}"
	elif [ "${VERSIONS}" = "json" ]; then
		echo "}";
	fi
}

doVersions_ajax()
{
	echo "HTTP/1.1 200 OK";
	echo "Content-Type: text/plain";
	echo "";

	COUNT=`doVersions 1 | grep -c 'is available'`
	if [ "${COUNT}" -gt 0 ]; then
		echo "document.getElementById(\"cb_updates\").innerHTML=\"${COUNT}\";";
		echo "document.getElementById(\"cb_updates\").style.visibility=\"visible\";";
	fi
}

####################################################

SPEED_FILE_SMALL=10.kb
SPEED_FILE_LARGE=100.kb
#max time for small file test allowed to proceed with large file test.
LARGE_TEST_MAX=25
SPEED_VERBOSE=1
BEST=0
BEST_SEVER=""
KB=1024
MB=1048576
GB=1073741824

speedtest()
{
	${WGET} -O /dev/null --timeout=2 --tries=1 http://${1}/services/${2} 2>&1 | grep saved | cut -d\( -f2 | cut -d\) -f1
}
 
test_server()
{
	i=$1
	VALUE=0
	SPEED=`speedtest $i $2`;

	#can be MB/s or KB/s or B/s

	if [ "${SPEED}" = "" ]; then
		echo "$i is too slow, skipping.";
		continue;
	fi

	NUM=`echo $SPEED | cut -d\  -f1`
	TYPE=`echo $SPEED | cut -d\  -f2`

	case "$TYPE" in
		B/s)    VALUE=$NUM;
			;;
		KB/s)   VALUE=`perl -e "print $KB * $NUM"`;
			;;
		MB/s)   VALUE=`perl -e "print $MB * $NUM"`;
			;;
		GB/s)   VALUE=`perl -e "print $GB * $NUM"`;
			;;
		*)      echo "Unknown speed type $TYPE";
			;;
	esac

	#chop off any decimal bytes.. we dont care about 0.5 byte/second
	VALUE=`echo $VALUE | cut -d. -f1`

	if [ ${SPEED_VERBOSE} -eq 1 ]; then
		printf "$VALUE B/s \t- $i\n"
	fi

	if [ "${VALUE}" -gt "${BEST}" ]; then
		BEST=$VALUE;
		BEST_SERVER=$i
	fi
}
 
 
speed_test()
{
	if [ ${SPEED_VERBOSE} -eq 1 ]; then
		echo "Testing with file $1:";
	fi
	BEST=0
	BEST_SERVER=""
	SPEED_START=`date +%s`
	for s in `cat servers.txt`; do
	{
		test_server $s $1
	};
	done;
	SPEED_END=`date +%s`
	DURATION=`expr $SPEED_END - $SPEED_START`

	if [ ${SPEED_VERBOSE} -eq 1 ]; then
		echo "Total test duration: $DURATION seconds";
		echo "";
	fi
}
 
set_fastest() {

	#quiet mode. Will only output the quickest server.
	if [ "$1" -eq 1 ]; then
		SPEED_VERBOSE=0;
	fi

	getFile servers.txt servers
	DOWNLOADSERVER_SET="files.directadmin.com `awk '{ printf "%s ", $0 }' ${WORKDIR}/servers.txt`"

	speed_test ${SPEED_FILE_SMALL}

	#try and get a more accurate reading with larger file.
	if [ "${DURATION}" -lt ${LARGE_TEST_MAX} ]; then
		speed_test ${SPEED_FILE_LARGE}
	else
		if [ ${SPEED_VERBOSE} -eq 1 ]; then     
			echo "Small file test took longer than ${LARGE_TEST_MAX} seconds.  Not proceeding with large file test.";
		fi
	fi

	if [ ${SPEED_VERBOSE} -eq 1 ]; then
		echo "Fastest server is $BEST_SERVER at $BEST B/s";
	else
		echo "${BEST_SERVER}";
	fi

	if [ "${BEST_SERVER}" != "" ]; then
		setOpt downloadserver ${BEST_SERVER}
	else
		echo "Unable to determine fastest server";
	fi
}

fix_curl_link_for_yum() {
	#check for broken yums on CentOS 6.
	if [ -e /usr/bin/yum ]; then
		BROKEN=`yum --version 2>&1 | head -n 2 | grep -m1 -c CRITICAL`
		if [ "$BROKEN" -eq 1 ]; then
			CURLLIB=/usr/local/lib/libcurl.so.4.2.0
			if [ -e $CURLLIB ]; then
				echo "*** Re-linking curl to fix the yum issue: http://help.directadmin.com/item.php?id=385 ***";
				mv $CURLLIB /root/libcurl.so.4.2.0.moved
				ln -s /usr/lib/libcurl.so $CURLLIB
				echo "*** done curl re-link ***";
			else
				echo "*** yum is broken, but cannot find $CURLLIB.  See http://help.directadmin.com/item.php?id=385 ***";
			fi		
		fi
	fi
}
 
####################################################

doAll() {
        FORCE=1;
	
	if [ "${PCRE_VER}" != "0" ]; then
		doPCRE;
	fi

	checkLibz;

	if [ "${WEBSERVER_OPT}" = "apache" ] || [ "${WEBSERVER_OPT}" = "nginx_apache" ]; then
		doApache2;
		if [ "${HAVE_SUPHP_CGI}" = "yes" ]; then
			doSuPhp;
		fi
		if [ "${HAVE_FCGID}" = "yes" ]; then
			doModFCGID;
		fi
		if [ "${MOD_RUID2_OPT}" = "yes" ]; then
			doModRuid2;
		fi
	fi
	if [ "${WEBSERVER_OPT}" = "litespeed" ]; then
		doLiteSpeed;
	fi
	if [ "${WEBSERVER_OPT}" = "nginx" ] || [ "${WEBSERVER_OPT}" = "nginx_apache" ]; then
		doNginx;
	fi
	
	if [ "${WEBSERVER_OPT}" = "nginx_apache" ]; then
		doModAclr2;
	fi
	
	
#        doAutoconf;

#        doAutomake;

#        doLibtool;

#	doZlib;
	
#	doPigz;
	
	
	doLibJpeg;

	if [ "${PNG_VER}" != "0" ]; then
		doLibPng;
	fi
	
	if [ "${CURL_VER}" != "0" ]; then
		if [ "${CURL_OPT}" = "yes" ]; then
			doCURL;
		fi
	fi

	if [ "${MCRYPT_VER}" != "0" ]; then
		doMCrypt;
        fi

        if [ "${MHASH_VER}" != "0" ]; then
		doMHash;
	fi

	if [ "${FREETYPE_VER}" != "0" ]; then
		doFreeType;
	fi

	if [ "${ICONV_VER}" != "0" ]; then
		doIconv;
        fi

        if [ "${MYSQL_INST_OPT}" != "no" ]; then
                doMySQL;
        fi

	if [ ! -d /usr/local/icu/lib ] && [ "${ICU_VER}" != "0" ]; then
		if [ "${MAINVER}" != "" ]; then
			if [ ${MAINVER} -lt 10 ]; then
				doICU;
			fi
		else 
			doICU;
		fi
	fi

	if [ "${LIBXML2_VER}" != "0" ]; then
		doLibxml2;
	fi

	if [ "${LIBXSLT_VER}" != "0" ]; then
		doLibxslt;
	fi
	
	if [ "${CLAMAV_OPT}" = "yes" ] && [ "${CLAMAV_VER}" != "0" ]; then
		doclamav;
	fi
	
        doPhp n;

	if [ "${WEBALIZER_OPT}" = "yes" ] && [ "${WEBALIZER_VER}" != "0" ]; then
		doWebalizer;
	fi
	
	if [ "${AWSTATS_OPT}" = "yes" ] && [ "${AWSTATS_VER}" != "0" ]; then
		doawstats;
	fi
		
        if [ "${EXIM_OPT}" = "yes" ] && [ "${EXIM_VER}" != "0" ]; then
                doExim;
        fi

        if [ "${DOVECOT_OPT}" = "yes" ] && [ "${DOVECOT_VER}" != "0" ]; then
                doDovecot;
        fi

        if [ "${FTPD_OPT}" = "proftpd" ] && [ "${PROFTPD_VER}" != "0" ]; then
                doProftpd;
        fi
		
	if [ "${FTPD_OPT}" = "pureftpd" ] && [ "${PUREFTPD_VER}" != "0" ]; then
                doPureftpd;
        fi

	if [ "${SPAMASSASSIN_OPT}" = "yes" ] && [ "${SPAMASSASSIN_VER}" != "0" ]; then
		dospamassassin;
	fi
		
# Mailman is not yet supported		
#		if [ "${MAILMAN_OPT}" = "yes" ]; then
#			domailman;
#		fi
		
        chown -R root:${ROOT_GRP} ${WORKDIR}
		
        if [ "${ROUNDCUBE_OPT}" = "yes" ] && [ "${ROUNDCUBE_VER}" != "0" ]; then
                doroundcube;
        fi

        if [ "${PHPMYADMIN_OPT}" = "yes" ] && [ "${PHPMYADMIN_VER}" != "0" ]; then
                dophpMyAdmin;
        fi

        if [ "${SQUIRRELMAIL_OPT}" = "yes" ] && [ "${SQUIRRELMAIL_VER}" != "0" ]; then
                doSquirrelmail;
        fi

        if [ "${ZEND_OPT}" = "yes" ]; then
                doZend;
        fi
		
	if [ "${IONCUBE_OPT}" = "yes" ]; then
                doIoncube;
        fi

        if [ "${EXIMCONF_OPT}" = "yes" ]; then
                doEximConf;
        fi

        if [ "${PHP_INI_OPT}" = "yes" ]; then
                doPhpIni;
        fi
        
        fix_curl_link_for_yum;

        printf "\n\n\n";
        echo "*************************************";
        echo "*                                   *";
        echo "*   All parts have been installed   *";
        echo "*                                   *";
        echo "*************************************";
        echo "";
        if [ "${WEBSERVER_OPT}" = "apache" ] || [ "${WEBSERVER_OPT}" = "nginx_apache" ]; then
		if [ "${SYSTEMD}" = "yes" ]; then
			echo "Type: systemctl restart httpd.service";
		else
			if [ ${OS} = "FreeBSD" ]; then
				echo "Type: /usr/local/etc/rc.d/httpd restart";
			elif [ -e ${DEBIAN_VERSION} ]; then
				echo "Type: /etc/init.d/httpd restart";
			else
				echo "Type: /sbin/service httpd restart";
			fi
		fi
	fi
	if [ "${WEBSERVER_OPT}" = "nginx" ] || [ "${WEBSERVER_OPT}" = "nginx_apache" ]; then
		if [ "${SYSTEMD}" = "yes" ]; then
			echo "Type: systemctl restart nginx.service";
		else
			if [ ${OS} = "FreeBSD" ]; then
				echo "Type: /usr/local/etc/rc.d/nginx restart";
			elif [ -e ${DEBIAN_VERSION} ]; then
				echo "Type: /etc/init.d/nginxrestart";
			else
				echo "Type: /sbin/service nginx restart";
			fi
		fi
	fi
	if [ "${WEBSERVER_OPT}" = "litespeed" ]; then
		#There is no systemd for litespeed yet
		if [ ${OS} = "FreeBSD" ]; then
			echo "Type: /usr/local/etc/rc.d/litespeed restart";
		elif [ -e ${DEBIAN_VERSION} ]; then
			echo "Type: /etc/init.d/litespeed restart";
		else
			echo "Type: /sbin/service litespeed restart";
		fi
	fi
}

####################################################


if [ $# -eq 2 ]; then
	USER_INPUT=0
	INPUT_VALUE=$2
fi

case "$1" in
	all) doChecks; doAll;
		;;
	options) doChecks; options;
		;;
	create_options) create_options;
		;;
	used_configs) used_configs;
		;;
	apache) doChecks; doApache2;
		;;
	litespeed) doChecks; doLiteSpeed;
		;;
	libjpeg) doLibJpeg; 
		;;
	libpng) doLibPng;
		;;
	zlib) doZlib;
		;;
	cron) doCron;
		;;
	curl) doCURL;
		;;
	mcrypt) doMCrypt;
		;;
	mhash) doMHash;
		;;
	freetype) doFreeType;
		;;
	iconv) doIconv;
		;;
	icu) doICU;
		;;
	nginx) doChecks; doNginx;
		;;
	nginx_apache) doChecks; doApache2; doNginx;
		;;
	autoconf) doAutoconf;
		;;
	automake) doAutomake;
		;;
	m4) doM4;
		;;
	libtool) doLibtool;
		;;
	libxml2) doLibxml2;
		;;
	libxslt) doLibxslt;
		;;
	pigz) doPigz;
		;;
	mod_lsapi) doModLsapi 1;
		;;
	mod_hostinglimits) doModHostingLimits 1;
		;;
	mod_ruid2) doModRuid2;
		;;
	mod_aclr2) doModAclr2;
		;;
	mod_htscanner2) doModHtscanner;
		;;
	php_htscanner2)	doPHPHtscanner $2 1;
		;;
	suhosin) doSuhosin;
		;;
	opcache) doOpcache;
		;;
	mod_fcgid) doModFCGID;
		;;
	clean) doClean;
		;;
	clean_old_webapps) doclean_old_webapps;
		;;
	clean_old_tarballs) doclean_old_tarballs;
		;;
	update) doUpdate;
		;;
	pcre) doPCRE;
		;;
	phpmyadmin) dophpMyAdmin;
		;;
	roundcube) doroundcube;
		;;
	squirrelmail) doSquirrelmail;
		;;
	update_script) doUpdateScript;
		;;
	update_data) doUpdateData;
		;;
	rewrite_confs) doChecks; doRewriteConfs;
		;;
	secure_php) secure_php
		;;
	update_da) doUpdateDA
		;;
	versions) doChecks; doVersions 1;
		;;
	versions_nobold) BOLD_OPT=no; boldon=""; boldoff=""; doChecks; doVersions 1;
		;;
	update_versions) doChecks; doVersions 0;
		;;
	update_webapps) doVersions 2;
		;;
	awstats) doawstats;
		;;
	webalizer) doWebalizer;
		;;
	proftpd) doChecks; doProftpd;
		;;
	pureftpd) doChecks; doPureftpd;
		;;
	zend) doZend;
		;;
	ioncube) doIoncube;
		;;
	mysql) doChecks; doMySQL;
		;;
	mariadb) doChecks; doMySQL;
		;;
	compile_mysql_binary) compile_mysql_binary;
		;;
	exim) doExim;
		;;
	exim_conf) doEximConf;
		;;
	php) doChecks; doPhp;
		;;
	php_expert) doChecks; doPhp_build $2 $3;
		;;
	php_ini) doChecks; doPhpIni;
		;;
	suphp) doChecks; doSuPhp;
		;;
	todovecot) convertToDovecot;
		;;
	dovecot) doDovecot;
		;;
	pigeonhole) doPigeonhole;
		;;
	spamassassin) dospamassassin;
		;;
	clamav) doclamav;
		;;
# Mailman is not yet supported
#	mailman) domailman;
#		;;
	set_fastest) set_fastest 0;
		;;
	set_fastest_quiet) set_fastest 1
		;;
	set) setOpt $2 $3;
		;;
	check_options) doChecks;
		;;
	version) showVersion;
		;;
	set_service) set_service $2 $3;
		;;
	opt_help) allSettings $2;
		;;
	settings_json) allSettingsJSON; #used for CustomBuild plugin only
		;;
	gen_help) generateHelp;
		;;
	gen_help_json) generateHelpJSON $2; #used for CustomBuild plugin only
		;;
	versions_json) echo "$(doVersions json)" | perl -0p -e 's/\},\n\}/\}\n\}/'; #used for CustomBuild plugin only
		;;
	versions_ajax) doVersions_ajax;
		;;
	get_versions_txt) downloadVersionsTxt; #will probably be used for CustomBuild plugin
		;;
	kill) doKill;
		;;
	mysql_backup) doMySQLback;
		;;
	custom_config) customize_config $2; #used for CustomBuild plugin only
		;;
	set_versions_txt) set_versions $2; #used for CustomBuild plugin only
		;;
	show_component_config) showComponentConfig $2; #used for CustomBuild plugin only
		;;
	remove_customized_config) removeComponentConfig $2; #used for CustomBuild plugin only
		;;
	list_configs_json) listConfigsJSON; #used for CustomBuild plugin only
		;;
	show_file) showFile $2; #used for CustomBuild plugin only
		;;
	get_timezone) getTimezone;
		;;
	* )	showHelp;
		exit 0;
		;;
esac

DOCLEAN_CASE=1;
case "$1" in
	update) doclean_toggle ;;
	update_data) doclean_toggle ;;
	"") doclean_toggle ;;
	gen_help_json) doclean_toggle ;;
	opt_help) doclean_toggle ;;
	set) doclean_toggle ;;
	get_versions_txt) doclean_toggle ;;
	update_script) doclean_toggle ;;
	versions_json) doclean_toggle ;;
	versions_ajax) doclean_toggle ;;
	gen_help) doclean_toggle ;;
	gen_help_json) doclean_toggle ;;
	version) doclean_toggle ;;
	versions) doclean_toggle ;;
	set_fastest) doclean_toggle ;;
	set_fastest_quiet) doclean_toggle ;;
	kill) doclean_toggle ;;
	update_da) doclean_toggle ;;
	versions_nobold) doclean_toggle ;;
	list_configs_json) doclean_toggle ;;
	settings_json) doclean_toggle ;;
	get_timezone) doclean_toggle ;;
	custom_config) doclean_toggle ;;
	set_versions_txt) doclean_toggle ;;
	show_component_config) doclean_toggle ;;
	remove_customized_config) doclean_toggle ;;
	show_file) doclean_toggle ;;
	check_options) doclean_toggle ;;
esac

if [ "${CLEAN_OPT}" = "yes" ] && [ "${DOCLEAN_CASE}" = "1" ]; then
	doClean;
fi
if [ "${DOCLEAN_CASE}" = "1" ]; then
	if [ "${CLEAN_OPT}" = "yes" ]; then
		if [ ! -e ${LOCKFILE} ]; then
			doClean;
		fi
	fi
	writeLog $@
fi

exit 0;
